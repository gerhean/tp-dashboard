[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-1/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Recretary is a tool that helps Executive Personal Secretaries manage their day-to-day tasks and take care of their executive\u0027s busy meeting schedule. The aim is to reduce the burden and the workload of the Executive Personal Secretaries.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested in using Recretary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested about developing Recretary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 11,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "xxzz-tt": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "### Koh Zhe Hao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003cimg src\u003d\"images/koh-zhe-hao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "[[github](http://github.com/koh-zhe-hao)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "[[portfolio](team/koh-zhe-hao.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Responsibilities: General work and Update contacts implementation to contain new class Company"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "### Liu Chuyue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "\u003cimg src\u003d\"images/ramenmen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "[[github](http://github.com/ramenmen)] [[portfolio](team/liu-chuyue.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* Responsibilities: General work and Implementing new Meeting class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "### Adithya Narayan Rangarajan Sreenivasan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cimg src\u003d\"images/adithyanarayan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[[github](http://github.com/AdithyaNarayan)] [[portfolio](team/adi.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* Responsibilities: UI and Frontend"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* In charge of `UI`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* JavaFX expert"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "### Tan Xuan Zhi"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "\u003cimg src\u003d\"images/xxzz-tt.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "[[github](https://github.com/xxzz-tt)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "[[portfolio](team/tan-xuan-zhi.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* Responsibilities: Implement commands relating to model class Meeting"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "### Zhao Huan"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cimg src\u003d\"images/zhaohuanqdcn.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "[[github](http://github.com/zhaohuanqdcn)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "[[portfolio](team/zhao-huan.md)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* Responsibilities: Update Model and Implement commands relating to Meeting"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 6,
      "zhaohuanqdcn": 5,
      "ramenmen": 4,
      "AdithyaNarayan": 6,
      "-": 34,
      "xxzz-tt": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete_meeting 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete_meeting 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "![Interactions Inside the Logic Component for the `delete_meeting 1` Command](images/DeleteMeetingSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** The lifeline for `DeleteMeetingCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* stores the data of contacts and meetings."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* exposes unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cMeeting\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "### Add meeting feature"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "The add meeting mechanism is facilitated by `AddMeetingCommand`. It extends `Command`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* `AddMeetingCommand#execute()` —  Add a new meeting in the model if it is valid and not a duplicate."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#addMeeting()`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "The following sequence diagram shows how the add meeting operation works:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "![AddMeetingSequenceDiagram](images/AddMeetingSequenceDiagram.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ":information_source: **Note:** The lifeline for `AddMeetingCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "##### Aspect: How add meeting executes"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* Consistent workflow with other commands"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "### Edit meeting feature"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "The edit meeting mechanism is facilitated by `EditMeetingCommand`. It extends `Command`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* `EditMeetingCommand#execute()` —  Edit a new meeting in the model if it is valid and not a duplicate."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#setMeeting()`, `Model#getFilteredMeetingList()` and `Model#getFilteredMeetingList()`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "The following sequence diagram shows how the edit meeting operation works:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "![EditMeetingSequenceDiagram](images/EditMeetingSequenceDiagram.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ":information_source: **Note:** The lifeline for `EditMeetingCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "##### Aspect: How edit meeting executes"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* Consistent workflow with other commands"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "### Delete meeting feature"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "The delete meeting mechanism is facilitated by `DeleteMeetingCommand`. It extends `Command`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   `DeleteMeetingCommand#execute()` —  Deletes the meeting (and possibly its recurrences) specified by an index."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "The flow of a usual delete meeting execution cycle has been illustrated above as an example in [**logic component**](#logic-component):"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "##### Aspect: which list to delete from?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "*   `DeleteMeetingCommand` is implemented in a way so that it deletes the meeting specified by an index from the _last shown list_. This enables combinatorial commands which seem more intuitive. For instance, `delete_meeting 1` following a `FindMeetingCommand` deletes the first meeting from the search results, whereas the same command following a `ListMeetingCommand` deletes the first meeting from the whole meeting list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "### Find meeting feature"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "The find meeting mechanism is facilitated by `FindMeetingCommand`. It extends `Command`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `FindMeetingCommand#execute()` —  Finds meeting where the data of meeting matches given keywords."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "Given below is the high-level class diagram based on `FindMeetingCommand` and its direct dependencies."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "![FindMeetingClassDiagram](images/FindMeetingClassDiagram.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "The given sequence diagram illustrates the flow of a usual find meeting execution cycle:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "![FindMeetingSequenceDiagram](images/FindMeetingSequenceDiagram.png)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ":information_source: **Note:** The lifeline for `FindMeetingCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "##### Aspect: Keyword matching Title or Data?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "*   Initially, mimicing the functionality of `FindContactCommand`, the find meeting only matched the keywords to the title. However, it made more sense to match other attributes like participant names, location and time since it would be easy to pinpoint which meetings take place where through a single find command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "*   Hence, the predicate matching logic was tweaked in order to accomodate other attributes to make the feature more robust."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "##### \\[Proposed\\] DateTime matching using different formats"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "*   Currently, DateTime finding is carried out using string matching. It would be more natural to match through DateTime comparison. This would make sure that different date formats like \"November\" and \"Nov\" both match the meeting."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "### List meeting feature"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "The list meeting mechanism is facilitated by `ListMeetingCommand`. It extends `Command`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   `ListMeetingCommand#execute()` —  Lists out all the meetings stored in the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "##### Aspect: why not use find?"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "*   Adding a syntax like `find_meeting` with empty keyword makes the list operation less intuitive. As `list_meeting` is a frequently used functionality, we decide to have a separate command."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "### Clear meeting feature"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "The clear meeting mechanism is facilitated by `ClearMeetingCommand`. It extends `Command`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   `ClearMeetingCommand#execute()` —  Deletes all the meetings stored in the address book."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "##### Aspect: why not use delete?"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "*   Adding a syntax like `delete_meeting all` command makes it hard to parse `DeleteMeetingCommand`, and `clear_meeting` itself is not very often used. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "### Meeting Class"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "The Meetings class and meeting details classes are adapted from the code for Persons and person details."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "The following is the Class Diagram for the meetings feature."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "![MeetingClassDiag](images/MeetingClassDiag.png)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "The Meetings class and meeting details classes are adapted from the code for Persons and person details. The Meeting class contains two methods that are not present in the Person class:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* `addParticipant(Person person)` — Adds person as a participant of the meeting."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* `delParticipant(Index index)` — Deletes the participant at index from the meeting\u0027s list of participants."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "The following sequence diagram shows how the delete participant operation works:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "![DelPartSequenceDiagram](images/DelPartSequenceDiagram.png)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ":information_source: **Note:** The lifeline for `DeleteParticipantCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "The `addParticipant` command does the opposite with a similar sequence — it calls `Meeting#addParticipant(person)`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a delete participant command:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "![ParticipantActivityDiagram](images/ParticipantActivityDiagram.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "##### Aspect: How add \u0026 delete participants executes"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* Consistent workflow with other commands"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Target user profile**:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Potential Users (who prefer CLI/typing):"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Coders"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Authors/Bloggers/Journalists"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * **Personal Secretaries**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Potential Users (who need address book):"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Business managers"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * **Personal Secretaries**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * HR admins"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Salespersons"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Common in both: "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * **Executive Personal Secretary**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Job Focus: "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Arrange conference calls and meetings"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Manage clients"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Send email correspondence"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Make travel arrangements"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Value proposition**: "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Minimise the workload"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Easier to manage"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Automate monotonous and repetitive tasks"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Decrease human errors"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Reduce typos and spelling mistakes"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Optimise meeting timings and location"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Reminders for important tasks/events"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | update existing meetings | make sure the details are up to date.| "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | delete specified meetings if they are cancelled.| |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | view all upcoming meetings in a specific order.| |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | add a meeting to the schedule.| |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | search for a certain contact I am looking for| |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | view a list of all my contacts at any time.| |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | create new contact in my contact list.| |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    first-time user | enter my and my employer\u0027s details| |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | search for meetings with some criteria.| |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent meeting planner | receive reminders from the app that to remind my employer for an upcoming meeting | make sure my employer can be on time for their meetings.| "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent meeting planner | attach a location and time of the meeting as additional information| |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |     expert user | delete some unwanted contacts in my contact list.| |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | update each of my contacts whenever there is a change in their particulars/ details.||"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | plan a route based on meeting locations and times.| |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "| `* *`  |    frequent user | receive reminders for upcoming meetings |  prepare for the meeting. | "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | assimilate a map in the app to keep track of all frequently visited locations  |  plan the travel routine wisely that takes time taken to travel from one place to another place into consideration.| "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | send emails directly from the app by choosing the necessary recipients from the contact list.| |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    relatively new user | input slightly variated input that the app can understand and interpret  |  learn while doing.| "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    first time user | learn how to use the app  |  actually use the app to solve the tasks that I have.| "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "| `* *`  |    long-time user | automatically archive expired meetings | I am not distracted by old meetings.| "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    user ready to start using the app | clear all current data |  get rid of data I added when experimenting with the app.| "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    meeting planner | give priority to certain meetings | make sure these important meetings will take place under the best possible circumstances.| "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | use built-in shortcuts  |  accelerate my workflow.| "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | import and export the existing calendar  |  save time on entering this information manually.| "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    relatively new user | be prompted to change my invalid input  |  get it correctly from then on.|  "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "| `* * *`  |    first time user | find the list of all features that the app has | know what specific task can I complete by using this app.| "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* * *`  |    potential user exploring the app | see the app populated with sample data,  |  easily see how the app will look like when it is in use.|"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "| `* * *`  |    regular user | sync/export contacts/calendar| save time on data migration. |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "(For all use cases below, the **System** is the `Recretary` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC01 - Add a person**  "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to add a new contact with the relevant details."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System indicates that the addition is successful."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. System detects an error in the data."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a1. System requests for the correct data."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a2. User enters new data."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 2."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC02 - Add a meeting and its participants**  "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to add a new meeting with the location, title and date."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System requests for the participant lists."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. User enters the participant\u0027s name (must be one of the contacts)."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "4. System indicates that the addition is successful."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "5. User repeats step 3 until all participants are added."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. System detects an error in the data."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a1. System requests for the correct data."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a2. User enters new data."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 2."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 3a. Contact is not in System."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 3a1. System requests for the correct contact."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 3a2. User enters new contact name."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 4."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC03 - List all contacts or all meetings**  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to list all contacts/ meetings"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System shows the full list of contacts/ meetings"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2a. The requested list is empty."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC04 - Edit a contact**  "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to \u003cins\u003e list all contacts (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. User requests to edit a contact with its index and new details."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. System indicates that the update is successful."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2b. User enters a negative integer as index."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b1. System indicates the error and requests for a non-negative index as index."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b2. User enters the correct index and new details."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2b1-2b2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2c. User did not enter new details."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c1. System indicates the error and requests for the correct details."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c2. User enters the specific index and correct details."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2c1-2c2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC05 - Edit a meeting**  "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to \u003cins\u003e list all meetings (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. User requests to edit a meeting with its index and new details."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. System indicates that the update is successful."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2b. User enters a negative integer as index."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b1. System indicates the error and requests for a non-negative index as index."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b2. User enters the correct index and new details."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2b1-2b2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2c. User did not enter new details."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c1. System indicates the error and requests for the correct details."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c2. User enters the specific index and correct details."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2c1-2c2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": " "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2d. User requests to edit participant list."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2d1. System shows current list of participants. "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2d2. User enters the index of the participant he/she wants to remove."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2d3. System shows the updated list of participants."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2d1-2d2 are repeated until the user finishes editing.  "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC06 - Find a contact or a meeting**  "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to search for a contact/meeting with a keyword."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System shows the list of contacts/ meetings with matching keywords."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. No contact/ meeting matched the keyword method."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a1. System shows a message indicating no matching records were found."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC07 - Delete a contact or a meeting**  "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to \u003cins\u003e list all contacts/ meetings (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. User requests to remove a contact/ meeting from the list with its index."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. System shows a success message "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2b. User enters a negative integer as index."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2a1. System indicates the error and requests for a non-negative index as index."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2a2. User enters the correct index."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2b1-2b2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC08 - Delete all contacts or meetings**  "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1.  User requests to delete all contacts/ meetings."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2.  System indicates that the deletion is successful."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**: "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. No contact/ meeting has been added."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "1.  Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "4.  Should be portable. The executable must be one-click run."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "5.  The data must be saved onto the hard disk and must be transferrable. In case of unexpected shutdown, the data must be preserved. The data should be human readable."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "6.  Each new update should be backwords-compatable with the data from the previous versions so that it will be easy for users to port over."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "7.  The app must speeden the workflow of the secretary and not be of hinderance.  "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **API**: Application Programming Interface"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **UML**: Unified Modeling Language"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **GUI**: Graphic User Interface"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **MSS**: Main Success Scenario (aka Main Flow of Events)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Java FX**: Standard GUI library for Java SE"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ":information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 27,
      "zhaohuanqdcn": 63,
      "ramenmen": 57,
      "AdithyaNarayan": 31,
      "-": 289,
      "xxzz-tt": 190
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Recretary is a **desktop app for managing contacts and meetings, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Recretary can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   First Run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Features"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    -   Contact Management"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Adding a person: `add_contact`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Listing all persons: `list_contact`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Editing a person: `edit_contact`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Locating persons: `find_contact`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Deleting a person: `delete_contact`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Clearing all entries: `clear_contact`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    -   Meeting Management"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Adding a meeting: `add_meeting`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Listing all meetings: `list_meeting`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Editing a meeting: `edit_meeting`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Locating meetings: `find_meeting`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Deleting a meeting: `delete_meeting`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        -   Adding a participant into a meeting: `add_part`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        -   Clearing all entries: `clear_meeting`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    -   General"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        -   Viewing help : `help`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        -   Exiting the program : `exit`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   FAQ"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Command summary"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "1. Download the latest `recretary.jar` from [here](https://github.com/se-edu/recretary/releases)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for Recretary."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    - **`list_contact`** : Lists all contacts."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    - **`add_contact`** `add_contact n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 c/ABC Holdings Pte. Ltd` : Adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    - **`delete_meeting`**`3` : Deletes the 3rd meeting shown in the current list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    - **`clear_meeting`** : Deletes all meetings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    - **`exit`** : Exits the app."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "---"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "### Contact Management"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Adding a person: `add_contact`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `add_contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COMPANY [r/COMPANY_ROLE] [t/TAG]…​`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `add_contact n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 c/ABC Holdings Pte. Ltd`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `add_contact n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Mansion p/1234567 r/CEO c/DEF Company`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Listing all persons: `list_contact`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `list_contact`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Editing a person: `edit_contact`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `edit_contact INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [c/COMPANY] [t/TAG] [r/COMPANY_ROLE]…`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Edits the person at the specified `INDEX`. The index refers to the index number"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Existing values will be updated to the input values."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   `edit_contact 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   `edit_contact 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Locating persons: `find_contact`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Find contacts whose names contain any of the given keywords."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `find_contact KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Only the name is searched."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   `find_contact John` returns `john chan` and `John Doe`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Deleting a person: `delete_contact`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `delete_contact INDEX`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* The index refers to the index number shown in the displayed list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* `delete_contact 2` deletes the 2nd contact in the address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* `find_contact Betsy` followed by `delete_contact 1` deletes the 1st contact in the results of the `find` command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Clearing all persons: `clear_contact`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Clears all persons from the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `clear_contact`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "   "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "### Meeting Management"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Adding a meeting: `add_meeting`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Adds a meeting into the meeting schedule."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Format: `add_meeting d/DATETIME dur/DURATION title/TITLE l/LOCATION [rec/RECURRENCE]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   The format for `DATETIME` is `d/M/yy HHmm`. \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    e.g. `d/1/11/20 1430`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    e.g. `d/1/1/20 1430`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    e.g. `d/12/11/20 1430`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   The format for `DURATION` is `H mm`. \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    e.g. `dur/1 30`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   The number of minutes in `DURATION` cannot exceed `59`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   The field `RECURRENCE` can be one of `DAILY`, `WEEKLY` or `MONTHLY`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "-   The number of recurrences added is by default 5, and can be edited in `UserPrefs`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "After adding a meeting, add new participants to it with the `add_part` command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Only people in your contacts can be added as participants."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `add_meeting title/abc company meeting d/31/12/20 1400 dur/00 60 l/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Listing all meetings: `list_meeting`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Shows a list of all meetings in the address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Format: `list_meeting`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Editing a meeting: `edit_meeting`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Edits an existing meeting in the meeting schedule. The `RECURRENCE` field is not modifiable, and the edition of recurring meeting will only edit the specified instance. If the title of a recurring meeting is edited, it is no longer considered as an instance of recurrence."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Format: `edit_meeting INDEX [d/DATETIME] [t/TITLE] [l/LOCATION] [del_part/ P_INDEX]...`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Delete participants in a meeting with this format:  "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "E.g.  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Recretary: `Here is the current list of participants.`  "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 1. John doe, abc company \u003c/code\u003e  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 2. John doe, def company \u003c/code\u003e  "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "`Enter the next participant’s index to delete`  "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "User: `edit_meeting INDEX del_part/ 1`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "You can add new participants to a meeting with the separate `add_part` command."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Edits the meeting at the specified `INDEX`. The index refers to the index number shown in the displayed meeting list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   Existing values will be updated to the input values."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* `edit_meeting 1 d/10/11/20 1400 l/clementi` Edits the datetime and location of the 1st meeting to be "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`10/11/2020 1400` and `clementi` respectively."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Locating meetings: `find_meeting`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Find meetings whose titles contain any of the given keywords."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `find_meeting KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   The search is case-insensitive. e.g `discuss` will match `Discuss`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   The order of the keywords does not matter. e.g. `Shareholder Meeting` will match `Meeting Shareholder`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   All fields (title, participants etc) are searched."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Only full words will be matched e.g. `Team` will not match `Teams`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "-   Meetings matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    e.g. `Shareholder Meeting` will return `Shareholder Chat`, `Team Meeting`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `find_meeting abc def` returns `abc meeting`, `def meeting`\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Deleting a meeting: `delete_meeting`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Deletes the specified item (and its recurrernces) from the address book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Format: `delete_meeting INDEX [rec/RECURRING]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* Deletes the meeting at the specified `INDEX`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* The index refers to the index number shown in the displayed list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* The recurring must be either `true` or `false`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* `delete_meeting 2` deletes the 2nd meeting in the meeting schedule."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* `delete_meeting 2 rec/true` deletes the 2nd meeting and all its recurrences in the address book."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* `find_meeting Shareholder` followed by `delete_meeting 1` deletes the 1st contact in the results of the `find` command."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "#### Adding a participant into a meeting: `add_part`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "Adds a participant with the specified `CONTACT_INDEX` in the currently viewable contact list into the meeting with the specified `MEETING_INDEX`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "Format: `add_part ci/CONTACT_INDEX mi/MEETING_INDEX`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Tip:**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "Run a `find_contact` command before running an `add_part` to narrow the contact list so that you can easily add a contact instead of scrolling through the whole list!"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "Run a `find_meeting` command before running an `add_part` to narrow the meeting list so that you can easily add a meeting instead of scrolling through the whole list!"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `add_part ci/1 mi/3` adds the first contact in the whole list to the 3rd meeting."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "-   `find_contact alice` followed by `add_part ci/1 mi/2` adds the first contact of the `find_contact` command\u0027s result into the 2nd meeting."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "#### Clearing all meetings : `clear_meeting`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Clears all meetings from the meeting schedule."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Format: `clear_meeting`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "### General"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Viewing help : `help`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Exiting the program : `exit`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "#### Saving the data"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Recretary data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "---"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Recretary home folder."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "---"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "***Generals*** |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "***Contacts*** |"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Add** | `add_contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COMPANY [r/COMPANY_ROLE] [t/TAG]…` \u003cbr\u003e e.g., `add_contact n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd a/XYZ Company r/manager t/friend` "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Delete** | `delete_contact INDEX` \u003cbr\u003e e.g., `delete_contact 3`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Edit** | `edit_contact INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [c/COMPANY] [r/COMPANY_ROLE] [t/TAG]…`\u003cbr\u003e e.g.,`edit_contact 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Find** | `find_contact KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find_contact James Jake`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**List** | `list_contact`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Clear** | `clear_contact`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "***Meetings*** |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "**Add** |`add_meeting d/DATETIME dur/DURATION title/TITLE l/LOCATION [rec/RECURRENCE]` \u003cbr\u003e e.g., `add_meeting d/31/12/20 1400 dur/01 00 title/xyz meeting l/John street, block 1, #01-01 rec/weekly`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Add Participant** |`add_part ci/[INDEX] mi/[INDEX]`\u003cbr\u003e e.g., `add_part ci/1 mi/3`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "**Delete** | `delete_meeting INDEX [rec/RECURRING]`\u003cbr\u003e e.g., `delete_meeting 5 rec/true`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Edit** | `edit_meeting INDEX [d/DATETIME] [dur/DURATION] [t/TITLE] [l/LOCATION]`\u003cbr\u003e e.g.,`edit_meeting 1 dur/01 30 l/COM2 LT17`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Find** | `find_meeting KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find_meeting recretary stakeholders`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**List** | `list_meeting`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "**Clear** | `clear_meeting`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 27,
      "zhaohuanqdcn": 36,
      "ramenmen": 97,
      "AdithyaNarayan": 66,
      "-": 121,
      "xxzz-tt": 8
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "title: Recretary"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Recretary is a tool that helps Executive Personal Secretaries manage their day-to-day tasks and take care of their executive\u0027s busy meeting schedule. The aim is to reduce the burden and the workload of the Executive Personal Secretaries.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested in using Recretary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested about developing Recretary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 7,
      "-": 12
    }
  },
  {
    "path": "docs/team/adi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "title: Adithya Narayan Rangarajan Sreenivasan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 1,
      "-": 45
    }
  },
  {
    "path": "docs/team/koh-zhe-hao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "title: Koh Zhe Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 46
    }
  },
  {
    "path": "docs/team/tan-xuan-zhi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "title: Tan Xuan Zhi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "xxzz-tt": 46
    }
  },
  {
    "path": "docs/team/zhao-huan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "title: Zhao Huan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            \"Could not save sorted data to file at the initialization stage\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //Handle the situation where user manually append information in addressbook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sortMeeting(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private void sortMeeting(Model model) throws IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.sortMeeting();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            logger.log(Level.WARNING, FILE_OPS_ERROR_MESSAGE, ioe);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw ioe;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 17,
      "ramenmen": 1,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public static final String MESSAGE_MEETINGS_LISTED_OVERVIEW \u003d \"%1$d meetings listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 2,
      "AdithyaNarayan": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of meetings */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_contact\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_COMPANY + \"COMPANY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_COMPANY_ROLE + \"COMPANY ROLE]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_COMPANY + \"KFC \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_COMPANY_ROLE + \"CEO\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public AddContactCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 14,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PARTICIPANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class AddMeetingCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_meeting\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to your schedule. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_DURATION + \"DURATION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"[\" + PREFIX_ADD_PARTICIPANTS + \"PARTICIPANTS]...\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_TITLE + \"v1.3 discussion \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            + PREFIX_DATETIME + \"31/12/20 1400 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            + PREFIX_DURATION + \"1 30 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            + PREFIX_LOCATION + \"Cool spot\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            + PREFIX_RECURRENCE + \"weekly\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s \\n \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Add participants by finding their name, and key in their index on the list\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in the schedule\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private final Meeting toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Creates an AddMeetingCommand to add the specified {@code Meeting}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public AddMeetingCommand(Meeting meeting) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        toAdd \u003d meeting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (model.hasMeeting(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        for (Meeting meeting : toAdd.getRecurrencesAsList()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            model.addMeeting(meeting);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        model.sortMeeting();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                || (other instanceof AddMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMeetingCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 10,
      "ramenmen": 2,
      "xxzz-tt": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddParticipantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class AddParticipantCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_part\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a participant to your meeting. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"Parameters: CONTACT_INDEX MEETING_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"1\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_MEETING_INDEX + \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New participant added to meeting: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_NO_MEETING \u003d \"This meeting does not exist!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_NO_CONTACT \u003d \"This contact does not exist!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Index participantIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Index meetingIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public AddParticipantCommand(Index participantIndex, Index meetingIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.participantIndex \u003d participantIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.meetingIndex \u003d meetingIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (participantIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CONTACT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person personToAdd \u003d filteredPersonList.get(participantIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        List\u003cMeeting\u003e filteredMeetingList \u003d model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (meetingIndex.getZeroBased() \u003e\u003d filteredMeetingList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MEETING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Meeting toAdd \u003d filteredMeetingList.get(meetingIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        model.deleteMeeting(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        toAdd.addParticipant(personToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        model.addMeeting(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.sortMeeting();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                || (other instanceof AddParticipantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 meetingIndex.equals(((AddParticipantCommand) other).meetingIndex)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 participantIndex.equals(((AddParticipantCommand) other).participantIndex));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 17,
      "ramenmen": 5,
      "xxzz-tt": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ClearContactCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear_contact\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Contacts have been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        ab.setMeetings(model.getFilteredMeetingList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        model.setAddressBook(ab);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "zhaohuanqdcn": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class ClearMeetingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear_meeting\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Meetings has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        ab.setPersons(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        model.setAddressBook(ab);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DeleteContactCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_contact\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * Deletes a meeting identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class DeleteMeetingCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_meeting\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            + \": Deletes the meeting identified by the index number used in the displayed meeting list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Deleted Meeting: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private final boolean deleteRecurrence;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Constructor for a command to delete a single instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public DeleteMeetingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.deleteRecurrence \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Constructor for a command to delete all recurrences"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public DeleteMeetingCommand(Index targetIndex, boolean deleteRecurrence) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.deleteRecurrence \u003d deleteRecurrence;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting meetingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (!deleteRecurrence) { // delete only one instance"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            model.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        } else { // delete all recurrences"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            model.deleteRecurringMeetings(meetingToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                || (other instanceof DeleteMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteMeetingCommand) other).targetIndex)) // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                \u0026\u0026 deleteRecurrence \u003d\u003d ((DeleteMeetingCommand) other).deleteRecurrence;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteParticipantCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DeleteParticipantCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_part\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete a participant from your meeting. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"Parameters: CONTACT_INDEX MEETING_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_CONTACT_INDEX + \"1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_MEETING_INDEX + \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Participant is deleted from meeting: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_NO_MEETING \u003d \"This meeting does not exist!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_NO_PARTICIPANT \u003d \"There is no such participant in the meeting!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Index participantIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Index meetingIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DeleteParticipantCommand (Index participantIndex, Index meetingIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.participantIndex \u003d participantIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.meetingIndex \u003d meetingIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        List\u003cMeeting\u003e filteredMeetingList \u003d model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (meetingIndex.getZeroBased() \u003e\u003d filteredMeetingList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MEETING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Meeting meeting \u003d filteredMeetingList.get(meetingIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (participantIndex.getZeroBased() \u003e\u003d meeting.getParticipants().size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PARTICIPANT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.deleteMeeting(meeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        meeting.delParticipant(participantIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.addMeeting(meeting);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.sortMeeting();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, meeting));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof DeleteParticipantCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 meetingIndex.equals(((DeleteParticipantCommand) other).meetingIndex)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 participantIndex.equals(((DeleteParticipantCommand) other).participantIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": " * Edits the details of an existing person in Recretary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class EditContactCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_contact\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_COMPANY_ROLE + \"COMPANY ROLE]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public EditContactCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Company updatedCompany \u003d editPersonDescriptor.getCompany().orElse(personToEdit.getCompany());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Set\u003cCompanyRole\u003e updatedCompanyRoles \u003d editPersonDescriptor.getCompanyRoles()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .orElse(personToEdit.getCompanyRoles());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedCompany, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                updatedCompanyRoles);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        private Company company;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        private Set\u003cCompanyRole\u003e companyRoles;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            setCompany(toCopy.company);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            setCompanyRoles(toCopy.companyRoles);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, company, address, tags, companyRoles);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void setCompany(Company company) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.company \u003d company;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public Optional\u003cCompany\u003e getCompany() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return Optional.ofNullable(company);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void setCompanyRoles(Set\u003cCompanyRole\u003e companyRoles) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.companyRoles \u003d (companyRoles !\u003d null) ? new HashSet\u003c\u003e(companyRoles) : null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public Optional\u003cSet\u003cCompanyRole\u003e\u003e getCompanyRoles() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return (companyRoles !\u003d null) ? Optional.of(Collections.unmodifiableSet(companyRoles)) : Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u0026\u0026 getCompany().equals(e.getCompany())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u0026\u0026 getCompanyRoles().equals(e.getCompanyRoles());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 42,
      "-": 216,
      "xxzz-tt": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PARTICIPANTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Recurrence;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": " * Edits the details of an existing meeting in Recretary."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class EditMeetingCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_meeting\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"[\" + PREFIX_ADD_PARTICIPANTS + \"PARTICIPANTS] \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_TITLE + \"OP2 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            + PREFIX_DURATION + \"01 20\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_EDIT_MEETING_SUCCESS \u003d \"Edited Meeting: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private final EditMeetingDescriptor editMeetingDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @param editMeetingDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingCommand(Index index, EditMeetingDescriptor editMeetingDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(editMeetingDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.editMeetingDescriptor \u003d new EditMeetingDescriptor(editMeetingDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.editMeetingDescriptor.setModel(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting meetingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting editedMeeting \u003d createEditedMeeting(meetingToEdit, editMeetingDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!meetingToEdit.isSameMeeting(editedMeeting) \u0026\u0026 model.hasMeeting(editedMeeting)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        model.setMeeting(meetingToEdit, editedMeeting);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.sortMeeting();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Creates and returns a {@code Meeting} with the details of {@code meetingToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * edited with {@code editMeetingDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingDescriptor editMeetingDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assert meetingToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Title updatedTitle \u003d editMeetingDescriptor.getTitle().orElse(meetingToEdit.getTitle());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DateTime updatedDateTime \u003d editMeetingDescriptor.getDateTime().orElse(meetingToEdit.getDateTime());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Duration updatedDuration \u003d editMeetingDescriptor.getDuration().orElse(meetingToEdit.getDuration());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Location updatedLocation \u003d editMeetingDescriptor.getLocation().orElse(meetingToEdit.getLocation());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Recurrence updatedRecurrence \u003d editMeetingDescriptor.getRecurrence().orElse(meetingToEdit.getRecurrence());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Set\u003cPerson\u003e updatedPersons \u003d editMeetingDescriptor.getPersons().orElse(meetingToEdit.getParticipants());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return new Meeting(updatedTitle, updatedDuration, updatedDateTime,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                updatedLocation, updatedRecurrence, updatedPersons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        EditMeetingCommand e \u003d (EditMeetingCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                \u0026\u0026 editMeetingDescriptor.equals(e.editMeetingDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Stores the details to edit the meeting with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * corresponding field value of the meeting."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static class EditMeetingDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private Set\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        private Recurrence recurrence;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private Model model;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public EditMeetingDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public EditMeetingDescriptor(EditMeetingCommand.EditMeetingDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            setPersons(toCopy.persons);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            setRecurrence(toCopy.recurrence);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, dateTime, duration, location, persons, recurrence);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setModel(Model model) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.model \u003d model;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void setRecurrence(Recurrence recurrence) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public Optional\u003cRecurrence\u003e getRecurrence() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return Optional.ofNullable(recurrence);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setPersons(Set\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.persons \u003d (persons !\u003d null) ? new HashSet\u003c\u003e(persons) : null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public Optional\u003cSet\u003cPerson\u003e\u003e getPersons() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return (persons !\u003d null) ? Optional.of(Collections.unmodifiableSet(persons)) : Optional.empty();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            if (!(other instanceof EditMeetingDescriptor)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            EditMeetingDescriptor e \u003d (EditMeetingDescriptor) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    \u0026\u0026 getDuration().equals(e.getDuration())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                    \u0026\u0026 getRecurrence() \u003d\u003d e.getRecurrence()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    \u0026\u0026 getPersons().equals(e.getPersons());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 1,
      "zhaohuanqdcn": 16,
      "xxzz-tt": 230
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FindContactCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_contact\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public FindContactCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof FindContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.DataContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " * Finds and lists all meetings in address book whose string data contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class FindMeetingCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_meeting\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all meetings whose string data contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" nus 2020 meeting\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final DataContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public FindMeetingCommand(DataContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        model.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                String.format(Messages.MESSAGE_MEETINGS_LISTED_OVERVIEW, model.getFilteredMeetingList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                || (other instanceof FindMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindMeetingCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ListContactCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_contact\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * Lists all meetings in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class ListMeetingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_meeting\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 21,
      "ramenmen": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.meeting.MeetingWithinDaysPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Finds and lists all meetings in address book whose string data contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class RemindMeetingCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind_meeting\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all meetings whose date and time are \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"within certain hours relative to the time on local machine \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"Parameters: HOURS (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 72\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final MeetingWithinDaysPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public RemindMeetingCommand(MeetingWithinDaysPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        model.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String.format(Messages.MESSAGE_MEETINGS_LISTED_OVERVIEW, model.getFilteredMeetingList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof RemindMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 predicate.equals(((RemindMeetingCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Parses input arguments and creates a new AddContactCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandParser implements Parser\u003cAddContactCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public AddContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_COMPANY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMPANY_ROLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_COMPANY, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Set\u003cCompanyRole\u003e companyRoleList \u003d ParserUtil.parseCompanyRoles(argMultimap.getAllValues(PREFIX_COMPANY_ROLE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person person \u003d new Person(name, phone, email, company, address, tagList, companyRoleList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new AddContactCommand(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 18,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Recurrence;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class AddMeetingCommandParser implements Parser\u003cAddMeetingCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMeetingCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * and returns an AddMeetingCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public AddMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_DURATION,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                        PREFIX_TITLE, PREFIX_LOCATION, PREFIX_RECURRENCE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME, PREFIX_DURATION, PREFIX_TITLE, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Set\u003cPerson\u003e participantList \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Recurrence recurrence;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_RECURRENCE)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            recurrence \u003d ParserUtil.parseRecurrence(argMultimap.getValue(PREFIX_RECURRENCE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            recurrence \u003d Recurrence.NONE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting meeting \u003d new Meeting(title, duration, dateTime, location, recurrence, participantList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new AddMeetingCommand(meeting);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 11,
      "xxzz-tt": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddParticipantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.AddParticipantCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class AddParticipantCommandParser implements Parser\u003cAddParticipantCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddParticipantCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * and returns a AddParticipantCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public AddParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_INDEX, PREFIX_MEETING_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_INDEX)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                        AddParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            Index participantIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            Index meetingIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MEETING_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return new AddParticipantCommand(participantIndex, meetingIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddParticipantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xxzz-tt": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.AddParticipantCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.ClearContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.logic.commands.ClearMeetingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.FindContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.FindMeetingCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.ListMeetingCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.RemindMeetingCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // Contact Commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case AddContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new AddContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case EditContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new EditContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case DeleteContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new DeleteContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case ClearContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new ClearContactCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case FindContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new FindContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case ListContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new ListContactCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // Meeting Commands"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case ListMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return new ListMeetingCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        case FindMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            return new FindMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case RemindMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new RemindMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case DeleteMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return new DeleteMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        case AddMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return new AddMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        case AddParticipantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return new AddParticipantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case DeleteParticipantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new DeleteParticipantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        case EditMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return new EditMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case ClearMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return new ClearMeetingCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 20,
      "zhaohuanqdcn": 13,
      "AdithyaNarayan": 2,
      "-": 59,
      "xxzz-tt": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final Prefix PREFIX_COMPANY_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dur/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final Prefix PREFIX_RECURRENCE \u003d new Prefix(\"rec/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_ADD_PARTICIPANTS \u003d new Prefix(\"add_part/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_DELETE_PARTICIPANTS \u003d new Prefix(\"del_part/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_INDEX \u003d new Prefix(\"ci/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final Prefix PREFIX_MEETING_INDEX \u003d new Prefix(\"mi/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "zhaohuanqdcn": 1,
      "-": 15,
      "xxzz-tt": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Parses input arguments and creates a new DeleteContactCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DeleteContactCommandParser implements Parser\u003cDeleteContactCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteContactCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * and returns a DeleteContactCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DeleteContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * Parses input arguments and creates a new DeleteMeetingCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class DeleteMeetingCommandParser implements Parser\u003cDeleteMeetingCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMeetingCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * and returns a DeleteMeetingCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public DeleteMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECURRENCE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        boolean deleteRecurrence \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            if (argMultimap.getValue(PREFIX_RECURRENCE).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                deleteRecurrence \u003d ParserUtil.parseBoolean(argMultimap.getValue(PREFIX_RECURRENCE).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return new DeleteMeetingCommand(index, deleteRecurrence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMeetingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteParticipantCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class DeleteParticipantCommandParser implements Parser\u003cDeleteParticipantCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteParticipantCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * and returns a DeleteParticipantCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public DeleteParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_CONTACT_INDEX, PREFIX_MEETING_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_CONTACT_INDEX)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                        DeleteParticipantCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            Index participantIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CONTACT_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            Index meetingIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MEETING_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return new DeleteParticipantCommand(participantIndex, meetingIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteParticipantCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xxzz-tt": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Parses input arguments and creates a new EditContactCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class EditContactCommandParser implements Parser\u003cEditContactCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditContactCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * and returns an EditContactCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public EditContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        PREFIX_COMPANY, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMPANY_ROLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            editPersonDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        parseCompanyRolesForEdit(argMultimap.getAllValues(PREFIX_COMPANY_ROLE))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .ifPresent(editPersonDescriptor::setCompanyRoles);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new EditContactCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Optional\u003cSet\u003cCompanyRole\u003e\u003e parseCompanyRolesForEdit(Collection\u003cString\u003e companyRoles) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assert companyRoles !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (companyRoles.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Collection\u003cString\u003e companyRoleSet \u003d companyRoles.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 companyRoles.contains(\"\") ? Collections.emptySet() : companyRoles;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Optional.of(ParserUtil.parseCompanyRoles(companyRoleSet));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 34,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD_PARTICIPANTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_PARTICIPANTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class EditMeetingCommandParser implements Parser\u003cEditMeetingCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditContactCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * and returns an EditContactCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DURATION, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                        PREFIX_LOCATION, PREFIX_ADD_PARTICIPANTS, PREFIX_DELETE_PARTICIPANTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                    EditMeetingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor editMeetingDescriptor \u003d new EditMeetingCommand.EditMeetingDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            editMeetingDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            editMeetingDescriptor.setDateTime(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            editMeetingDescriptor.setDuration(ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            editMeetingDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!editMeetingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(EditMeetingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new EditMeetingCommand(index, editMeetingDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 1,
      "xxzz-tt": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.FindContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Parses input arguments and creates a new FindContactCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FindContactCommandParser implements Parser\u003cFindContactCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindContactCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * and returns a FindContactCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public FindContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new FindContactCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.logic.commands.FindMeetingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.DataContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " * Parses input arguments and creates a new FindMeetingCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class FindMeetingCommandParser implements Parser\u003cFindMeetingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindMeetingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * and returns a FindMeetingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public FindMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return new FindMeetingCommand(new DataContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Recurrence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses {@code hours} in String into an integer and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static int parseHour(String hours) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String trimmedHour \u003d hours.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedHour)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Integer.parseInt(trimmedHour);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses a {@code String company} into an {@code Company}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws ParseException if the given {@code String company} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Company parseCompany(String company) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String trimmedCompany \u003d company.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!Company.isValidCompany(trimmedCompany)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Company(trimmedCompany);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String trimmedDate \u003d dateTime.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDate)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new DateTime(trimmedDate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Parses a {@code String recur} into a {@code Recurrence}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * @throws ParseException if the given {@code recur} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static Recurrence parseRecurrence(String recur) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (recur \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return Recurrence.NONE;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        String trimmedRecur \u003d recur.toLowerCase().trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (!Recurrence.isValid(trimmedRecur)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new ParseException(Recurrence.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return Recurrence.ofNullable(trimmedRecur);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Parses a {@code String flag} into a {@code boolean}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * @throws ParseException if the given {@code flag} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static boolean parseBoolean(String flag) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(flag);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        String trimmedFlag \u003d flag.toLowerCase().trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        switch (trimmedFlag) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case \"true\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case \"false\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new ParseException(\"\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Parses a {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Long hour;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Long minutes;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            String[] dur \u003d trimmedDuration.split(\" \");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            hour \u003d Long.parseLong(dur[0]);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            minutes \u003d Long.parseLong(dur[1]);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        if (!Duration.isValidDuration(hour, minutes)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new Duration(hour, minutes);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses a {@code String companyRole} into a {@code CompanyRole}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws ParseException if the given {@code companyRole} is invalid."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static CompanyRole parseCompanyRole(String companyRole) throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(companyRole);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String trimmedCompanyRole \u003d companyRole.trim();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!CompanyRole.isValidCompanyRoleName(trimmedCompanyRole)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(CompanyRole.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new CompanyRole(trimmedCompanyRole);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e companyRoles} into a {@code Set\u003cCompanyRole\u003e}."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Set\u003cCompanyRole\u003e parseCompanyRoles(Collection\u003cString\u003e companyRoles) throws ParseException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(companyRoles);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final Set\u003cCompanyRole\u003e companyRoleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        for (String companyRoleName : companyRoles) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            companyRoleSet.add(parseCompanyRole(companyRoleName));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyRoleSet;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 59,
      "zhaohuanqdcn": 38,
      "-": 124,
      "xxzz-tt": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemindMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.RemindMeetingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.meeting.MeetingWithinDaysPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Parses input arguments and creates a new RemindMeetingCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class RemindMeetingCommandParser implements Parser\u003cRemindMeetingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemindMeetingCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * and returns a RemindMeetingCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws  if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public RemindMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            int hour \u003d ParserUtil.parseHour(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new RemindMeetingCommand(new MeetingWithinDaysPredicate(hour));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindMeetingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Replaces the contents of the meeting list with {@code meetings}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    //// meeting-level operations"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a meeting with the same identity as {@code meeting} exists in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Adds a meeting to the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting must not already exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void addMeeting(Meeting m) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assert !isNull(m);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        meetings.add(m);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sorts all the existing meetings in the address book according to date and time."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void sortMeeting() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        meetings.sort();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Replaces the given meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * another existing meeting in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(editedMeeting);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        meetings.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void removeMeeting(Meeting key) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assert !isNull(key);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        meetings.remove(key);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Removes all recurrences of {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void removeRecurringMeetings(Meeting key) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assert !isNull(key);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        FilteredList\u003cMeeting\u003e toRemove \u003d meetings.getRecurringMeetings(key);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        List\u003cMeeting\u003e toRemoveObjects \u003d new ArrayList\u003c\u003e(toRemove);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        toRemoveObjects.forEach(meetings::remove);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                + meetings.asUnmodifiableObservableList().size() + \" meetings\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return meetings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 meetings.equals(((AddressBook) other).meetings));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Objects.hash(persons, meetings);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 7,
      "zhaohuanqdcn": 17,
      "ramenmen": 61,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    Predicate\u003cMeeting\u003e PREDICATE_SHOW_ALL_MEETINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Returns true if a meeting with the same identity as {@code meeting} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    boolean hasMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Deletes the given meeting."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * The meeting must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    void deleteMeeting(Meeting target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Deletes all recurrences of the given meeting."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * The meeting must exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    void deleteRecurringMeetings(Meeting target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sort all the existing meeting according to date and time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    void sortMeeting();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Adds the given meeting."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * {@code meeting} must not already exist in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    void addMeeting(Meeting meeting);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Replaces the given meeting {@code target} with {@code editedMeeting}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * another existing meeting in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    void setMeeting(Meeting target, Meeting editedMeeting);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered meeting list */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Updates the filter of the filtered meeting list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "zhaohuanqdcn": 42,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private final FilteredList\u003cMeeting\u003e filteredMeetings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        filteredMeetings \u003d new FilteredList\u003c\u003e(this.addressBook.getMeetingList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return addressBook.hasMeeting(meeting);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        addressBook.removeMeeting(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void deleteRecurringMeetings(Meeting target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        addressBook.removeRecurringMeetings(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        addressBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void sortMeeting() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        addressBook.sortMeeting();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        addressBook.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return filteredMeetings;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        filteredMeetings.setPredicate(predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u0026\u0026 filteredMeetings.equals(other.filteredMeetings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "zhaohuanqdcn": 42,
      "AdithyaNarayan": 2,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Returns an unmodifiable view of the meetings list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * This list will not contain any duplicate meetings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    ObservableList\u003cMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/DataContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Tests that a {@code Meetings}\u0027s {@code data} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DataContainsKeywordsPredicate implements Predicate\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DataContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean test(Meeting meeting) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    builder.append(meeting.getTitle())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            .append(meeting.getDateTime())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            .append(meeting.getDuration())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            .append(meeting.getLocation());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    meeting.getParticipants().forEach(builder::append);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    return builder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            .toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            .toLowerCase()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            .contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof DataContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 keywords.equals(((DataContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantee: immutable"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The date and time should be of the format d/M/yy HHmm. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            + \"For example, 12/3/20 1545\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private static DateTimeFormatter dateInputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private static DateTimeFormatter dateOutputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h.mma\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Constructs an {@code DateTime}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        value \u003d LocalDateTime.parse(dateTime, dateInputFormat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private DateTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Return true if string can be formatted to a LocalDateTime object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static boolean isValidDateTime(String dateTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        boolean isValidFormat \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            LocalDateTime toCheck \u003d LocalDateTime.parse(dateTime, dateInputFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            if (dateTime.equals(toCheck.format(dateInputFormat))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                isValidFormat \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return isValidFormat;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"EEEE, d MMMM, uuuu\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return dateFormatter.format(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static DateTimeFormatter getDateInputFormat() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return dateInputFormat;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static DateTimeFormatter getDateOutputFormat() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return dateOutputFormat;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public DateTime getNextOccurrence(Recurrence recurrence, int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (recurrence \u003d\u003d Recurrence.NONE || index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            if (recurrence \u003d\u003d Recurrence.DAILY) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                return new DateTime(value.plusDays(index));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            } else if (recurrence \u003d\u003d Recurrence.WEEKLY) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                return new DateTime(value.plusWeeks(index));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                return new DateTime(value.plusMonths(index));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.format(dateOutputFormat);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert value !\u003d null : \"value of this DateTime is null\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert value !\u003d null : \"value of DateTime is null\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return timeFormatter.format(value);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public String getEndTime(Duration duration) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return timeFormatter.format(value"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .plusHours(duration.hours)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .plusMinutes(duration.minutes));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 20,
      "ramenmen": 48,
      "AdithyaNarayan": 17,
      "xxzz-tt": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s duration."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDuration(long, long)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final long MAX_MINUTES \u003d 59;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Number of minutes should not be more than \" + MAX_MINUTES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final long hours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final long minutes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param hours   The number of hours."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param minutes The number of minutes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Duration(long hours, long minutes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(hours, minutes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        checkArgument(isValidDuration(hours, minutes), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * @param duration string of hours and minutes in the form of HH mm."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public Duration(String duration) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String[] dur \u003d duration.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        long hours \u003d Long.parseLong(dur[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        long minutes \u003d Long.parseLong(dur[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        checkArgument(isValidDuration(hours, minutes), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a given number of minutes is valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static boolean isValidDuration(long hours, long minutes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return minutes \u003c\u003d MAX_MINUTES;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (hours !\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            temp \u003d hours + \"hrs\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (minutes \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            return temp + \" \" + minutes + \"mins\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 hours \u003d\u003d ((Duration) other).hours \u0026\u0026 minutes \u003d\u003d ((Duration) other).minutes); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Objects.hash(hours, minutes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 61,
      "AdithyaNarayan": 7,
      "xxzz-tt": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s location."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any text values, but it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert value !\u003d null : \"value of Location is null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert value !\u003d null : \"value of Location is null\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Set\u003cPerson\u003e participants \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private final Recurrence recurrence;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Create Meeting with Location and Recurrence."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public Meeting(Title title, Duration duration, DateTime dateTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                   Location location, Recurrence recurrence, Set\u003cPerson\u003e participants) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireAllNonNull(title, duration, dateTime, location, participants, recurrence);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Create Meeting without Location."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public Meeting(Title title, Duration duration, DateTime dateTime,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                   Recurrence recurrence, Set\u003cPerson\u003e participants) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(title, duration, dateTime, participants);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public Recurrence getRecurrence() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return recurrence;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Get all recurrences as a list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public List\u003cMeeting\u003e getRecurrencesAsList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (getRecurrence() \u003d\u003d Recurrence.NONE) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return Arrays.asList(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        List\u003cMeeting\u003e recurrences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            Meeting next \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                    new Meeting(getTitle(), getDuration(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                            getDateTime().getNextOccurrence(getRecurrence(), i),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                            getLocation(), getRecurrence(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                            Set.copyOf(getParticipants()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            recurrences.add(next);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return recurrences;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Returns true if both meetings have the same title and recurrence"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public boolean isSameRecurringMeeting(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (otherMeeting \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return otherMeeting !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                \u0026\u0026 otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                \u0026\u0026 otherMeeting.getRecurrence() \u003d\u003d getRecurrence();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns an immutable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Set\u003cPerson\u003e getParticipants() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Collections.unmodifiableSet(participants);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if both meetings of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * This defines a weaker notion of equality between two meetings."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean isSameMeeting(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (otherMeeting \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return otherMeeting !\u003d null"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 (otherMeeting.getDateTime().equals(getDateTime()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void addParticipant(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.participants.add(person);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Delete a participant from the set based on its index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param index Index of the participant to be deleted."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void delParticipant(Index index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e(this.participants);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        int length \u003d this.participants.size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert length \u003e index.getZeroBased() : \"index is invalid\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Person personToDelete \u003d personList.get(length - 1 - index.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.participants.remove(personToDelete);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if both meetings have the same identity and data fields."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * This defines a stronger notion of equality between two meetings."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!(other instanceof Meeting)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting otherMeeting \u003d (Meeting) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getDuration().equals(getDuration())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                \u0026\u0026 otherMeeting.getParticipants().equals(getParticipants())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                \u0026\u0026 otherMeeting.getRecurrence() \u003d\u003d getRecurrence();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return Objects.hash(title, dateTime, duration, location, recurrence, participants);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Date and Time: \")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(getDuration())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                .append(\" Recurrence: \")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                .append(getRecurrence())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Participants: \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        getParticipants().forEach(builder::append);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 51,
      "ramenmen": 126,
      "xxzz-tt": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/MeetingWithinDaysPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class MeetingWithinDaysPredicate implements Predicate\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final int hour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public MeetingWithinDaysPredicate(int hour) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean test(Meeting meeting) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        LocalDateTime meetingTime \u003d meeting.getDateTime().value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (meetingTime.isBefore(currentTime)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Duration.between(currentTime, meetingTime).toHours() \u003c\u003d this.hour;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof MeetingWithinDaysPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 hour \u003d\u003d ((MeetingWithinDaysPredicate) other).hour); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Recurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * Represents a Meeting\u0027s recurrence."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public enum Recurrence {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    NONE, DAILY, WEEKLY, MONTHLY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Recurrence can be one of daily, weekly or monthly. \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Check if a given string {@code recur} can be formatted in to a Recurrence object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static boolean isValid(String recur) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return recur \u003d\u003d null || recur.equals(\"daily\") || recur.equals(\"weekly\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                || recur.equals(\"monthly\") || recur.isEmpty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Constructor of Recurrence giving {@code recur}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static Recurrence ofNullable(String recur) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (recur \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        switch (recur) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return DAILY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return MONTHLY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return WEEKLY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return this \u003d\u003d MONTHLY ? \"monthly\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                : this \u003d\u003d DAILY ? \"daily\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                : this \u003d\u003d WEEKLY ? \"weekly\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s title."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            \"Titles can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param title A valid Title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.value \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert value !\u003d null : \"value of Title is null\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assert value !\u003d null : \"value of Title is null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A list of meetings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A meeting is considered unique by comparing using {@code Meeting#isSameMeeting(Meeting)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * As such, adding and updating of meetings uses Meeting#isSameMeeting(Meeting) for equality so as to ensure that"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * the meeting being added or updated is unique in terms of identity in the UniqueMeetingList. However,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * the removal of a meeting uses Meeting#equals(Object) so as to ensure that the meeting with exactly"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * @see Meeting#isSameMeeting(Meeting)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if the list contains an equivalent meeting as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeeting);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Adds a meeting to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sorts all meetings in the list according to Date and Time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Tie break by comparing meeting\u0027s title in chronological order."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Comparator\u003cMeeting\u003e meetingComparator \u003d (meetingOne, meetingTwo) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            LocalDateTime dateTimeOne \u003d meetingOne.getDateTime().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            LocalDateTime dateTimeTwo \u003d meetingTwo.getDateTime().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            if (dateTimeOne.equals(dateTimeTwo)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return meetingOne.getTitle().value.compareTo(meetingTwo.getTitle().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return dateTimeOne.compareTo(dateTimeTwo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        internalList.sort(meetingComparator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as another existing meeting in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.set(index, editedMeeting);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Gets all recurrences of a meeting from the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public FilteredList\u003cMeeting\u003e getRecurringMeetings(Meeting toRemove) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return internalList.filtered(toRemove::isSameRecurringMeeting);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings(UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 20,
      "zhaohuanqdcn": 10,
      "ramenmen": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Signals that the operation will result in duplicate Meetings (Meetings are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        super(\"Operation would result in duplicate meetings\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Signals that the operation is unable to find the specified meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Company.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Company {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Company name should  not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public final String companyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Company(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        checkArgument(isValidCompany(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        companyName \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static boolean isValidCompany(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        int companyNameLength \u003d test.trim().length();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyNameLength \u003e 0 \u0026\u0026 companyNameLength \u003c\u003d 160;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof Company // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 companyName.equals(((Company) other).companyName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Company company;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Set\u003cCompanyRole\u003e companyRoles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Company company, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                  Set\u003cCompanyRole\u003e companyRoles) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireAllNonNull(name, phone, email, company, address, tags, companyRoles);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.companyRoles.addAll(companyRoles);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Company getCompany() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return company;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns an immutable company role set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Set\u003cCompanyRole\u003e getCompanyRoles() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Collections.unmodifiableSet(companyRoles);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 otherPerson.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 otherPerson.getCompanyRoles().equals(getCompanyRoles());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, company, companyRoles);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .append(\" Company: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .append(getCompany())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        builder.append(\" Company roles: \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        getCompanyRoles().forEach(builder::append);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 28,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/role/CompanyRole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.role;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCompanyRoleName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class CompanyRole {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Company role names should be alphabetic\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alpha}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public final String companyRoleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a {@code CompanyRole}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param companyRoleName A valid company role name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CompanyRole (String companyRoleName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(companyRoleName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        checkArgument(isValidCompanyRoleName(companyRoleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.companyRoleName \u003d companyRoleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static boolean isValidCompanyRoleName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof CompanyRole // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 companyRoleName.equals(((CompanyRole) other).companyRoleName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyRoleName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \u0027[\u0027 + companyRoleName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"KFC\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"friends\"), getCompanyRoleSet(\"CEO\", \"Boss\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"KFC\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), getCompanyRoleSet(\"CTO\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"NUS\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"neighbours\"), getCompanyRoleSet(\"worker\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"NTU\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"family\"), getCompanyRoleSet(\"cleaner\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"SMU\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"classmates\"), getCompanyRoleSet(\"contractor\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"McDonald\u0027s\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"colleagues\"), getCompanyRoleSet(\"secretary\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Set\u003cCompanyRole\u003e getCompanyRoleSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .map(CompanyRole::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns a persons set containing the list of persons given."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static Set\u003cPerson\u003e getParticipantSet(Person... persons) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Arrays.stream(persons)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 22,
      "ramenmen": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCompanyRole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Jackson-friendly version of {@link CompanyRole}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "class JsonAdaptedCompanyRole {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String companyRoleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompanyRole} with the given {@code companyRoleName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public JsonAdaptedCompanyRole(String companyRoleName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.companyRoleName \u003d companyRoleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Converts a given {@code CompanyRole} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public JsonAdaptedCompanyRole(CompanyRole source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        companyRoleName \u003d source.companyRoleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyRoleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Converts this Jackson-friendly adapted companyRole object into the model\u0027s {@code CompanyRole} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted companyRole."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CompanyRole toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!CompanyRole.isValidCompanyRoleName(companyRoleName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new IllegalValueException(CompanyRole.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new CompanyRole(companyRoleName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Recurrence;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Jackson-friendly version of {@link Meeting}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String PARSE_ERROR_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s was incorrectly saved in the data file\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private static DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private final String recurrence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"title\") String title, @JsonProperty(\"duration\") String duration,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            @JsonProperty(\"dateTime\") String dateTime, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                    @JsonProperty(\"recurrence\") String recurrence,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                            @JsonProperty(\"participants\") List\u003cJsonAdaptedPerson\u003e participants) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (participants !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            this.participants.addAll(participants);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Converts a given {@code Meeting} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        duration \u003d source.getDuration().hours + \" \" + source.getDuration().minutes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        dateTime \u003d source.getDateTime().value.format(dateTimeFormat);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        recurrence \u003d source.getRecurrence().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        participants.addAll(source.getParticipants().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final List\u003cPerson\u003e meetingParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        for (JsonAdaptedPerson person : participants) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            meetingParticipants.add(person.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String[] durations \u003d duration.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        long hours \u003d Long.parseLong(durations[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        long minutes \u003d Long.parseLong(durations[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!Duration.isValidDuration(hours, minutes)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final Duration modelDuration \u003d new Duration(hours, minutes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final DateTime modelDateTime;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(String.format(PARSE_ERROR_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        final Recurrence modelRecurrence;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        if (recurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            modelRecurrence \u003d Recurrence.NONE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            if (!Recurrence.isValid(recurrence)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                throw new IllegalValueException(Recurrence.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                modelRecurrence \u003d Recurrence.ofNullable(recurrence);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final Set\u003cPerson\u003e modelParticipants \u003d new HashSet\u003c\u003e(meetingParticipants);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return new Meeting(modelTitle, modelDuration, modelDateTime, modelLocation, modelRecurrence, modelParticipants);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 19,
      "ramenmen": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final List\u003cJsonAdaptedCompanyRole\u003e roles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"company\") String company,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                                     @JsonProperty(\"roles\") List\u003cJsonAdaptedCompanyRole\u003e roles) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (roles !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.roles.addAll(roles);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company \u003d source.getCompany().companyName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        roles.addAll(source.getCompanyRoles().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .map(JsonAdaptedCompanyRole::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final List\u003cCompanyRole\u003e personCompanyRoles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        for (JsonAdaptedCompanyRole role : roles) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            personCompanyRoles.add(role.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!Company.isValidCompany(company)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final Company modelCompany \u003d new Company(company);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final Set\u003cCompanyRole\u003e modelRoles \u003d new HashSet\u003c\u003e(personCompanyRoles);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelCompany, modelAddress, modelTags, modelRoles);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 31,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"Meetings list contains duplicate meeting(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons and meetings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                                       @JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        meetings.addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            Meeting meeting \u003d jsonAdaptedMeeting.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            if (addressBook.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            addressBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 17,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        sendButton.setOnAction(event -\u003e handleCommandEntered());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 4,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S1-CS2103T-W16-1/\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            + \"tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.beans.binding.DoubleBinding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private MeetingListPanel meetingListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private StackPane meetingListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private SplitPane contentPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Rectangle timelineBar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DoubleBinding timelineHeight \u003d getRoot()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .heightProperty()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .subtract(resultDisplayPlaceholder.heightProperty())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .subtract(commandBoxPlaceholder.heightProperty())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .subtract(160);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        meetingListPanel \u003d new MeetingListPanel(logic.getFilteredMeetingList(), timelineHeight);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        meetingListPanelPlaceholder.getChildren().add(meetingListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DoubleBinding halfScreenWidth \u003d contentPanelPlaceholder.widthProperty().multiply(0.5);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        personListPanelPlaceholder.maxWidthProperty().bind(halfScreenWidth);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        personListPanelPlaceholder.minWidthProperty().bind(halfScreenWidth);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public MeetingListPanel getMeetingListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return meetingListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 36,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " * An UI component that displays information of a {@code Meeting}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class MeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private static final String FXML \u003d \"MeetingListCard.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingCard.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final Meeting meeting;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private HBox meetingCard;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private VBox timelineDetails;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label loc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private FlowPane participants;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Rectangle meetingBar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView locationIcon;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView withIcon;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private HBox datePlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private HBox currentTimeBarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Creates a {@code MeetingCard} with the given {@code Meeting}, index to display,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * whether it is the first meeting of the day and index of next earliest meeting."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public MeetingCard(Meeting meeting, int displayedIndex,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                       boolean isFirstInDay, int indexOfNextEarliestMeeting) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        id.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        title.setText(meeting.getTitle().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        startTime.setText(meeting.getDateTime().getStartTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        endTime.setText(meeting.getDateTime().getEndTime(meeting.getDuration()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        duration.setText(meeting.getDuration().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        loc.setText(meeting.getLocation().toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // sizing according to duration"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        setDynamicSize(meeting.getDuration());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        logger.info(timelineDetails.getWidth() + \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        meeting.getParticipants()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                .forEach(participant -\u003e participants.getChildren().add(new Label(participant.getName().toString())));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        locationIcon.setImage(new Image(getClass().getResourceAsStream(\"/images/location.png\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        withIcon.setImage(new Image(getClass().getResourceAsStream(\"/images/with.png\")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // for optional day headings"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (isFirstInDay) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            Label dateLabel \u003d new Label(meeting.getDateTime().getDate());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            dateLabel.setStyle(\"-fx-text-fill: #CCB9B9\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            datePlaceholder.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // for optional green bar"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (indexOfNextEarliestMeeting \u003d\u003d displayedIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            Rectangle greenBar \u003d new Rectangle();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            greenBar.setArcHeight(16);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            greenBar.setArcWidth(16);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            greenBar.setHeight(16);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            greenBar.setWidth(60);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            greenBar.setStyle(\"-fx-fill: #93E244;\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            currentTimeBarPlaceholder.setPadding(new Insets(0, 0, 8, 0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            currentTimeBarPlaceholder.getChildren().add(greenBar);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private void setDynamicSize(Duration duration) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        double length \u003d duration.hours * 60 + duration.minutes;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        meetingBar.heightProperty().setValue(length);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        length /\u003d 10;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        timelineDetails.setSpacing(length);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (!(other instanceof MeetingCard)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        MeetingCard card \u003d (MeetingCard) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.beans.binding.DoubleBinding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.control.ScrollBar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " * Panel containing the list of meetings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class MeetingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private static final String FXML \u003d \"MeetingListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Rectangle timelineBar;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private HBox timelineWrapper;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ListView\u003cMeeting\u003e meetingListView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private DoubleBinding timelineHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Creates a {@code MeetingListPanel} with the given {@code ObservableList} and timeline height."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public MeetingListPanel(ObservableList\u003cMeeting\u003e meetingList, DoubleBinding timelineHeight) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        meetingListView.setItems(meetingList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        meetingListView.setCellFactory(listView -\u003e new MeetingListViewCell());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        timelineBar.heightProperty().bind(timelineHeight);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        HBox.setMargin(timelineBar, new Insets(0, 0, 0, 114));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Meeting} using a {@code MeetingCard}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    class MeetingListViewCell extends ListCell\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        protected void updateItem(Meeting meeting, boolean empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            super.updateItem(meeting, empty);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            if (empty || meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                this.setStyle(\"-fx-background-color: black\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                timelineWrapper.toFront();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                this.setStyle(\"-fx-background-color: transparent\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                meetingListView.toFront();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                int indexOfNextEarliestMeeting \u003d -1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                for (Meeting m : meetingListView.getItems()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    if (m.getDateTime().value.isAfter(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        indexOfNextEarliestMeeting \u003d meetingListView.getItems().indexOf(m);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                boolean isFirstInDay \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                if (getIndex() \u003e 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    isFirstInDay \u003d !meetingListView"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .getItems()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .get(getIndex() - 1)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .getDateTime()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .getDate()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .equals(meeting.getDateTime().getDate());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                if (getIndex() \u003d\u003d meetingListView.getItems().size() - 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    boolean isScrollBarVisible \u003d meetingListView"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .lookupAll(\".scroll-bar\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .map(node -\u003e (ScrollBar) node)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .filter(scrollBar -\u003e scrollBar.getOrientation().equals(Orientation.VERTICAL))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            .anyMatch(Node::isVisible);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    logger.info(\"isScrollBarVisible? \" + isScrollBarVisible);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                setGraphic(new MeetingCard(meeting, getIndex() + 1,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        isFirstInDay, indexOfNextEarliestMeeting + 1).getRoot());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private Label nameBold;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private FlowPane roles;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView companyIcon;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView phoneIcon;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView addressIcon;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private ImageView emailIcon;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        id.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String[] names \u003d person.getName().fullName.split(\" \", 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assert names.length \u003e 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        nameBold.setText(names[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        if (names.length \u003e 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            name.setText(names[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            name.setText(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company.setText(person.getCompany().companyName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        person.getCompanyRoles().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .sorted(Comparator.comparing(companyRole -\u003e companyRole.companyRoleName))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .forEach(companyRole -\u003e roles.getChildren().add(new Label(companyRole.companyRoleName)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        companyIcon.setImage(new Image(getClass().getResourceAsStream(\"/images/work.png\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        phoneIcon.setImage(new Image(getClass().getResourceAsStream(\"/images/phone.png\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        addressIcon.setImage(new Image(getClass().getResourceAsStream(\"/images/home.png\")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        emailIcon.setImage(new Image(getClass().getResourceAsStream(\"/images/email.png\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        profilePicture.setImage(new Image(getClass().getResourceAsStream(\"/images/default_profile.png\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9,
      "AdithyaNarayan": 36,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        Screen screen \u003d Screen.getPrimary();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        Rectangle2D bounds \u003d screen.getVisualBounds();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        primaryStage.setFullScreen(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 9,
      "-": 89
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" style\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"TOP_LEFT\" text\u003d\"Send\" StackPane.alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cInsets right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 10,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Recretary\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cVBox styleClass\u003d\"bg-black\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" styleClass\u003d\"bg-black\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cVBox fx:id\u003d\"contentList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"bg-black\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cInsets bottom\u003d\"8\" left\u003d\"8\" right\u003d\"8\" top\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cSplitPane fx:id\u003d\"contentPanelPlaceholder\" dividerPositions\u003d\"0.5\" styleClass\u003d\"bg-black\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"SOMETIMES\" styleClass\u003d\"bg-black\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"meetingListPanelPlaceholder\" VBox.vgrow\u003d\"SOMETIMES\" styleClass\u003d\"bg-black\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                           styleClass\u003d\"bg-black\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"bg-black\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 28,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/MeetingListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003cHBox fx:id\u003d\"meetingCell\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cVBox fx:id\u003d\"timelineDetails\" HBox.hgrow\u003d\"NEVER\" prefWidth\u003d\"84\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cHBox alignment\u003d\"BASELINE_RIGHT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_time_label\" text\u003d\"\\$datetime\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cHBox alignment\u003d\"BASELINE_RIGHT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"duration\" alignment\u003d\"CENTER_RIGHT\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                           textAlignment\u003d\"RIGHT\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cHBox alignment\u003d\"BASELINE_RIGHT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_time_label\" text\u003d\"\\$datetime\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cHBox fx:id\u003d\"meetingBarWrapper\" alignment\u003d\"BASELINE_CENTER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cVBox alignment\u003d\"BASELINE_CENTER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox fx:id\u003d\"currentTimeBarPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox alignment\u003d\"BASELINE_LEFT\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cRectangle fx:id\u003d\"meetingBar\" styleClass\u003d\"meeting-bar\" width\u003d\"24\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cHBox fx:id\u003d\"datePlaceholder\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cHBox fx:id\u003d\"meetingCard\" prefWidth\u003d\"360\" styleClass\u003d\"meeting-card\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cVBox HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$title\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            \u003cImageView fx:id\u003d\"locationIcon\" fitHeight\u003d\"12\" fitWidth\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            \u003cLabel fx:id\u003d\"loc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            \u003cImageView fx:id\u003d\"withIcon\" fitHeight\u003d\"8\" fitWidth\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            \u003cFlowPane fx:id\u003d\"participants\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_RIGHT\" styleClass\u003d\"meeting-index\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 56
    }
  },
  {
    "path": "src/main/resources/view/MeetingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cLabel styleClass\u003d\"label-column-header\" text\u003d\"Meetings\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\" style\u003d\"-fx-background-color: black\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003cHBox fx:id\u003d\"timelineWrapper\" alignment\u003d\"BASELINE_LEFT\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cRectangle fx:id\u003d\"timelineBar\" styleClass\u003d\"timeline-bar\" width\u003d\"24\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 20
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"person-card\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003cStackPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"64\" fitWidth\u003d\"64\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"nameBold\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u003cFlowPane fx:id\u003d\"roles\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cImageView fx:id\u003d\"companyIcon\" fitWidth\u003d\"12\" fitHeight\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"company\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$company\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cImageView fx:id\u003d\"phoneIcon\" fitWidth\u003d\"12\" fitHeight\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cImageView fx:id\u003d\"addressIcon\" fitWidth\u003d\"12\" fitHeight\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cHBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                        \u003cImageView fx:id\u003d\"emailIcon\" fitWidth\u003d\"12\" fitHeight\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                    \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"person-index\" text\u003d\"\\$id\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 1,
      "AdithyaNarayan": 44,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"bg-black\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cLabel text\u003d\"Contacts\" styleClass\u003d\"label-column-header\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"bg-black\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 5,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cStackPane fx:id\u003d\"feedbackResult\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String deleteCommand \u003d \"delete_contact 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String listCommand \u003d ListContactCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(listCommand, ListContactCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String addCommand \u003d AddContactCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withRoles().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddContactCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(new AddContactCommand(personInList), model, AddContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addContactCommand \u003d new AddContactCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(CommandException.class, AddContactCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addContactCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void sortMeeting() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            //do nothing because of stub"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void deleteRecurringMeetings(Meeting target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 15,
      "zhaohuanqdcn": 36,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "class AddMeetingCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void constructor_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddMeetingCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_meetingWithoutRecurrence_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        AddMeetingCommandTest.ModelStubAcceptingMeetingAdded modelStub \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                new AddMeetingCommandTest.ModelStubAcceptingMeetingAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(validMeeting).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, validMeeting), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertEquals(Arrays.asList(validMeeting), modelStub.meetingsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_meetingWithRecurrence_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        AddMeetingCommandTest.ModelStubAcceptingMeetingAdded modelStub \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                new AddMeetingCommandTest.ModelStubAcceptingMeetingAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        CommandResult commandResult \u003d new AddMeetingCommand(validMeeting).execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(String.format(AddMeetingCommand.MESSAGE_SUCCESS, validMeeting), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(validMeeting.getRecurrencesAsList(), modelStub.meetingsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting party \u003d new MeetingBuilder().withTitle(\"party\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting presentation \u003d new MeetingBuilder().withTitle(\"presentation\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        AddMeetingCommand addPartyCommand \u003d new AddMeetingCommand(party);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        AddMeetingCommand addPresentationCommand \u003d new AddMeetingCommand(presentation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertTrue(addPartyCommand.equals(addPartyCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        AddMeetingCommand addPresentationCommandCopy \u003d new AddMeetingCommand(presentation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertTrue(addPresentationCommand.equals(addPresentationCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(addPartyCommand.equals(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(addPartyCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(addPartyCommand.equals(addPresentationCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void sortMeeting() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            //do nothing because of stub"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public void deleteRecurringMeetings(Meeting target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private class ModelStubWithMeeting extends AddMeetingCommandTest.ModelStub {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        private final Meeting meeting;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        ModelStubWithMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return this.meeting.isSameMeeting(meeting);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * A Model stub that always accept the meeting being added."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private class ModelStubAcceptingMeetingAdded extends AddMeetingCommandTest.ModelStub {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        final ArrayList\u003cMeeting\u003e meetingsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return meetingsAdded.stream().anyMatch(meeting::isSameMeeting);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            meetingsAdded.add(meeting);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 7,
      "zhaohuanqdcn": 18,
      "xxzz-tt": 215
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ClearContactCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(new ClearContactCommand(), model, ClearContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(new ClearContactCommand(), model, ClearContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class ClearMeetingCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertCommandSuccess(new ClearMeetingCommand(), model, ClearMeetingCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertCommandSuccess(new ClearMeetingCommand(), model, ClearMeetingCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.DataContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String VALID_COMPANY_AMY \u003d \"KFC\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String VALID_COMPANY_BOB \u003d \"MCD\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_TITLE_DISCUSSION \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_TITLE_ROUNDTABLE \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Duration VALID_DURATION_DISCUSSION \u003d new Duration(1, 20);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Duration VALID_DURATION_ROUNDTABLE \u003d new Duration(2, 20);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_DATETIME_DISCUSSION \u003d \"12/2/12 1201\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_DATETIME_ROUNDTABLE \u003d \"12/2/12 1101\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_LOCATION_DISCUSSION \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_LOCATION_ROUNDTABLE \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Person VALID_PARTICIPANT_ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Person VALID_PARTICIPANT_BOB \u003d new PersonBuilder().withName(\"Bob Pauline\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \"\"; // cannot be empty"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public static final EditMeetingCommand.EditMeetingDescriptor DESC_DISCUSSION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withCompany(VALID_COMPANY_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DESC_DISCUSSION \u003d new EditMeetingDescriptorBuilder().withTitle(\"disscussion\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                .withLocation(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                .withDateTime(\"12/2/12 1201\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                .withDuration(new Duration(1, 20))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the meeting at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static void showMeetingAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting meeting \u003d model.getFilteredMeetingList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        final String title \u003d meeting.getTitle().value;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        model.updateFilteredMeetingList(new DataContainsKeywordsPredicate(Arrays.asList(title)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(1, model.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 10,
      "zhaohuanqdcn": 16,
      "ramenmen": 18,
      "-": 123,
      "xxzz-tt": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * {@code DeleteContactCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteFirstCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteSecondCommand \u003d new DeleteContactCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand deleteFirstCommandCopy \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 15,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMeetingAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * {@code DeleteMeetingCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class DeleteMeetingCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting meetingToDelete \u003d model.getFilteredMeetingList().get(INDEX_FIRST_MEETING.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteMeetingCommand.MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedModel.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertCommandSuccess(deleteMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMeetingList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertCommandFailure(deleteMeetingCommand, model, Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        showMeetingAtIndex(model, INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting meetingToDelete \u003d model.getFilteredMeetingList().get(INDEX_FIRST_MEETING.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DeleteMeetingCommand deleteMeetingCommand \u003d new DeleteMeetingCommand(INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteMeetingCommand.MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedModel.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        showNoMeeting(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertCommandSuccess(deleteMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DeleteMeetingCommand deleteFirstCommand \u003d new DeleteMeetingCommand(INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DeleteMeetingCommand deleteSecondCommand \u003d new DeleteMeetingCommand(INDEX_SECOND_MEETING);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DeleteMeetingCommand deleteFirstCommandCopy \u003d new DeleteMeetingCommand(INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private void showNoMeeting(Model model) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        model.updateFilteredMeetingList(p -\u003e false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(model.getFilteredMeetingList().isEmpty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteParticipantCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "class DeleteParticipantCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting meeting \u003d model.getFilteredMeetingList().get(INDEX_FIRST_MEETING.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DeleteParticipantCommand deleteParticipantCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                new DeleteParticipantCommand(INDEX_FIRST_PERSON, INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteParticipantCommand.MESSAGE_SUCCESS, meeting);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        expectedModel.deleteMeeting(meeting);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        meeting.delParticipant(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        expectedModel.addMeeting(meeting);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertCommandSuccess(deleteParticipantCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DeleteParticipantCommand deleteFirstCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                new DeleteParticipantCommand(INDEX_FIRST_PERSON, INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DeleteParticipantCommand deleteSecondCommand \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                new DeleteParticipantCommand(INDEX_SECOND_PERSON, INDEX_SECOND_MEETING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        DeleteParticipantCommand deleteFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                new DeleteParticipantCommand(INDEX_FIRST_PERSON, INDEX_FIRST_MEETING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xxzz-tt": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Contains integration tests (interaction with the Model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * UndoCommand and RedoCommand) and unit tests forEditContactCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class EditContactCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final EditContactCommand standardCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand commandWithSameValues \u003d new EditContactCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearContactCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 29,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_DISCUSSION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.testutil.EditMeetingDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.testutil.TypicalMeetings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "class EditMeetingCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalMeetings.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Meeting editedMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor descriptor \u003d new EditMeetingDescriptorBuilder(editedMeeting).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        EditMeetingCommand editMeetingCommand \u003d new EditMeetingCommand(INDEX_FIRST_MEETING, descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        String expectedMessage \u003d String.format(EditMeetingCommand.MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        expectedModel.setMeeting(model.getFilteredMeetingList().get(0), editedMeeting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // model is sorted due to the underlying add_meeting command, therefore expectedModel also needs to be sorted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedModel.sortMeeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertCommandSuccess(editMeetingCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        final EditMeetingCommand standardCommand \u003d new EditMeetingCommand(INDEX_FIRST_MEETING, DESC_DISCUSSION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        EditMeetingCommand.EditMeetingDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "                new EditMeetingCommand.EditMeetingDescriptor(DESC_DISCUSSION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        EditMeetingCommand commandWithSameValues \u003d new EditMeetingCommand(INDEX_FIRST_MEETING, copyDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        assertFalse(standardCommand.equals(new EditMeetingCommand(INDEX_SECOND_MEETING, DESC_DISCUSSION)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "xxzz-tt": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // different company -\u003e return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 6,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindContactCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FindContactCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand findFirstCommand \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand findSecondCommand \u003d new FindContactCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand findFirstCommandCopy \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 7,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEETINGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.ROUNDTABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.DataContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindMeetingCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class FindMeetingCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                new DataContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                new DataContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        FindMeetingCommand findFirstCommand \u003d new FindMeetingCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        FindMeetingCommand findSecondCommand \u003d new FindMeetingCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        FindMeetingCommand findFirstCommandCopy \u003d new FindMeetingCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void execute_zeroKeywords_noMeetingFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        FindMeetingCommand command \u003d new FindMeetingCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        expectedModel.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void execute_multipleKeywords_multipleMeetingsFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEETINGS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate predicate \u003d preparePredicate(\"2012 Alice\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        FindMeetingCommand command \u003d new FindMeetingCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        expectedModel.updateFilteredMeetingList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(Arrays.asList(DISCUSSION, ROUNDTABLE), model.getFilteredMeetingList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Parses {@code userInput} into a {@code DataContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private DataContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return new DataContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListContactCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemindMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.meeting.MeetingWithinDaysPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class RemindMeetingCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicateOne \u003d new MeetingWithinDaysPredicate(10);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicateTwo \u003d new MeetingWithinDaysPredicate(20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        RemindMeetingCommand remindCommandOne \u003d new RemindMeetingCommand(predicateOne);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        RemindMeetingCommand remindCommandTwo \u003d new RemindMeetingCommand(predicateTwo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(remindCommandOne.equals(remindCommandOne));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        RemindMeetingCommand remindCommandOneCopy \u003d new RemindMeetingCommand(predicateOne);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(remindCommandOne.equals(remindCommandOneCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(remindCommandOne.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(remindCommandOne.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(remindCommandOne.equals(remindCommandTwo));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private AddContactCommandParser parser \u003d new AddContactCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // multiple companies - last company accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + COMPANY_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        new AddContactCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + ADDRESS_DESC_BOB + COMPANY_DESC_BOB, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + INVALID_COMPANY_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + ADDRESS_DESC_BOB + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 35,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.ClearContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.FindContactCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.ListContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.RemindMeetingCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.meeting.MeetingWithinDaysPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(new AddContactCommand(person), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(parser.parseCommand(ClearContactCommand.COMMAND_WORD) instanceof ClearContactCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(parser.parseCommand(ClearContactCommand.COMMAND_WORD + \" 3\") instanceof ClearContactCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DeleteContactCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(new DeleteContactCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand command \u003d (EditContactCommand) parser.parseCommand(EditContactCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(new EditContactCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand command \u003d (FindContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                FindContactCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(new FindContactCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void parseCommand_remind() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //any positive integer will work"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        int hour \u003d 10;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicate \u003d new MeetingWithinDaysPredicate(hour);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        RemindMeetingCommand command \u003d (RemindMeetingCommand) parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                RemindMeetingCommand.COMMAND_WORD + \" \" + hour);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(new RemindMeetingCommand(predicate), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(parser.parseCommand(ListContactCommand.COMMAND_WORD) instanceof ListContactCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(parser.parseCommand(ListContactCommand.COMMAND_WORD + \" 3\") instanceof ListContactCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 31,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.DeleteContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * outside of the DeleteContactCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * same path through the DeleteContactCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DeleteContactCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private DeleteContactCommandParser parser \u003d new DeleteContactCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteContactCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DeleteContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 8,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * outside of the DeleteMeetingCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * same path through the DeleteMeetingCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class DeleteMeetingCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private DeleteMeetingCommandParser parser \u003d new DeleteMeetingCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteMeetingCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parse_validArgsWithValidRec_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertParseSuccess(parser, \"1 rec/true\", new DeleteMeetingCommand(INDEX_FIRST_PERSON, true));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parse_validArgsWithInvalidRec_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertParseFailure(parser, \"1 rec/invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                DeleteMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class EditContactCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private EditContactCommandParser parser \u003d new EditContactCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, \"1\", EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 17,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.FindContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FindContactCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private FindContactCommandParser parser \u003d new FindContactCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new FindContactCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.logic.commands.FindMeetingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.meeting.DataContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class FindMeetingCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private final FindMeetingCommandParser parser \u003d new FindMeetingCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                FindMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        FindMeetingCommand expectedFindMeetingCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                new FindMeetingCommand(new DataContainsKeywordsPredicate(Arrays.asList(\"2012\", \"Alice\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertParseSuccess(parser, \"2012 Alice\", expectedFindMeetingCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertParseSuccess(parser, \" \\n 2012 \\n \\t Alice  \\t\", expectedFindMeetingCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private static final String VALID_BOOLEAN_1 \u003d \"true\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private static final String VALID_BOOLEAN_2 \u003d \"false\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parseBoolean_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBoolean((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parseBoolean_validValue_success() throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(ParserUtil.parseBoolean(VALID_BOOLEAN_1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(ParserUtil.parseBoolean(VALID_BOOLEAN_2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void parseBoolean_invalidValue_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBoolean(VALID_NAME));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBoolean(VALID_PHONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 21,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemindMeetingCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.RemindMeetingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.meeting.MeetingWithinDaysPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class RemindMeetingCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private RemindMeetingCommandParser parser \u003d new RemindMeetingCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicate \u003d new MeetingWithinDaysPredicate(10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, \"10\", new RemindMeetingCommand(predicate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                RemindMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void addMeeting_nullMeeting_throwsAssertionError() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e addressBook.addMeeting(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void removeMeeting_nullMeeting_throwsAssertionError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e addressBook.removeMeeting(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void hasMeeting_validMeeting_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        addressBook.addMeeting(DISCUSSION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(addressBook.hasMeeting(DISCUSSION));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void getMeetingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getMeetingList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        private final ObservableList\u003cMeeting\u003e meetings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            return meetings;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 29,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void hasMeeting_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasMeeting(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void hasMeeting_meetingNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(modelManager.hasMeeting(DISCUSSION));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void hasMeeting_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        modelManager.addMeeting(DISCUSSION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(modelManager.hasMeeting(DISCUSSION));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void getFilteredMeetingList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredMeetingList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 22,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/DataContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "public class DataContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate firstPredicate \u003d new DataContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate secondPredicate \u003d new DataContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                new DataContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void test_dataContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "                new DataContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        predicate \u003d new DataContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        predicate \u003d new DataContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        predicate \u003d new DataContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void test_dataDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DataContainsKeywordsPredicate predicate \u003d new DataContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        predicate \u003d new DataContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 58,
      "AdithyaNarayan": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String invalidDateTime \u003d \"1201\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void getNextRecurrence() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DateTime dateTime \u003d new DateTime(\"30/12/20 1500\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DateTime twoDaysLater \u003d new DateTime(\"1/1/21 1500\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DateTime threeWeekLater \u003d new DateTime(\"20/1/21 1500\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        DateTime twoMonthLater \u003d new DateTime(\"28/2/21 1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(dateTime.getNextOccurrence(Recurrence.DAILY, 2), twoDaysLater);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(dateTime.getNextOccurrence(Recurrence.WEEKLY, 3), threeWeekLater);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(dateTime.getNextOccurrence(Recurrence.MONTHLY, 2), twoMonthLater);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(dateTime.getNextOccurrence(Recurrence.MONTHLY, 0), dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(dateTime.getNextOccurrence(Recurrence.NONE, 1000), dateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null dateTime"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid dateTimes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1/2/2 1111\")); // year is not two digits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"112342325\")); // does not follow format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1/2/10 1160\")); // does not follow format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid dateTimes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"1/2/10 1300\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"12/12/10 1312\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"12/2/10 1302\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2/12/10 1352\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void getDate_validDates_equal() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String expected \u003d \"Thursday, 31 December, 2020\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DateTime actual \u003d new DateTime(\"31/12/20 1400\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(expected, actual.getDate());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        expected \u003d \"Friday, 1 January, 2021\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        actual \u003d new DateTime(\"1/1/21 1400\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(expected, actual.getDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void getDate_invalidDates_notEqual() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String expected \u003d \"Tuesday, 31 December, 2020\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DateTime actual \u003d new DateTime(\"30/12/20 1400\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertNotEquals(expected, actual.getDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        expected \u003d \"Friday, 13 January, 2021\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        actual \u003d new DateTime(\"1/1/22 1400\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertNotEquals(expected, actual.getDate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public void getStartTime_validTime_equal() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        String expected \u003d \"2:00PM\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        DateTime actual \u003d new DateTime(\"30/12/20 1400\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(expected, actual.getStartTime());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        expected \u003d \"1:00AM\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        actual \u003d new DateTime(\"1/1/22 0100\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(expected, actual.getStartTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        expected \u003d \"11:30PM\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        actual \u003d new DateTime(\"1/1/22 2330\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        assertEquals(expected, actual.getStartTime());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 14,
      "ramenmen": 39,
      "AdithyaNarayan": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/DurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DurationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidDuration_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        long invalidDuration \u003d Duration.MAX_MINUTES + 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(0, invalidDuration));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidDuration() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid minutes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Duration.isValidDuration(1, Duration.MAX_MINUTES + 1)); // minutes is more than the max minutes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid minutes - less than or equal to max minutes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Duration.isValidDuration(1, 0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Duration.isValidDuration(1, 29));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Duration.isValidDuration(1, Duration.MAX_MINUTES));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // long location"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_ROUNDTABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_ROUNDTABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ROUNDTABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPANT_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ROUNDTABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.ROUNDTABLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting meeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e meeting.getParticipants().remove(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void getAllRecurrence() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        List\u003cMeeting\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting singleMeeting \u003d new MeetingBuilder().build(); // non-recurring meeting"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList.add(singleMeeting);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(singleMeeting.getRecurrencesAsList(), expectedList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting dailyMeeting \u003d new MeetingBuilder().withDateTime(\"30/12/20 1500\").withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting day1 \u003d new MeetingBuilder().withDateTime(\"30/12/20 1500\").withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting day2 \u003d new MeetingBuilder().withDateTime(\"31/12/20 1500\").withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting day3 \u003d new MeetingBuilder().withDateTime(\"1/1/21 1500\").withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting day4 \u003d new MeetingBuilder().withDateTime(\"2/1/21 1500\").withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        Meeting day5 \u003d new MeetingBuilder().withDateTime(\"3/1/21 1500\").withRecurrence(\"daily\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList.add(day1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList.add(day2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList.add(day3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList.add(day4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        expectedList.add(day5);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(dailyMeeting.getRecurrencesAsList(), expectedList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isSameMeeting() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.isSameMeeting(DISCUSSION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.isSameMeeting(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDateTime(VALID_DATETIME_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.isSameMeeting(editedDiscussion));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withTitle(VALID_TITLE_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.isSameMeeting(editedDiscussion));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same title, same dateTime, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDuration(VALID_DURATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withLocation(VALID_LOCATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withParticipants(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.isSameMeeting(editedDiscussion));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting discussionCopy \u003d new MeetingBuilder(DISCUSSION).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.equals(discussionCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.equals(DISCUSSION));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(5));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(ROUNDTABLE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withTitle(VALID_TITLE_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDuration(VALID_DURATION_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDateTime(VALID_DATETIME_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withLocation(VALID_LOCATION_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different participants -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withParticipants(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 27,
      "ramenmen": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingWithinDaysPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class MeetingWithinDaysPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicateOne \u003d new MeetingWithinDaysPredicate(10);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicateTwo \u003d new MeetingWithinDaysPredicate(20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(predicateOne.equals(predicateOne));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicateOneCopy \u003d new MeetingWithinDaysPredicate(10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(predicateOne.equals(predicateOneCopy));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(predicateOne.equals(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(predicateOne.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(predicateOne.equals(predicateTwo));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void test_dataWithinHour_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicate \u003d new MeetingWithinDaysPredicate(10000);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String testDateTime \u003d \"10/1/21 1201\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withDateTime(testDateTime).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void test_dataDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        MeetingWithinDaysPredicate predicate \u003d new MeetingWithinDaysPredicate(10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String testDateTime \u003d \"10/1/21 1201\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // Meeting occur before current DateTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withDateTime(MeetingBuilder.DEFAULT_DATETIME).build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // Meeting outside hour range from user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withDateTime(testDateTime).build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/RecurrenceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class RecurrenceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void constructor_null_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertEquals(Recurrence.NONE, Recurrence.ofNullable(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void constructor_invalidRecurrence_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        String invalidRecurrence \u003d \"biweekly\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Recurrence.ofNullable(invalidRecurrence));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public void isValid() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // null recurrence"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(Recurrence.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // invalid recurrence"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(Recurrence.isValid(\"biweekly\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertFalse(Recurrence.isValid(\"daily monthly\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        // valid recurrence"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(Recurrence.isValid(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        assertTrue(Location.isValidLocation(\"monthly\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"discussion*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"discuss project\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"2nd project meeting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Meet David\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"second project meeting for computing project work module\")); // long title"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ROUNDTABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPANT_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.ROUNDTABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class UniqueMeetingListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_meetingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(uniqueMeetingList.contains(DISCUSSION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_meetingInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(DISCUSSION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_meetingWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withLocation(VALID_LOCATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withParticipants(VALID_PARTICIPANT_ALICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(editedDiscussion));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void add_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void add_duplicateMeeting_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(DISCUSSION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_nullTargetMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, DISCUSSION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_nullEditedMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(DISCUSSION, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_targetMeetingNotInList_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.setMeeting(DISCUSSION, DISCUSSION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingIsSameMeeting_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeeting(DISCUSSION, DISCUSSION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withLocation(VALID_LOCATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withParticipants(VALID_PARTICIPANT_ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeeting(DISCUSSION, editedDiscussion);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(editedDiscussion);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeeting(DISCUSSION, ROUNDTABLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingHasNonUniqueIdentity_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeeting(DISCUSSION, ROUNDTABLE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void sortMeeting_addMeetingDifferentOrderHasEffect_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        uniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        UniqueMeetingList expectedMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(uniqueMeetingList.equals(expectedMeetingList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void sortMeeting_sortMeetingAfterAdd_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        uniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        UniqueMeetingList expectedMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        uniqueMeetingList.sort();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        expectedMeetingList.sort();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(uniqueMeetingList, expectedMeetingList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove_meetingDoesNotExist_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(DISCUSSION));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove_existingMeeting_removesMeeting() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.remove(DISCUSSION);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_nullUniqueMeetingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvidedUniqueMeetingList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeetings(expectedUniqueMeetingList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d Collections.singletonList(ROUNDTABLE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeetings(meetingList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_listWithDuplicateMeetings_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cMeeting\u003e listWithDuplicateMeetings \u003d Arrays.asList(DISCUSSION, DISCUSSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicateMeetings));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            -\u003e uniqueMeetingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 21,
      "ramenmen": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/role/RoleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.role;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class RoleTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CompanyRole(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String invalidRoleName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CompanyRole(invalidRoleName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CompanyRole.isValidCompanyRoleName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final String INVALID_COMPANY_ROLE \u003d \"123\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final String VALID_COMPANY \u003d BENSON.getCompany().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final List\u003cJsonAdaptedCompanyRole\u003e VALID_ROLES \u003d BENSON.getCompanyRoles().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .map(JsonAdaptedCompanyRole::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_COMPANY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_COMPANY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_COMPANY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                null, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void toModelType_invalidCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void toModelType_nullCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        invalidTags, VALID_ROLES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void toModelType_invalidCompanyRoles_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        List\u003cJsonAdaptedCompanyRole\u003e invalidRoles \u003d new ArrayList\u003c\u003e(VALID_ROLES);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        invalidRoles.add(new JsonAdaptedCompanyRole(INVALID_COMPANY_ROLE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, invalidRoles);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 46,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditMeetingDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.logic.commands.EditMeetingCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "public class EditMeetingDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    private EditMeetingCommand.EditMeetingDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor \u003d new EditMeetingCommand.EditMeetingDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder(EditMeetingCommand.EditMeetingDescriptor descriptor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        this.descriptor \u003d new EditMeetingCommand.EditMeetingDescriptor(descriptor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Returns an {@code EditMeetingDescriptor} with fields containing {@code meeting}\u0027s details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder(Meeting meeting) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor \u003d new EditMeetingCommand.EditMeetingDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setTitle(meeting.getTitle());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setDuration(meeting.getDuration());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setDateTime(meeting.getDateTime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setLocation(meeting.getLocation());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setPersons(meeting.getParticipants());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Sets the {@code Title} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Sets the {@code Duration} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder withDuration(Duration duration) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setDuration(duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Sets the {@code DateTime} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setDateTime(new DateTime(dateTime));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     * Sets the {@code Location} of the {@code EditMeetingDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    public EditMeetingCommand.EditMeetingDescriptor build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xxzz-tt": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompany(person.getCompany());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompanyRoles(person.getCompanyRoles());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sets the {@code Company} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public EditPersonDescriptorBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompany(new Company(company));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cCompanyRole\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public EditPersonDescriptorBuilder withCompanyRoles(String... roles) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Set\u003cCompanyRole\u003e roleSet \u003d Stream.of(roles).map(CompanyRole::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompanyRoles(roleSet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 23,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Recurrence;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A utility class to help with building Meeting objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class MeetingBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final long DEFAULT_HOURS \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final long DEFAULT_MINUTES \u003d 30;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"12/2/12 1201\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final String DEFAULT_RECURRENCE \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Set\u003cPerson\u003e participants \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Creates a {@code MeetingBuilder} with the default details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        duration \u003d new Duration(DEFAULT_HOURS, DEFAULT_MINUTES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        recurrence \u003d Recurrence.ofNullable(DEFAULT_RECURRENCE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        participants \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Initializes the MeetingBuilder with the data of {@code meetingToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder(Meeting meetingToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        title \u003d meetingToCopy.getTitle();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        duration \u003d meetingToCopy.getDuration();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        dateTime \u003d meetingToCopy.getDateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        location \u003d meetingToCopy.getLocation();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        recurrence \u003d meetingToCopy.getRecurrence();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        participants \u003d new HashSet\u003c\u003e(meetingToCopy.getParticipants());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code Title} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Parses the {@code participants} into a {@code Set\u003cTag\u003e} and set it to the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withParticipants(Person ... participants) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.participants \u003d SampleDataUtil.getParticipantSet(participants);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code Location} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withLocation(String address) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d new Location(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code Duration} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withDuration(Duration duration) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public MeetingBuilder withRecurrence(String recurrence) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        this.recurrence \u003d Recurrence.ofNullable(recurrence);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Meeting build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return new Meeting(title, duration, dateTime, location, recurrence, participants);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 14,
      "ramenmen": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String DEFAULT_COMPANY \u003d \"Google\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Company company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Set\u003cCompanyRole\u003e roles;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company \u003d new Company(DEFAULT_COMPANY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        roles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company \u003d personToCopy.getCompany();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        roles \u003d new HashSet\u003c\u003e(personToCopy.getCompanyRoles());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cCompanyRole\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public PersonBuilder withRoles(String ... roles) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.roles \u003d SampleDataUtil.getCompanyRoleSet(roles);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sets the {@code Company} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public PersonBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.company \u003d new Company(company);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Person(name, phone, email, company, address, tags, roles);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 26,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sb.append(PREFIX_COMPANY + person.getCompany().companyName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        person.getCompanyRoles().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            s -\u003e sb.append(PREFIX_COMPANY_ROLE + s.companyRoleName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.companyName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                sb.append(PREFIX_TAG).append(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (descriptor.getCompanyRoles().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Set\u003cCompanyRole\u003e roles \u003d descriptor.getCompanyRoles().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            if (roles.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                sb.append(PREFIX_COMPANY_ROLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                roles.forEach(s -\u003e sb.append(PREFIX_COMPANY_ROLE).append(s.companyRoleName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 20,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecurringMeeting.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " * A utility class to help with building recurring Meeting objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "public class RecurringMeeting {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static List\u003cMeeting\u003e getRecurrencesAsList(Meeting meeting) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        List\u003cMeeting\u003e recurrences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            Meeting next \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                    new Meeting(meeting.getTitle(), meeting.getDuration(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                            meeting.getDateTime().getNextOccurrence(meeting.getRecurrence(), i),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                            meeting.getLocation(), meeting.getRecurrence(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "                            Set.copyOf(meeting.getParticipants()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "            recurrences.add(next);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "        return recurrences;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final Index INDEX_FIRST_MEETING \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final Index INDEX_SECOND_MEETING \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    public static final Index INDEX_THIRD_MEETING \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMeetings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A utility class containing a list of {@code Meeting} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class TypicalMeetings {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Meeting DISCUSSION \u003d new MeetingBuilder().withTitle(\"disscussion\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withLocation(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDateTime(\"12/2/12 1201\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDuration(new Duration(1, 20))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            .withParticipants(ALICE, BOB)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Meeting ROUNDTABLE \u003d new MeetingBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withLocation(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDateTime(\"12/1/12 1221\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDuration(new Duration(1, 30))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withParticipants(ALICE, BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    private TypicalMeetings() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical meetings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        for (Meeting meeting : getTypicalMeetings()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "            ab.addMeeting(meeting);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCUSSION, ROUNDTABLE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 30,
      "AdithyaNarayan": 14,
      "xxzz-tt": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(\"KFC\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withRoles(\"CEO\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(\"KFC\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withRoles(\"CEO\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCompany(\"KFC\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCompany(\"KFC\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"werner@example.com\").withCompany(\"KFC\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"lydia@example.com\").withCompany(\"KFC\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"anna@example.com\").withCompany(\"KFC\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCompany(\"KFC\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"hans@example.com\").withCompany(\"KFC\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(VALID_COMPANY_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 17,
      "-": 67
    }
  }
]
