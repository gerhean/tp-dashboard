[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "# Nuudle :ramen:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-4/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CodeCov](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Having a tough time keeping track of patients\u0027 appointment? No time for noodles because of the never-ending appointment calls?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Fret not, Nuudle is here to help!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a desktop application that empowers clinic nurses, allowing them to **manage patient records and clinical appointments** with ease."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is optimised for use via a **Command Line Interface (CLI)** and supports a beautiful Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "If you can type fast, Nuudle gets your appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in using Nuudle, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in developing Nuudle, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 19,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    archiveName \u003d \u0027nuudle.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "You can reach us at the following emails:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Lim Jin Hao : `jinhao_lim@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Low Ming Lim : `m._.m@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Zhang Wanlin : `zhangwanlin@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Xin Zhe : `xinzhe0127@gmail.com`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Yang Yue : `e0376999@u.nus.edu`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Lim Jin Hao"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cimg src\u003d\"images/jinhao-l.png\" width\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[[github](http://github.com/jinhao-l)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[[portfolio](team/jinhao-l.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Responsibilities: Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Low Ming Lim"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "\u003cimg src\u003d\"images/avalionnet.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[[github](https://github.com/Avalionnet)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[[portfolio](team/avalionnet.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Role: Software Engineer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Responsibilities: Testing + Scheduling and Tracking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* In-charge of: Logic and Parsers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Yang Yue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003cimg src\u003d\"images/yangyue128-helen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[[github](https://github.com/YangYue128-helen)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[[portfolio](team/yangyue128-helen.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Role: Developer \u0026 Code quality"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* Responsibilities: Model - appointment"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Xin Zhe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "\u003cimg src\u003d\"images/xz0127.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "[[github](http://github.com/xz0127)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "[[portfolio](team/xz0127.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* Role: Software Engineer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* Responsibilities: Documentation + Integration"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* In-charge of: Patient Models"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Zhang Wanlin"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "\u003cimg src\u003d\"images/zhangwanlin98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "[[github](http://github.com/ZhangWanlin98)]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "[[portfolio](team/zhangwanlin98.md)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Role: Developer + Testing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 10,
      "ZhangWanlin98": 7,
      "Avalionnet": 7,
      "xz0127": 7,
      "-": 31,
      "YangYue128-helen": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/AY2021S1-CS2103T-T12-4/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StatisticsDisplay`, `AppointmentListPanel`,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "`PatientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/AY2021S1-CS2103T-T12-4/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/AY2021S1-CS2103T-T12-4/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. `LogicManager` implements the `Logic` interface and uses the `NuudleParser` class to parse the user command with the `execute` method."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. This results in a `Command` object which is then executed by the `LogicManager`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding or deleting a patient)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* stores the patient book data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `PatientBook`, which `Person` references. This allows `PatientBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T12-4/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* can save the patient book data in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* can save the appointment data in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* can save the appointment data in csv format for archiving."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Classes used by multiple components are in the `seedu.patientbook.commons` package."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### 1. Done feature"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "`[written by: Yang Yue]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "The mark done feature allows users to mark a specific appointment in the address book as done using `d/` tag and `t/` tag to specify the appointment at a certain time slot."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "#### 1.1 Implementation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Command: `done d/DATE t/TIME`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example Usage:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `done d/Monday t/9am`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `done d/12-12-2020 t/12pm`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "The mark appointments as Done feature is facilitated by the `DoneCommand`, which extends the abstract class `Command`, and"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "the `DoneCommandParser`, which implements the `Parser` interface. Both of these classes are part of the `Logic` component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Additionally, the command takes in a `DateTimeLoader`, which contains the date and time information of the appointment to mark."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "The following is an example usage scenario on how the mark as done mechanism works in each step:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "1. User types `done d/DATE t/TIME` into the app."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "2. The request is handled by `LogicManager#execute(String)`, which then calls and passes the input to the `NuudleParser#parseCommand(String)` method."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "3. `NuudleParser` detects the command word `done` in the input string and creates a new `DoneCommandParser` to parse inputs according to the format specified for `DoneCommand`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "4. Input is parsed using the `DoneCommandParser#parse(String)` method, which also performs input validation. The method creates a `DateTimeLoader` using the parsed inputs by calling the constructor of the class `DateTimeLoader`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "5. The `DoneCommandParser` creates a new `DoneCommand` instance with the newly created `DateTimeLoader` object and returns it to `NuudleParser`, which in turn returns it to `LogicManager`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "6. `LogicManager` calls the `DoneCommand#execute(Model)` method."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "7. `DoneCommand` obtains a copy of the `FilteredAppointmentList` by calling the `Model#getFilteredAppointmentList()` method."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "8. `DoneCommand` returns the appointment `toMark` in the `FilteredAppointmentList`, if there is an appointment in the list starts at the same time with the date and time indicated in the `DateTimeLoader`; Otherwise, throw an"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "`APPOINTMENT_DOES_NOT_EXISTS` exception."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "9. `DoneCommand` creates another instance of this appointment `doneAppointment` which has a `done` status."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "10. `DoneCommand` replaces the `toMark` with the `doneAppointment` by calling the `Model#setAppointment(Appointment, Appointment)`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "11. Lastly, `DoneCommand` creates a `CommandResult` with a `SuccessMessage` and returns it to `LogicManager`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "The above process is shown in the following sequence diagram:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "![DoneSequenceDiagram](images/DoneSequenceDiagram.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "![DoneCommandActivityDiagram](images/DoneCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### 2. Data archiving"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "`[written by: Jin Hao]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The data archiving feature will archive all past appointments into an archive directory on starting the app."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The appointment data will be archived according to their months and saved as a csv file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The data stored on the archive will be minimal and only contains the following columns: `date`, `startTime`, `endTime`, `isDone`, `name`, `phone`, `address` and `remark`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The archive mechanism is facilitated by `CsvAppointmentArchive` which implements the `AppointmentArchive` interface."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is stored internally within the `JsonAppointmentBookStorage` which in turn implements the `AppointmentBookStorage` interface."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "`CsvAppointmentArchive` implements the following operations:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `AppointmentArchive#archivePastAppointments(ReadOnlyAppointmentBook)` — Removes all past appointments from the `ReadOnlyAppointmentBook` and archive them as a csv file."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `AppointmentArchive#saveAppointments(List\u003cCsvAdaptedAppointment\u003e, String)` — Saves the list of `CsvAdaptedAppointment` as a csv file in the archive directory with the given filename."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `AppointmentArchive#readAppointments(String)` — Reads the csv file with the given filename and returns the data as a `List\u003cCsvAdaptedAppointment\u003e`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `AppointmentArchive#getArchiveStatistics()` — Gets the status message of the archive mechanism."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Of these three, only the `archivePastAppointments(ReadOnlyAppointmenBook)` and `getArchiveStatistics()` are exposed in the `AppointmentBookStorage` and `Storage` interfaces as methods with the same signature."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "`CsvAdaptedAppointment` and `CsvAdaptedPatient` are used to represent the csv-adapted `Appointment` and `Patient` respectively."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Given below is an example archive run scenario and how the archive mechanism behaves at each step."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. The user launches the application with some existing appointment data (not launching for the first time)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. The `MainApp` calls the `Storage#readAppointmentBook()` method to get the `Optional\u003cReadOnlyAppointmentBook\u003e` which may contains the book of existing appointment data."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. The original `ReadOnlyAppointmentBook` is then passed to the `AppointmentArchive` through the `Storage` and `AppointmentBookStorage` by calling their respective `archivePastAppointments(ReadOnlyAppointmentBook)` methods."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. `AppointmentArchive#archivePastAppointments(ReadOnlyAppointmentBook)` then iterates through the `ReadOnlyAppointmentBook` and separates it into a `List\u003cAppointment\u003e`, which contains only the upcoming appointments, and `List\u003cCsvAdaptedAppointment\u003e`, which contains the appointments to be archived."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. For each `CsvAdaptedAppointment` in the same group (same month), the `AppointmentArchive` calls the `AppointmentArchive#saveAppointments(List\u003cCsvAdaptedAppointment\u003e, String)` method to save the appointment list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. `AppointmentArchive#saveAppointments()` then calls the `CsvUtil::serializeObjectToCsvFile()` method to save and archive the past appointments."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. The `List\u003cAppointment\u003e` containing only the upcoming appointments will then be returned to the user as a `ReadOnlyAppointmentBook`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. The `Ui` component will then call the `Logic#getArchiveStatus()` component on initialisation to get the archive status message from the `StorageManager`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The above process is shown in the following sequence diagram:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "![ArchiveSequenceDiagram](images/ArchiveSequenceDiagram.png)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The following sequence diagram shows how the archive status message is obtained and shown to the user:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "![ArchiveStatusDiagram](images/ArchiveStatusDiagram.png)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "##### Aspect: Type of data to save as csv format"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "As the data is to be saved in a csv format, the data attributes of the Java Object cannot have complex data type such as a `set`, `list` or `map`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "`CsvAdaptedAppointment` and `CsvAdaptedPatient` classes are used to represent the archivable appointments and patient, so the consideration is to decide how and what data should be archived in the csv file."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Alternative 1 (current choice):** Only archive the necessary data and ignore certain data such as `Set\u003cTags\u003e` and sensitive data such as the patient\u0027s `Nric`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Pros: Straightforward to implement. Easy to add and remove fields to be archived."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Cons: Does not have the full appointment data and therefore `CsvAdaptedAppointment` cannot be used to recreate `Appointment`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Alternative 2:** Archive all appointment-related data. For complex data, convert them to their string equivalent and have methods to convert them back to the original state."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Pros: Full data is saved and therefore the actual `Appointment` can be recreated from the csv data file."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Cons: We must ensure that the implementation of the conversion is correct and that the content of the data does not affect the conversion."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### 5. Edit Patient Feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "xz0127"
        },
        "content": "`[written by: Xin Zhe]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xz0127"
        },
        "content": "The Edit Patient Feature allows the nurse to edit an existing `Patient` in the patient book."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xz0127"
        },
        "content": "`Appointment` which involves the patient will be updated accordingly."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xz0127"
        },
        "content": "#### 5.1 Implementation"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "xz0127"
        },
        "content": "The Edit Patient Feature is facilitated by the `EditCommand`, which extends the abstract class `Command`,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "xz0127"
        },
        "content": "and the `EditCommandParser`, which implements the `Parser` interface. All of these classes are part of the `Logic` component."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "xz0127"
        },
        "content": "This feature is supported by the `UniquePatientList` which stores the `patient` instances and the `UniqueAppointmentList`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "xz0127"
        },
        "content": "which stores the `appointment` instances. These classes are part of the `model` component."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Additionally, a public static class `EditPatientDescriptor` is nested in `EditCommand` as a container class to store the details to edit the `Patient` with."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xz0127"
        },
        "content": "It also implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* `EditCommand#createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor)` — "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Creates a `patient` with the details of `patientToEdit` edited with `editPatientDescriptor`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Given below is an example usage scenario and how the edit mechanism behaves at each step."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 1: The user types `edit INDEX [n/NAME] [p/PHONE] [i/NRIC] [a/ADDRESS] [t/TAG]…` into Nuudle."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 2: The request is handled by `LogicManager#execute(String)`, which then calls and passes the input to the `NuudleParser#parseCommand(String)` method."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 3: `NuudleParser` detects the command word `edit` in the input string and creates a new `EditCommandParser` to parse inputs according to the format specified for `EditCommand`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 4: Input is parsed using the EditCommandParser#parse(String) method, which also performs input validation. The method creates a `EditPatientDescriptor` using the parsed inputs by calling the static constructor inside `EditCommand`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 5: The `EditCommandParser` creates a new `EditCommand` instance with the given index and newly created `EditPatientDescriptor` object and returns it to `NuudleParser`, which in turn returns it to `LogicManager`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 6: `LogicManager` calls the `EditCommand#execute(Model)` method."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 7: `EditCommand` obtains a copy of the `FilteredPatientList` by calling the `Model#getFilteredPatientList()` method. This is used to check if the `patient` index supplied by the user exists in Nuudle."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 8: `EditCommand` creates a new `patient` specified by the `EditPatientDescriptor` by calling its own private static method `EditCommand#createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor)`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 9: `EditCommand` checks whether there are duplicate patients in the patient book by calling `Model#hasPatient(Patient)` method."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 10: `EditCommand` edits the `patient` at a given index by calling `Model#setPatient(Patient, Patient)`;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 11: `EditCommand` edits the `appointment` in the `UniqueAppointmentList` which contains the edited patient by calling `Model#updateAppointmentsWithPatient(Patient, Patient)` method."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 12: `EditCommand` updates the filtered list by calling `Model#updateFilteredPatientList(Predicate)` method."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 13: `EditCommand` updates the filtered list by calling `Model#updateFilteredAppointmentList(Predicate)` method."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Step 14: Lastly, `EditCommand` creates a `CommandResult` with `SuccessMessage` and `Patient` and returns it to `LogicManager`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Target user profile story**:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Namise is a hard working nurse working at a popular dental clinic situated in town and gets appointment calls on an hourly basis. Swarmed with incoming calls, Namise has to make new appointments for new and existing patients while keeping track of the doctor’s schedule at the same time 😞. With the need to juggle multiple tasks at once, Namise is also prone to making careless mistakes in his work due to fatigue."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Being a tech-savvy nurse armed with a commendable experience in unix, Namise prefers to scribble down appointment schedules on paper while on call with his patients to maximise efficiency. This task is further exacerbated with the need to transfer these notes into an excel table manually later in the day."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Target user profile summary**:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Nurse working in a highly popular, small scale dental clinic"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Responsible for scheduling a large number of appointments daily"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Add new patients to the clinic records"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Do not entertain walk-ins and only operate on an appointment-basis"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Required to multi-task (create appointment arrangements with patients over the phone)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prone to carelessness due to the sheer number of appointments to handle"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Tech-savvy"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers typing \u0026 wants to get things done quickly"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Tired of transferring appointment details from paper notes to excel"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers desktop apps over other types"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Types fast"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "*   Reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Help nurses **handle and schedule dental appointments for patients** faster than a typical mouse/GUI driven app or excel scheduling"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​          | I want to …​                      | So that I can…​                                                      |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "| -------- | --------------------| -------------------------------------| ------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | new user            | see an overview of the commands that are available to me | familiarise myself with using the app command       |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | view the entire patient list         | assign them to their appointments                                       |"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| add new patient into the system      | assign an appointment to them                                           |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| delete the patient information       | manage the patient list easily when it is needed                        |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | administrative nurse| search for patient by IC             | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | create patient appointment           | assign patient to a time slot for their appointment                     |"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | delete an appointment                | cancel an appointment                                                   |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | view the entire appointment list for the certain day| update my dentists of the itinerary for the day          |"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* * *`  | nurse               | mark the appointment as complete if the patient completes his/her appointment| have an accurate representation of the remaining appointments|"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | add diagnosis to a completed appointment| have a record of the patient’s visit                                 |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| search for patient by phone number   | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| search for patient by name           | locate a patient easily                                                 |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| change the patient’s appointment if they call to postpone their appointment| update the appointment easily     |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | administrative nurse| edit patient’s details               | keep the information of patients up-to-date                             |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse               | get the available time slots for a day| inform my patient of the available times for that day                  |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | get the next available time slot     | inform my patient of the next available timing should their original preferred choice be filled|"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `* *`    | nurse handling multiple appointments| archive records of past appointments| review them in the future                                |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | record the patient\u0027s existing medical condition | confirm if the medicine prescribed are suitable              |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | check the patient’s drug allergy     | confirm if the medicines prescribed are not in the list                 |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | get the number of appointments for the day | know how many appointments to expect today                        |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "| `*`      | nurse               | get the number of appointments for the week | know how busy the clinic is for the week                         |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xz0127"
        },
        "content": "(For all use cases below, the **System** is the `Nuudle` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC01 - Add a patient**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to add a patient to the list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle adds the patient."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC02 - Delete a patient**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1.  User requests to list patients."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2.  Nuudle shows a list of patients."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3.  User requests to delete a specific patient in the list."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4.  Nuudle deletes the patient."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC03 - Edit a patient**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to find a specific patient."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows the list of patients with the given name."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to edit the patient information."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle changes the patient information."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 3a. The given information for editing is invalid (including empty input)."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC04 - View patient record**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to find a patient by name."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of patients with the requested name."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User request to view patient record of a specific patient in the list."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle shows the list of records for that patient."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC05 - Add an appointment**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to find an available time slot."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2.  Nuudle shows the available time slots."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to add an appointment to a specific time slot."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xz0127"
        },
        "content": "4.  Nuudle adds the appointment to the list of appointment records."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 3a. The given time slot is invalid (including empty input)."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC06 - Delete an appointment**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to list appointments."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of appointments."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests to delete a specific appointment in the list."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle deletes the appointment."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC07 - Change an appointment**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests to list all appointments."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of appointments."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "xz0127"
        },
        "content": "3.  User requests to find an available time slot."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "4.  Nuudle shows the available time slots."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "xz0127"
        },
        "content": "5.  User requests to change a specific appointment to another time."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "xz0127"
        },
        "content": "6.  Nuudle changes the appointment."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 2a. User has no current appointments."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 2a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 5a. The given time slot is invalid (including empty input)."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 5a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 5b. The given keywords are invalid."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * 5b1. Nuudle shows an error message."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "xz0127"
        },
        "content": "       Use case ends."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC08 - Mark an appointment as complete**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "1. User requests to list appointments."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle shows the list of appointments."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests to mark an appointment as done."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "4. Nuudle marks the appointment as done."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Use case: UC09 - View appointments for today**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1.  User requests for the appointments scheduled for today."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "xz0127"
        },
        "content": "2.  Nuudle shows a list of appointments scheduled for today."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "xz0127"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1a. The given keywords are invalid."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 1b. The given date is invalid."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * 1b1. Nuudle shows an error message."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Use case: UC10 - Create an appointment for a new patient**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. User requests to create a \u003cu\u003enew patient (UC01)\u003c/u\u003e."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "2. Nuudle creates the new patient."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "3. User requests for an available time slot on a preferred day."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "4. Nuudle shows the available time slots."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "5. User requests to add an appointment for the new patient."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "6. Nuudle creates the appointment."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 3a. The given date is invalid."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 3a1. Nuudle shows an error message."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* 4a. No more time slot is available for that day."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * 4a1. Nuudle shows the next available time slot on the nearest day."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        * 4a1a. User uses the suggested time slot."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "          Use case resumes at step 5."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        * 4a1b. User does not use the suggested time slot."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "          Use case resumes at step 3."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2.  Should be able to hold up to 500 patients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "3.  Should be able to hold up to 1000 upcoming appointments without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Patient records**: The past records of the patient\u0027s visit to the clinic. May contain doctor\u0027s diagnosis (if any)."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Deleting a patient"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "xz0127"
        },
        "content": "1. Deleting a patient while all patients are being shown"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "xz0127"
        },
        "content": "   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "xz0127"
        },
        "content": "      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 111,
      "ZhangWanlin98": 101,
      "Avalionnet": 16,
      "xz0127": 173,
      "-": 283,
      "YangYue128-helen": 33
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [Nuudle’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 1,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "﻿---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a **desktop app for managing patient and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "1. Download the latest `nuudle.jar` from [here](https://github.com/ay2021s1-cs2103t-t12-4/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for Nuddle."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try :"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   * **`list`** : Lists all patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "   * **`add`**` n/John Doe i/S9730284G p/98765432 a/John street, block 123, #01-01` : Adds a patient named `John Doe` to the Patient Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "   * **`edit`**`1 n/Betsy Crower p/91234567 a/College Avenue 8` : Edits the name, phone number, and address of the 1st patient in the list to be `Betsy`, `91234567`, and `College Avenue 8` respectively."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "   * **`find`**`alex david` : Shows `Alex Yeoh` and `David Li` and their assigned appointments if the two names are found in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "   * **`assign`**`1 d/tomorrow t/12.30pm dur/30` : Creates an appointment for the 1st patient in the list from 12.30pm to 1pm, tomorrow, if there are no other appointments in that time period."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "   * **`delete`**`d/tomorrow t/12.30pm` : Deletes the previously created appointment occurring at 12.30pm tomorrow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "   * **`clear`** : Deletes all appointments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Shows a message explaining how to access the help page of Nuudle."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Adding a patient : `add`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Adds a patient to the patient book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Format: `add n/NAME i/NRIC p/PHONE_NUMBER a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Tags are used to indicate a patient\u0027s underlying medical conditions. A patient can have any number of tags (including 0)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Adds a patient with the specified details."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* The following fields are compulsory and must be provided: `NAME, NRIC, PHONE_NUMBER, ADDRESS`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* It is optional to add `TAG`s for the patient. Tags can still be added with the edit command upon creating the patient entry in Nuudle."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `add n/John Doe i/S9730284G p/98765432 a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `add n/Betsy Crowe i/S9123456G t/friend a/NUS Utown p/1234567 t/asthma`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Listing all patients : `list`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Shows a list of all patients in the patient book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "### Editing a patient : `edit`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Edits an existing patient in the patient book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Format: `edit INDEX [n/NAME] [i/NRIC] [p/PHONE_NUMBER] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* You can remove all the patients\u0027 tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "*  `edit 1 p/91234567 a/College Avenue 8` Edits the phone number and email address of the 1st patient to be `91234567` and `College Avenue 8` respectively."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Locating patients by name : `find`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Finds patients whose names contain any of the given keywords."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* Patients matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The respective appointments of patients matching at least one keyword will also be returned. "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `find John` returns `john` and `John Doe` and their respective appointments"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li` and their respective appointments\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Deleting a patient : `delete`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Deletes the specified patient from the patient book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd patient in the displayed patient list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "### Adding a remark for a patient : `remark`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Adds a remark to an existing patient in the patient book for nurses to store additional data unique to the patient."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Format: `remark INDEX r/REMARK`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Creates and adds a remark for the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* A remark serves as an optional field for a patient and can be modified using the edit command after it has been created."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "*  `remark 2 r/Has been visiting Dr John` Adds a remark `Has been visiting Dr John` to the patient currently displayed second from the top in the patient list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "*  `remark 1 r/Can only converse in mandarin` Adds a remark `Can only converse in mandarin` to the patient currently displayed at the top of the patient list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Adding an appointment : `assign`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Assign the specified patient into the specified appointment date and time."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Format: `assign INDEX d/DATE t/TIME [dur/DURATION]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Puts the patient at the specified INDEX into an appointment time slot."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The INDEX refers to the index number indicated in the patient list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The INDEX **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The `DATE` and `TIME` of the appointment must be included."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* The \u0027DURATION\u0027 is measured in minutes and will be defaulted to 60 minutes if omitted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The time slot indicated by `DATE` and `TIME` must be available."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* The specified `DATE` and `TIME` must be in the future."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* `assign 1 d/Sunday t/2am dur/40` books an appointment of 40 minutes on the upcoming Sunday, 2am for the 1st patient in the list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* `assign 3 d/02-03-2021 t/1130` books an appointment of 60 minutes on 02/03/2021, 11:30am for the 3rd patient in the list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Canceling an appointment : `cancel`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Deletes the specified appointment at the date and time indicated from the appointment book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Format `cancel d/DATE t/TIME`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Deletes the appointment at the specified `DATE` and `TIME`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* The `DATE` and `TIME` indicated must take place in the future."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* An appointment with the corresponding `DATE` and `TIME` must exist in the appointment book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `cancel d/02/12/2020 t/10am` deletes the appointment happening on 02/12/2020, 10am."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `cancel 05-Nov-2020 t/1pm` deletes the appointment happening on 05/11/2020, 1pm."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Listing upcoming appointments by date : `view`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Shows a list of all upcoming appointments entries or only the list of upcoming appointments happening on the specified date."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Format `view [d/DATE]`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* Outputs the list of all upcoming appointments happening on the specified date in chronological order."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `DATE` must be in the future."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If `DATE` is not included, outputs the list of all upcoming appointments in chronological order."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `view` shows the list of all upcoming appointments in chronological order."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `view d/4-Aug-2020` shows the list of appointments happening on 04/08/2020."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "### Mark an appointment as done : `done`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Marks a specific appointment in the patient book as done."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Format: `done d/DATE t/TIME`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* Marks the appointment with the specified `DATE` and `TIME` as done."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* The appointment with the corresponding `DATE` and `TIME` must exist in the appointment book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `done d/02/12/2020 t/10am` marks the appointment happening on 02/12/2020, 10am as completed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* `done d/05-Nov-2020 t/1pm` marks the appointment happening on 05/11/2020, 1pm as completed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "![DoneCommand](images/DoneCommand.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xz0127"
        },
        "content": "### Clearing all appointment entries : `clear`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Clears all appointment entries from the appointment book."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Exits Nuudle."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Patients and appointments data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "### Archiving data files"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Upon starting up the app, past appointments will be automatically archived according to their months and saved into separate files."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "The files are saved in Comma-Separated Values (CSV) format and can be opened as an Excel file."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Nuudle home folder."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Q**: What are the acceptable date time format?\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**A**: Nuudle supports multiple date time formats as well as natural date time language :"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Date Formats | Time Formats | Natural Date | Natural Time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ":---------------:|:----------------:|:----------------:|:----------------:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02/12/2020 | 2300 | Today | Morning (8AM)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-12-2020 | 11:00PM | Tomorrow | Noon (12PM)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "12/02/2020 | 11.00PM | Yesterday | Evening (7PM)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "12-02-2020 | 11PM | Upcoming day\u003cbr\u003eof the week | Night (10PM)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2020/12/02 | | | Midnight (11:59PM)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "2020-12-02 |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-Dec-2020 |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "02-December-2020 |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Add** | `add n/NAME i/NRIC p/PHONE_NUMBER a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho i/S9712345G p/22224444 a/123, Clementi Rd, 1234665 t/asthma t/`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [i/NRIC] [a/ADDRESS] [t/TAG]…`\u003cbr\u003e e.g.,`edit 2 n/James Lee a/College Avenue 8`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**Remark** | `remark INDEX r/REMARK` e.g., `remark 2 r/Has been visiting Dr John`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "**Assign** | `assign INDEX d/DATE t/TIME [dur/DURATION]`\u003cbr\u003e e.g., `assign 3 d/tomorrow t/3pm dur/30`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Cancel** | `cancel d/DATE t/TIME`\u003cbr\u003e e.g., `cancel d/today t/4pm`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**View** | `view [d/DATE]`\u003cbr\u003e e.g., `view d/today`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Done** | `done d/DATE t/TIME`\u003cbr\u003e e.g., `done d/23-Aug t/10.30am`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 64,
      "ZhangWanlin98": 19,
      "Avalionnet": 38,
      "xz0127": 4,
      "-": 134,
      "YangYue128-helen": 23
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "title: Nuudle"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-4/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-4/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "**Nuudle is a desktop application that empowers clinic nurses, allowing them to handle patient\u0027s appointment quickly and efficiently.**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested in using Nuudle, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* If you are interested about developing Nuudle, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/avalionnet.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "title: Low Ming Lim\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Wrote the introduction for Nuddle: [\\#41]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Added cosmetic changes to Quick Start: [\\#41]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Added documentation for the features `add` and `delete` [\\#41]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Authored the User Profile and Value Proposition segment [\\#43]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 33
    }
  },
  {
    "path": "docs/team/jinhao-l.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "title: Lim Jin Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "## Project: PatientBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is optimised for use via a Command Line Interface (CLI), and has a Graphical User Interface (GUI) built with javafx."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **New Feature**: (to be added)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djinhao-l\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Managed releases `v...` - `v...` on GitHub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * README:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Update README to stay updated to current Nuudle project details [\\#40](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/40)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added documentation for the features `assign` and `cancel` [\\#42](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/42)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added documentation on archiving data [\\#42](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/42)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Added details on the Nuudle\u0027s supported date time format [\\#49](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/49)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    * Authored the non-functional requirements and glossary segment [\\#50](https://github.com/AY2021S1-CS2103T-T12-4/tp/pull/50)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): none"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  * Contributed to forum discussions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  (examples:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/99#issuecomment-683256251),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/94#issuecomment-692407535))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 40,
      "Avalionnet": 1
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "## Project: -"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "- is a desktop patient book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "Avalionnet": 1,
      "-": 45
    }
  },
  {
    "path": "docs/team/xz0127.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "title: Xin Zhe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Nuudle can get your patient and appointment scheduling tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * Added documentation for the features `clear`, `find` and `help` [\\#57]()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    * Authored the `Use cases` segment [\\#59]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xz0127": 34
    }
  },
  {
    "path": "docs/team/yangyue128-helen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "title: Yang Yue\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Nuudle is a desktop application used for managing patient records and clinic appointments. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    * Added documentation for the features `view` and `done` [\\#53]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    * Added user stories segment.[\\#56]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 28
    }
  },
  {
    "path": "docs/team/zhangwanlin98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "title: Zhang Wanlin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "## Project: Nuudle"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Nuudle is a **desktop app for managing patient records and clinic appointments, optimized for use"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "via a Command Line Interface**(CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "If you can type fast, Nuudle can get your patient and appointment management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **New Feature**: (to be added soon)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * Added documentation for the features `list`, `edit`and `find` [\\#47]()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    * Added Use Cases."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (examples: [\\#12](), [\\#32](), [\\#19](), [\\#42]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 39
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "This command allows users of the Nuudle application to add optional remarks to people in their patient book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Changes the remark of an existing person in the patient book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `PatientBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ":information_source: Don’t forget to update `PatientBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty patient book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 5,
      "-": 389
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "When working on Nuudle, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "**`invalidPersonPatientBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 2,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Command command \u003d patientBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            storage.savePatientBook(model.getPatientBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    **`PatientBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`PatientBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    `JsonPatientBook#savePatientBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializablePatientBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    **`JsonSerializablePatientBook\\#JsonSerializablePatientBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * Converts a given {@code ReadOnlyPatientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    * {@code JsonSerializablePatientBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "   public JsonSerializablePatientBook(ReadOnlyPatientBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializablePatientBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "more about the inner workings of PatientBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    3.  Save the patient book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    6.  Add a new entity to the patient book"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 14,
      "-": 236
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.storage.AppointmentBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.storage.JsonAppointmentBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.storage.JsonPatientBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.storage.PatientBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Nuudle ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBookStorage patientBookStorage \u003d new JsonPatientBookStorage(userPrefs.getPatientBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBookStorage appointmentBookStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAppointmentBookStorage(userPrefs.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        storage \u003d new StorageManager(patientBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s patient book,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * {@code storage}\u0027s appointment book and {@code userPrefs}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ReadOnlyPatientBook initialPatientData \u003d initPatientBookModel(storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ReadOnlyAppointmentBook initialAppointmentData \u003d initAppointmentBookModel(storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Check if model is in sync"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!ModelManager.isValidModel(initialPatientData, initialAppointmentData)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            logger.warning(\"Appointment data not in sync with Patients\u0027 data. \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    + \"Will be starting with an empty AppointmentBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialAppointmentData \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ModelManager(initialPatientData, initialAppointmentData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns a {@code ReadOnlyPatientBook} with the data from {@code storage}\u0027s patient book.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * The data from the sample patient book will be used instead if {@code storage}\u0027s patient book is not found,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * or an empty patient book will be used instead if errors occur when reading {@code storage}\u0027s patient book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private ReadOnlyPatientBook initPatientBookModel(Storage storage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Optional\u003cReadOnlyPatientBook\u003e patientBookOptional;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ReadOnlyPatientBook initialPatientData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            patientBookOptional \u003d storage.readPatientBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (patientBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PatientBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialPatientData \u003d patientBookOptional.orElseGet(SampleDataUtil::getSamplePatientBook);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PatientBook\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialPatientData \u003d new PatientBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PatientBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialPatientData \u003d new PatientBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return initialPatientData;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns a {@code ReadOnlyAppointmentBook} with the data from {@code storage}\u0027s appointment book.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The data from the sample appointment book will be used instead if {@code storage}\u0027s appointment book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * is not found, or an empty appointment book will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * {@code storage}\u0027s appointment book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private ReadOnlyAppointmentBook initAppointmentBookModel(Storage storage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Optional\u003cReadOnlyAppointmentBook\u003e appointmentBookOptional;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ReadOnlyAppointmentBook initialAppointmentData;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            appointmentBookOptional \u003d storage.readAppointmentBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (appointmentBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AppointmentBook\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialAppointmentData \u003d appointmentBookOptional.orElseGet(SampleDataUtil::getSampleAppointmentBook);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AppointmentBook\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialAppointmentData \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AppointmentBook\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            initialAppointmentData \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return initialAppointmentData;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PatientBook\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        logger.info(\"Starting Nuudle \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Nuudle ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 58,
      "Avalionnet": 14,
      "-": 163,
      "YangYue128-helen": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final double DEFAULT_SPLIT_RATIO \u003d 0.5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final double splitViewRatio;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        splitViewRatio \u003d DEFAULT_SPLIT_RATIO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                       int yPosition, double splitViewRatio) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.splitViewRatio \u003d splitViewRatio;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public double getSplitViewRatio() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return splitViewRatio;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 splitViewRatio \u003d\u003d o.splitViewRatio"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, splitViewRatio, windowCoordinates);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        sb.append(\"Split Ratio : \" + splitViewRatio);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 13,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String LOG_FILE \u003d \"nuudle.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients\" + \" listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_APPOINTMENTS_OVERVIEW \u003d \"%1$d appointments\" + \" listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_EXPIRED_DATE_TIME \u003d \"The appointment date and time should be an upcoming one.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 2,
      "xz0127": 1,
      "Avalionnet": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assert zeroBasedIndex \u003e\u003d 0 : \"Invalid zeroBasedIndex will yield negative number\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assert oneBasedIndex \u003e\u003d 1 : \"Invalid oneBasedIndex will yield negative number\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Helper class for handling date time comparison"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given date is expired by comparing with today\u0027s date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param date the given date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if given date is before today\u0027s date, false otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isExpiredByDay(LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return isExpired(date, LocalTime.MIDNIGHT, LocalDate.now().atStartOfDay());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given date and time is expired."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * A given date and time is expired if it is before the current date and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param date the given date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param time the given time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if given date and time is not expired, false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isExpired(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return isExpired(date, time, LocalDateTime.now());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Similar to {@link DateTimeUtil#isExpired(LocalDate, LocalTime)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Uses {@code LocalDateTime now} as the current datetime to compare against."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param now the current datetime, usually {@code LocalDateTime.now()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static boolean isExpired(LocalDate date, LocalTime time, LocalDateTime now) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, time, now);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDateTime simplifiedNow \u003d now.truncatedTo(ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDateTime test \u003d LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return test.isBefore(simplifiedNow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns the PatientBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @see seedu.address.model.Model#getPatientBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    ReadOnlyPatientBook getPatientBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns the user prefs\u0027 patient book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns the AppointmentBook."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @see seedu.address.model.Model#getAppointmentBook()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    ReadOnlyAppointmentBook getAppointmentBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of appointments */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 16,
      "Avalionnet": 6,
      "xz0127": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.NuudleParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final NuudleParser nuudleParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        nuudleParser \u003d new NuudleParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Command command \u003d nuudleParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            // We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            storage.savePatientBook(model.getPatientBook());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storage.saveAppointmentBook(model.getAppointmentBook());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public ReadOnlyPatientBook getPatientBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return model.getPatientBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return model.getPatientBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return model.getAppointmentBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return model.getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 14,
      "Avalionnet": 12,
      "xz0127": 3,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Adds a patient to the patient book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the patient book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_NRIC + \"S1234567G \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the patient book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public AddCommand(Patient patient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 6,
      "xz0127": 10,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Assigns an appointment to an existing patient."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns an appointment to an existing patient.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"PATIENT INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] (minute in unit) \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + PREFIX_DATE + \"12-Dec-2021 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_TIME + \"4:00PM\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_DURATION + \"30\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Appointment added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String ASSIGNMENT_OVERLAP \u003d \"This time slot is occupied\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String DATE_MISSING \u003d \"The date of appointment is missing\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String TIME_MISSING \u003d \"The time of appointment is missing\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final DurationSupporter durationSupporter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Creates an AssignCommand to add a new {@code Appointment}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @param targetIndex    index of the patient in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @param durationSupporter details of an appointment."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public AssignCommand(Index targetIndex, DurationSupporter durationSupporter) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireAllNonNull(targetIndex, durationSupporter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.durationSupporter \u003d new DurationSupporter(durationSupporter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        List\u003cPatient\u003e lastShownPatientList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownPatientList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Patient patient \u003d lastShownPatientList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d createAppointment(patient, durationSupporter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (model.hasOverlappingAppointment(appointment)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new CommandException(ASSIGNMENT_OVERLAP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, appointment));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Creates and returns an {@code Appointment} with merged details of {@code patient}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * and {@code assignAppointmentBuilder}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private static Appointment createAppointment(Patient patient, DurationSupporter durationSupporter) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert patient !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert durationSupporter.getDate().isPresent();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert durationSupporter.getTime().isPresent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assert durationSupporter.getDuration().isPresent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date assignedDate \u003d durationSupporter.getDate().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time startTime \u003d durationSupporter.getTime().get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Duration assignedDuration \u003d durationSupporter.getDuration().get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time endTime \u003d new Time(startTime.getTime().plus(assignedDuration));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new Appointment(assignedDate, startTime, endTime, patient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                || (other instanceof AssignCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AssignCommand) other).targetIndex)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                \u0026\u0026 durationSupporter.equals(((AssignCommand) other).durationSupporter)); // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static class DurationSupporter extends DateTimeLoader {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        private Duration duration \u003d Appointment.DEFAULT_DURATION;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public DurationSupporter() {}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Copies constructor."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public DurationSupporter(DurationSupporter toCopy) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            setAppointmentDate(toCopy.getDate().get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            setAppointmentTime(toCopy.getTime().get());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            setAppointmentDuration(toCopy.getDuration().get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Sets {@code AppointmentDuration} of this {@code DurationSupporter}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void setAppointmentDuration(Duration duration) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Gets {@code AppointmentDuration} of this {@code DurationSupporter}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Gets {@code Time} of the start of this {@code DurationSupporter}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public Optional\u003cTime\u003e getStartTime(Time end) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return Optional.of(new Time(end.getTime().minus(duration)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         * Gets {@code Time} of the end of this {@code DurationSupporter}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public Optional\u003cTime\u003e getEndTime(Time start) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return Optional.of(new Time(start.getTime().plus(duration)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            if (!(other instanceof DurationSupporter)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            DurationSupporter supporter \u003d (DurationSupporter) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return getDate().equals(supporter.getDate())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                    \u0026\u0026 getTime().equals(supporter.getTime())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                    \u0026\u0026 getDuration().equals(supporter.getDuration());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "ZhangWanlin98": 168,
      "YangYue128-helen": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CancelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Cancels and deletes an appointment in the appointment list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class CancelCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels the appointment \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"specified by the date and time and removes it from the appointment book. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_TIME + \"TIME \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_DATE + \"12-Dec-2021 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + PREFIX_TIME + \"4:00PM\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_MARK_CANCEL_SUCCESS \u003d \"Cancelled Appointment: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String APPOINTMENT_DOES_NOT_EXISTS \u003d \"We can\u0027t find any appointment at this time slot\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String DATE_MISSING \u003d \"Hmm it seems that the date of the appointment is missing\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String TIME_MISSING \u003d \"Hmm it seems that the time of the appointment is missing\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final DateTimeLoader dateTimeLoader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Creates a CancelCommand to delete the specified appointment from the appointment book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param dateTimeLoader details of an appointment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public CancelCommand(DateTimeLoader dateTimeLoader) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireAllNonNull(dateTimeLoader);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.dateTimeLoader \u003d new DateTimeLoader(dateTimeLoader);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public DateTimeLoader getDateTimeLoader() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return this.dateTimeLoader;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Optional\u003cAppointment\u003e appointmentToCancel \u003d lastShownAppointmentList.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .filter(appointment -\u003e appointment.startAtSameTime(dateTimeLoader.getDate().get(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        dateTimeLoader.getTime().get()))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Appointment toCancel \u003d appointmentToCancel.orElse(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (toCancel \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new CommandException(APPOINTMENT_DOES_NOT_EXISTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        model.deleteAppointment(toCancel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_CANCEL_SUCCESS, toCancel));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                || (other instanceof CancelCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 dateTimeLoader.equals(((CancelCommand) other).getDateTimeLoader())); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Clears the patient book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Appointment book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        model.setAppointmentBook(new AppointmentBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "Avalionnet": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DateTimeLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Stores the details to the appointment to be assigned."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Each non\u003dempty field value will replace the corresponding field value of the Appointment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class DateTimeLoader {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public DateTimeLoader() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Copies constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public DateTimeLoader(DateTimeLoader toCopy) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        setAppointmentDate(toCopy.date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        setAppointmentTime(toCopy.time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Sets {@code Date} of this {@code DateTimeBuilder} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointmentDate(Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Gets {@code Date} of this {@code DateTimeBuilder} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Sets {@code Time} of this {@code DateTimeBuilder} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointmentTime(Time time) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Gets {@code Time} of this {@code DateTimeBuilder} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (!(other instanceof DateTimeLoader)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateTimeLoader loader \u003d (DateTimeLoader) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return getDate().equals(loader.getDate())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 getTime().equals(loader.getTime());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 5,
      "YangYue128-helen": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the patient book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.deleteAppointmentsWithPatient(patientToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 9,
      "Avalionnet": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Marks an appointment in the list as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Mark the appointment \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + \"specified by the date and time as done. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + PREFIX_TIME + \"TIME \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + PREFIX_DATE + \"12-Dec-2021 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            + PREFIX_TIME + \"4:00PM\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String MESSAGE_MARK_DONE_SUCCESS \u003d \"Marked Appointment as done: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String APPOINTMENT_DOES_NOT_EXISTS \u003d \"There is no appointment at this time slot\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String APPOINTMENT_HAS_BEEN_MARKED \u003d \"The appointment has been marked already!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String DATE_MISSING \u003d \"The date of appointment is missing\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final String TIME_MISSING \u003d \"The time of appointment is missing\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final DateTimeLoader dateTimeLoader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Creates a DoneCommand to mark the specific appointment as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @param dateTimeLoader details of an appointment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public DoneCommand(DateTimeLoader dateTimeLoader) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireAllNonNull(dateTimeLoader);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.dateTimeLoader \u003d new DateTimeLoader(dateTimeLoader);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public DateTimeLoader getDateTimeLoader() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this.dateTimeLoader;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Optional\u003cAppointment\u003e appointmentToMark \u003d lastShownAppointmentList.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .filter(appointment -\u003e appointment.startAtSameTime(dateTimeLoader.getDate().get(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                        dateTimeLoader.getTime().get()))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment toMark \u003d appointmentToMark.orElse(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (toMark \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new CommandException(APPOINTMENT_DOES_NOT_EXISTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (toMark.getIsDoneStatus()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new CommandException(APPOINTMENT_HAS_BEEN_MARKED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment doneAppointment \u003d toMark.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        model.setAppointment(toMark, doneAppointment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_DONE_SUCCESS, toMark));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 dateTimeLoader.equals(((DoneCommand) other).getDateTimeLoader())); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Edits the details of an existing patient in the patient book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            + \"by the index number used in the displayed patient list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the patient book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(editPatientDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateAppointmentsWithPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Nric updatedNric \u003d editPatientDescriptor.getNric().orElse(patientToEdit.getNric());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Remark updatedRemark \u003d editPatientDescriptor.getRemark().orElse(patientToEdit.getRemark());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new Patient(updatedName, updatedPhone, updatedAddress, updatedTags, updatedNric, updatedRemark);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, address, tags, nric, remark);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 29,
      "xz0127": 45,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Nuudle as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Finds and lists all patients in patient book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        model.updateFilteredAppointmentList(appointment -\u003e predicate.test(appointment.getPatient()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "xz0127": 4,
      "Avalionnet": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Lists all Patients in the patient book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all Patients\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "xz0127": 3,
      "Avalionnet": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Changes the remark of an existing patient in the patient book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Patient: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Patient: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the patient identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"by the index number used in the last patient listing. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"r/[REMARK]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"r/Has been visiting Dr John.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Creates a RemarkCommand to add a remark to the specified patient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param index of the patient in the filtered patient list to edit the remark"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param remark of the patient to be updated to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assert index.getZeroBased() \u003e\u003d 0 : \"Invalid Index used in Remark\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                patientToEdit.getAddress(), patientToEdit.getTags(), patientToEdit.getNric(), remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPatient));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code patientToEdit}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private String generateSuccessMessage(Patient patientToEdit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return String.format(message, patientToEdit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "Avalionnet": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_APPOINTMENTS_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Lists all Appointments in the appointment book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views all appointments [on a date]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" or \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            + PREFIX_DATE + \"12-Dec-2021 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing all Appointments\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final Predicate\u003cAppointment\u003e predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Creates a ViewCommand to list the appointments on a date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @param predicate date of the appointments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public ViewCommand(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.updateFilteredAppointmentList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (predicate.equals(PREDICATE_SHOW_ALL_APPOINTMENTS)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                        MESSAGE_APPOINTMENTS_OVERVIEW, model.getFilteredAppointmentList().size())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                || (other instanceof ViewCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                    \u0026\u0026 predicate.equals(((ViewCommand) other).predicate));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 9,
      "ZhangWanlin98": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        PREFIX_TAG, PREFIX_NRIC, PREFIX_REMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_NRIC)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient patient \u003d new Patient(name, phone, address, tagList, nric, remark);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new AddCommand(patient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 7,
      "xz0127": 8,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPIRED_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.model.appointment.Appointment.CREATION_OFFSET_MINUTES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DurationSupporter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Parses input arguments and creates a new AssignCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * and returns an AssignCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public AssignCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                ArgumentTokenizer.tokenize(arg, PREFIX_DATE, PREFIX_TIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Duration duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(AssignCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(AssignCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            duration \u003d Appointment.DEFAULT_DURATION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            duration \u003d ParserUtil.parseDuration("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                    requireNonNull(argMultimap.getValue(PREFIX_DURATION).get())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter loader \u003d new DurationSupporter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Expired date time can only be confirmed when date and time are put together."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime timeWithLeeway \u003d time.getTime().plusMinutes(CREATION_OFFSET_MINUTES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (DateTimeUtil.isExpired(date.getDate(), timeWithLeeway)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new ParseException(MESSAGE_EXPIRED_DATE_TIME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentDate(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentTime(time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentDuration(duration);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new AssignCommand(index, loader);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 14,
      "ZhangWanlin98": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CancelCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.CancelCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.DateTimeLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Parses input arguments and creates a new CancelCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class CancelCommandParser implements Parser\u003cCancelCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Parses the given {@code String} of arguments based on the CancelCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * and returns a CancelCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public CancelCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                ArgumentTokenizer.tokenize(arg, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(String.format(CancelCommand.DATE_MISSING, CancelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(String.format(CancelCommand.TIME_MISSING, CancelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader dateTimeLoader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        dateTimeLoader.setAppointmentDate(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        dateTimeLoader.setAppointmentTime(time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new CancelCommand(dateTimeLoader);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"dur/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 3,
      "Avalionnet": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.NaturalDay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Contains utility methods used for parsing date strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Helper class for {@link ParserUtil#parseDate(String)}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Date input must adhere to our formatting conventions \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"or adopt a recognised natural date language.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"An example of a properly formatted date includes (but is not limited to): 02 Aug 2020\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"An example of a natural date language is \u0027today\u0027 or \u0027wednesday\u0027(any day of the week)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Please visit our user guide\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" for more date/time variants.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"\\nType help in the input box for the link!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * List of known date formats that parser accepts."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e KNOWN_DATE_FORMATS \u003d createDateFormats();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates the list of formatter that accepts a specified list of known date patterns."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This method should only be used once to initialise the formatters used by the parser."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of DateTimeFormatter with acceptable date format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e createDateFormats() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // List of acceptable date format with optional year/month"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e knownDatePatterns \u003d Arrays.asList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"d[/][-]M[[/][-]uuuu]\", \"M[/][-]d[[/][-]uuuu]\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"uuuu[/][-]M[/][-]d\", \"d[-][ ]MMM[[-][ ]uuuu]\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"d[-][ ]MMMM[[-][ ]uuuu]\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate currTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cDateTimeFormatter\u003e knownFormats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Create a formatter for each known patterns to be used for parsing dates"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c knownDatePatterns.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            knownFormats.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseCaseInsensitive()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .appendPattern(knownDatePatterns.get(i))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseDefaulting(ChronoField.YEAR, currTime.getYear())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .toFormatter()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return knownFormats;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses the {@code String dateString} into the implied {@code LocalDate}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the string containing a date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDate} indicated by the string, null if no date is indicated."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code dateString} is invalid (cannot be parsed)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static LocalDate parse(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return parse(dateString, LocalDate.now());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Similar to {@link #parse(String)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Used to inject a {@code LocalDate currDate} as \u0027today\u0027s date\u0027."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate the current date to be referenced against. Usually contains {@code LocalDate.now()}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalDate parse(String dateString, LocalDate currDate) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(dateString, currDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate formattedDate \u003d parseByDateFormat(dateString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (formattedDate !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return formattedDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate naturalDate \u003d parseByNaturalDay(dateString, currDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (naturalDate !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return naturalDate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String dateString} by checking with predefined date formats."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the date to match one of the formatter in {@code KNOWN_DATE_FORMATS}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If the {@code String dateString} can be inferred as 2 different dates, best effort"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * parsing is used and the most probable formatter is used (in order of priority)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * For example, \"2-3-2014\" could mean 2 Mar 2014 or 3 Feb 2014, in this case 2 Mar 2014"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * will be used."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the string containing a date."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDate} that is represented in the string, or null if"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known natural date language."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalDate parseByDateFormat(String dateString) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c KNOWN_DATE_FORMATS.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return LocalDate.parse(dateString, KNOWN_DATE_FORMATS.get(i));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Ignore exception, fallthrough expected"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String dateString} by checking with known natural date language."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the time to match one of the date language defined in {@code NaturalDay}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * {@code LocalDate currDate} is used for injecting the current {@code LocalDate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the string containing a date."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate   the current date to be referenced against. Usually contains {@code LocalDate.now()}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDate} that is represented in the string, or null if"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known natural date language."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalDate parseByNaturalDay(String dateString, LocalDate currDate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(dateString, currDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Parse for natural date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay day \u003d NaturalDay.parse(dateString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case TODAY:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case TOMORROW:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.plusDays(1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return currDate.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 160,
      "Avalionnet": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.DateTimeLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public DoneCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                ArgumentTokenizer.tokenize(arg, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new ParseException(DoneCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new ParseException(DoneCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateTimeLoader dateTimeLoader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        dateTimeLoader.setAppointmentDate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        dateTimeLoader.setAppointmentTime(time);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return new DoneCommand(dateTimeLoader);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        PREFIX_TAG, PREFIX_NRIC, PREFIX_REMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            editPatientDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            editPatientDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new EditCommand(index, editPatientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 7,
      "xz0127": 10,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NuudleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.CancelCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class NuudleParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        case CancelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return new CancelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "ZhangWanlin98": 8,
      "Avalionnet": 8,
      "-": 75,
      "YangYue128-helen": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static java.time.temporal.ChronoUnit.MINUTES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @throws ParseException if the given {@code Nric} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Leading and trailing whitespace will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Parses the date into a LocalDate"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate parsedDate \u003d DateParserUtil.parse(trimmedDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Date(parsedDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Leading and trailing whitespace will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime parsedTime \u003d TimeParserUtil.parse(trimmedTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!Time.isValidStartTime(parsedTime)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Time(parsedTime);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @throws ParseException if the given {@code Remark} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Parses a {@code String duration} into a {@code Duration}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @throws ParseException ParseException if the given {@code Duration} is not a positive integer string."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static Duration parseDuration(String durationString) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null duration will use the default one hour duration."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String trimmedDuration \u003d durationString.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Duration duration;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            duration \u003d Duration.of(Integer.parseInt(trimmedDuration), MINUTES);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (duration.isNegative()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 40,
      "ZhangWanlin98": 25,
      "xz0127": 4,
      "Avalionnet": 31,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public RemarkCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                PREFIX_REMARK);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    RemarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimeParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.NaturalDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Contains utility methods used for parsing time strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Helper class for {@link ParserUtil#parseTime(String)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The Time input must adhere to our formatting conventions \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"or adopt a recognised natural time language.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"An example of a properly formatted time includes (but is not limited to): 2 PM\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"An example of a natural time language is \u0027morning\u0027 (8am) or \u0027evening\u0027 (7pm)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Please visit our user guide\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" for more date/time variants.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"\\nType help in the input box for the link!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * List of known time formats that parser accepts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e KNOWN_TIME_FORMATS \u003d createTimeFormats();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates the list of formatter that accepts a specified list of known time patterns."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This method should only be used once to initialise the formatters used by the parser."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of DateTimeFormatter with acceptable time format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e createTimeFormats() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // List of acceptable date format with optional year/month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e knownTimePatterns \u003d Arrays.asList(\"HHmm\", \"h[:][.]mm[ ]a\", \"h[ ]a\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cDateTimeFormatter\u003e knownFormats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Create a formatter for each known patterns to be used for parsing dates"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c knownTimePatterns.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            knownFormats.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseCaseInsensitive()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .appendPattern(knownTimePatterns.get(i))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .toFormatter()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return knownFormats;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String timeString} into the implied {@code LocalTime}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param timeString the string containing a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalTime} indicated by the string, or null if no time is indicated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws ParseException if the given {@code timeString} is invalid (cannot be parsed)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static LocalTime parse(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime formattedTime \u003d parseByTimeFormat(timeString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (formattedTime !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return formattedTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime naturalTime \u003d parseByNaturalTime(timeString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (naturalTime !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return naturalTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String timeString} by checking with predefined time formats."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the time to match one of the formatter in {@code KNOWN_TIME_FORMATS}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param timeString the string containing a time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalTime} that is represented in the string, or null if"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known format."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalTime parseByTimeFormat(String timeString) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c KNOWN_TIME_FORMATS.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return LocalTime.parse(timeString, KNOWN_TIME_FORMATS.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Ignore exception, fallthrough expected"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the {@code String timeString} by checking with known natural time language."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Expects the time to match one of the time language defined in {@code NaturalDay}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param timeString the string containing a time."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalTime} that is represented by the user, or null if"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * the string does not match any known natural time language."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    static LocalTime parseByNaturalTime(String timeString) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(timeString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Parse for natural time"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay time \u003d NaturalDay.parse(timeString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        switch (time) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case MORNING:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 8am"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case NOON:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 12pm"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(12, 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case EVENING:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 7pm"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(19, 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case NIGHT:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 10pm"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(22, 0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        case MIDNIGHT:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Default: 11:59pm/ 2359"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 133,
      "Avalionnet": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.DateMatchesPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Parse input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public ViewCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (arg.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            return new ViewCommand(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                ArgumentTokenizer.tokenize(arg, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate predicate \u003d new DateMatchesPredicate(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new ViewCommand(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AppointmentBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.DateMatchesPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Wraps all data at the appointment-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Overlaps are not allowed (by .isOverlapping comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentBook implements ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Creates an AppointmentBook using the Appointments in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBook(ReadOnlyAppointmentBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces the contents of the appointments list with {@code appointments}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code appointments} must not contain overlapping appointments."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Resets the existing data of this {@code AppointmentBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void resetData(ReadOnlyAppointmentBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //// appointment-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Adds an appointment to the appointment book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The appointment must not overlap with appointments in the appointment book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void addAppointment(Appointment a) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointments.add(a);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code target} must exist in the appointment book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * in the appointment book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointments.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Removes {@code key} from this {@code AppointmentBook}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code key} must exist in the appointment book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void removeAppointment(Appointment key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointments.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if an appointment hasOverlaps with {@code appointments}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean hasOverlapsWith(Appointment appointment) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.hasOverlaps(appointment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Checks if the appointment list already contains the appointment."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean hasAppointment(Appointment a) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(a);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.hasCompleteOverlaps(a);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    // patient-related appointment operations"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Updates all appointments which contain the given {@code target}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code target} must exist in at least one of the appointments in the appointment book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param target specific patient who has been updated."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param editedPatient the patient after the update."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateAppointmentsWithPatients(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointments.updateAppointmentsWithPatients(target, editedPatient);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Deletes the relevant appointments in the appointment book upon the deletion of a given {@code target}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @param target the specific patient deleted."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deleteAppointmentsWithPatients(Patient target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointments.deleteAppointmentsWithPatients(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.asUnmodifiableObservableList().size() + \" appointments\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentStatistics getAppointmentBookStatistics() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Date today \u003d new Date(LocalDate.now());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        ObservableList\u003cAppointment\u003e thisWeek \u003d appointments.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .filtered(appointment -\u003e appointment.isInSameWeek(today));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int totalThisWeek \u003d thisWeek.size();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int upcomingThisWeek \u003d thisWeek"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .filtered(appointment -\u003e !appointment.getIsDoneStatus()).size();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int doneThisWeek \u003d totalThisWeek - upcomingThisWeek;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateMatchesPredicate p \u003d new DateMatchesPredicate(today);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        ObservableList\u003cAppointment\u003e listOfAppointmentsInToday \u003d appointments.asUnmodifiableObservableList().filtered(p);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int totalToday \u003d listOfAppointmentsInToday.size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int doneToday \u003d listOfAppointmentsInToday.filtered(appointment -\u003e appointment.getIsDoneStatus()).size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int upcomingToday \u003d totalToday - doneToday;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return new AppointmentStatistics(doneToday, upcomingToday, doneThisWeek, upcomingThisWeek);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                || (other instanceof AppointmentBook // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 appointments.equals(((AppointmentBook) other).appointments));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointments.hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 5,
      "ZhangWanlin98": 4,
      "xz0127": 35,
      "Avalionnet": 1,
      "YangYue128-helen": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AppointmentStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Collects related statistics of appointment book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentStatistics {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private int numOfDoneApptInToday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private int numOfUpcomingApptInToday;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private int numOfDoneApptInThisWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private int numOfUpcomingApptInThisWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Creates an AppointmentStatistics with the {@code totalToday}, {@code doneToday}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code upcomingToday}, and {@code upcomingThisWeek}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentStatistics(int numOfDoneApptInToday, int numOfUpcomingApptInToday,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                                 int numOfDoneApptInThisWeek, int numOfUpcomingApptInThisWeek) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.numOfDoneApptInToday \u003d numOfDoneApptInToday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.numOfUpcomingApptInToday \u003d numOfUpcomingApptInToday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.numOfDoneApptInThisWeek \u003d numOfDoneApptInThisWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.numOfUpcomingApptInThisWeek \u003d numOfUpcomingApptInThisWeek;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the number of upcoming appointments in today."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public int getNumOfUpcomingApptInToday() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this.numOfUpcomingApptInToday;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the number of appointments done in today."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public int getNumOfDoneApptInToday() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this.numOfDoneApptInToday;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the number of upcoming appointments in this week."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public int getNumOfUpcomingApptInThisWeek() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this.numOfUpcomingApptInThisWeek;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the number of appointments done in this week."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public int getNumOfDoneApptInThisWeek() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this.numOfDoneApptInThisWeek;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return \"Today: \\n\" + getNumOfUpcomingApptInToday()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \" upcoming  |  \" + getNumOfDoneApptInToday() + \" done \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \"This Week:\\n\" + getNumOfUpcomingApptInThisWeek()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \" upcoming  |  \" + getNumOfDoneApptInThisWeek() + \" done\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                || (other instanceof AppointmentStatistics // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 numOfDoneApptInToday \u003d\u003d ((AppointmentStatistics) other).getNumOfDoneApptInToday()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 numOfUpcomingApptInToday \u003d\u003d ((AppointmentStatistics) other).getNumOfUpcomingApptInToday()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 numOfUpcomingApptInThisWeek \u003d\u003d ((AppointmentStatistics) other).getNumOfUpcomingApptInThisWeek());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns the user prefs\u0027 patient book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Sets the user prefs\u0027 patient book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    void setPatientBookFilePath(Path patientBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void setAppointmentBookFilePath(Path appointmentBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Replaces patient book data with the data in {@code patientBook}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    void setPatientBook(ReadOnlyPatientBook patientBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /** Returns the PatientBook */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    ReadOnlyPatientBook getPatientBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if the time slot of an appointment hasOverlaps {@code appointment} in the appointment book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    boolean hasOverlappingAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns true if the time slot of an appointment is same {@code appointment} in the appointment book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    boolean hasAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * The patient must exist in the patient book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Deletes the given appointment."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The appointment must exist in the appointment book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void deleteAppointment(Appointment target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code patient} must not already exist in the patient book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Adds the given appointment."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * {@code appointment} must not already exist in the appointment book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code target} must exist in the patient book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * in the patient book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Updates the relevant appointments upon the editing of a given {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void updateAppointmentsWithPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Deletes the relevant appointments upon the deletion of a given {@code target}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void deleteAppointmentsWithPatient(Patient target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the given {@code target} with {@code editedAppointment}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code target} must exist in the appointment book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The appointment details of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * in the appointment book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void setAppointment(Appointment target, Appointment editedAppointment);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /** Returns an unmodifiable view of the filtered patient list */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces appointment book data with the data in {@code appointmentBook}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns the AppointmentBook"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    ReadOnlyAppointmentBook getAppointmentBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns an unmodifiable view of the filtered appointment list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 22,
      "ZhangWanlin98": 12,
      "xz0127": 28,
      "Avalionnet": 13,
      "-": 75,
      "YangYue128-helen": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents the in-memory model of the patient book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final PatientBook patientBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final AppointmentBook appointmentBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Initializes a ModelManager with the given patientBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public ModelManager(ReadOnlyPatientBook patientBook, ReadOnlyAppointmentBook appointmentBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireAllNonNull(patientBook, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        logger.fine(\"Initializing with patient book: \" + patientBook + \" and appointment book\" + appointmentBook"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.patientBook \u003d new PatientBook(patientBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointmentBook \u003d new AppointmentBook(appointmentBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientBook.getPatientList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentBook.getAppointmentList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this(new PatientBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return userPrefs.getPatientBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void setPatientBookFilePath(Path patientBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(patientBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        userPrefs.setPatientBookFilePath(patientBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return userPrefs.getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(appointmentBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userPrefs.setAppointmentBookFilePath(appointmentBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void setPatientBook(ReadOnlyPatientBook patientBook) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.patientBook.resetData(patientBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public ReadOnlyPatientBook getPatientBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBook;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBook.hasPatient(patient);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.removePatient(target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.addPatient(patient);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean hasOverlappingAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointmentBook.hasOverlapsWith(appointment);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentBook.hasAppointment(appointment);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        appointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.removeAppointment(target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointmentBook.resetData(appointmentBook);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointmentBook.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient-related Appointment Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateAppointmentsWithPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.updateAppointmentsWithPatients(target, editedPatient);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deleteAppointmentsWithPatient(Patient target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.deleteAppointmentsWithPatients(target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code versionedAppointmentBook}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return filteredAppointments;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        filteredAppointments.setPredicate(predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code versionedPatientBook}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBook.equals(other.patientBook)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 appointmentBook.equals(other.appointmentBook)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Model Validation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the {@code readOnlyPatientBook} is consistent with the {@code appointmentBook} data."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param readOnlyPatientBook the patients data"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param appointmentBook the appointments data"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the two books are valid, false otherwise"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidModel(ReadOnlyPatientBook readOnlyPatientBook,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                       ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d appointmentBook.getAppointmentList();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        PatientBook patientBook \u003d new PatientBook(readOnlyPatientBook);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (Appointment appointment : appointmentList) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (!patientBook.hasPatient(appointment.getPatient())) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 35,
      "ZhangWanlin98": 8,
      "xz0127": 30,
      "Avalionnet": 25,
      "-": 137,
      "YangYue128-helen": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PatientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Wraps all data at the patient-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Duplicates are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class PatientBook implements ReadOnlyPatientBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Creates an PatientBook using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBook(ReadOnlyPatientBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Resets the existing data of this {@code PatientBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void resetData(ReadOnlyPatientBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Adds a patient to the patient book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * The patient must not already exist in the patient book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code target} must exist in the patient book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * in the patient book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Removes {@code key} from this {@code PatientBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code key} must exist in the patient book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                || (other instanceof PatientBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 patients.equals(((PatientBook) other).patients));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 27,
      "Avalionnet": 16,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAppointmentBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Unmodifiable view of an appointment book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public interface ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns an unmodifiable view of the appointments list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * This list will not contain any overlapping appointments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the statistics of the appointment book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    AppointmentStatistics getAppointmentBookStatistics();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPatientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Unmodifiable view of an patient book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public interface ReadOnlyPatientBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 4,
      "Avalionnet": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "Avalionnet": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Path patientBookFilePath \u003d Paths.get(\"data\" , \"patientbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Path appointmentBookFilePath \u003d Paths.get(\"data\" , \"appointment.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        setPatientBookFilePath(newUserPrefs.getPatientBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        setAppointmentBookFilePath(newUserPrefs.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void setPatientBookFilePath(Path patientBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(patientBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.patientBookFilePath \u003d patientBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(appointmentBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointmentBookFilePath \u003d appointmentBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 patientBookFilePath.equals(o.patientBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return Objects.hash(guiSettings, patientBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + patientBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 8,
      "Avalionnet": 10,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an Appointment in the appointment book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Duration of an appointment in hours"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Duration DEFAULT_DURATION \u003d Duration.ofHours(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Creation offset in minutes. Used to allow creation of \"last-minute\" appointments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final int CREATION_OFFSET_MINUTES \u003d 20;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The appointment start time should be before the end time.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // todo: add more support for appointmentId"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentId appointmentId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Patient patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create an appointment using the default duration."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment(Date date, Time startTime, Patient patient) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(date, startTime, new Time(startTime.getTime().plus(DEFAULT_DURATION)), patient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create an appointment with specified end time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment(Date date, Time startTime, Time endTime, Patient patient) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(date, startTime, endTime, patient, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create an appointment with specified end time and end status."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment(Date date, Time startTime, Time endTime, Patient patient, boolean isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, startTime, endTime, patient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        checkArgument(startTime.isBefore(endTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointmentId \u003d new AppointmentId(date, startTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return Duration.between(startTime.getTime(), endTime.getTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentId getAppointmentId() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean getIsDoneStatus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment setPatient(Patient p) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(p);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment(date, startTime, endTime, p, isDone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public Appointment markAsDone() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment(date, startTime, endTime, patient, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the appointment has {@code Patient other}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param other the patient to check in the appointment."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if {@code Patient other} is in the Appointment, false otherwise."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean hasPatient(Patient other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return patient.isSamePatient(other);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if both appointments have overlapping appointment time slot."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This defines a weaker notion of equality between two appointments"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isOverlapping(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (otherAppointment \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!otherAppointment.getDate().equals(getDate())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Assumption: start1 \u003c end1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // overlap if end1 \u003e start2 and end2 \u003e start1"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return (getEndTime().isAfter(otherAppointment.getStartTime()))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().isAfter(getStartTime());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns true if both appointments start at the given date and time."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @param d given date"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @param t given time"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean startAtSameTime(Date d, Time t) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireAllNonNull(d, t);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return getDate().equals(d)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 getStartTime().equals(t);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if this appointment comes before the given appointment input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param otherAppointment the appointment to check against."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if this appointment comes before, false otherwise."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getDate().isBefore(otherAppointment.getDate())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (getDate().equals(otherAppointment.getDate())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u0026\u0026 !(getEndTime().isAfter(otherAppointment.getStartTime()))); // End1 \u003c\u003d Start2"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if this appointment comes after the given appointment input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param otherAppointment the appointment to check against."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if this appointment comes after, false otherwise."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(otherAppointment);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return getDate().isAfter(otherAppointment.getDate())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (getDate().equals(otherAppointment.getDate())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u0026\u0026 !(otherAppointment.getEndTime().isAfter(getStartTime()))); // End2 \u003c\u003d Start1"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Checks if this appointment is in the same week to week of the given date."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @param date the given date to check against."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @return true if this appointment is in the same week of the given date, false otherwise."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean isInSameWeek(Date date) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return getDate().isInSameWeek(date);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return otherAppointment.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getDate().equals(getDate())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 otherAppointment.getAppointmentId().equals(getAppointmentId())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatient().equals(getPatient())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u0026\u0026 otherAppointment.getIsDoneStatus() \u003d\u003d this.getIsDoneStatus();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Objects.hash(startTime, endTime, date, appointmentId, patient);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\", from \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\" to \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\"\\nPatient: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(getPatient().getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\"; Contact: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(getPatient().getPhone());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 184,
      "ZhangWanlin98": 5,
      "xz0127": 1,
      "YangYue128-helen": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the {@code Comparator} class for Appointment."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentComparator implements Comparator\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int compare(Appointment a1, Appointment a2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(a1, a2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (a1.isBefore(a2)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (a1.isAfter(a2)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert a1.isOverlapping(a2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"uuuuMMdd\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    AppointmentId(Date date, Time time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d date.getDate().format(DATE_FORMAT) + time.getTime().format(TIME_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof AppointmentId // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((AppointmentId) other).value)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.temporal.TemporalAdjuster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an upcoming appointment date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The formatter to convert the Date into the desired form for presentation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a {@code Date} that represents the date of an appointment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param year  the year of the date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param month the month of the date, from 1 (January) to 12 (December)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param day   the day of the date, from 1 to 31."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date(int year, int month, int day) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(LocalDate.of(year, month, day));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a {@code Date} that represents the date of an appointment."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param date the {@code LocalDate} containing the date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the appointment date comes before the input {@code Date}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputDate the input date to be checked against"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment date comes before the input date, false otherwise"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Date inputDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isBefore(inputDate.value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the appointment date comes after the input {@code Date}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputDate the input date to be checked against"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment date comes after the input date, false otherwise"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Date inputDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isAfter(inputDate.value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Checks if the appointment date is in the same week with the input {@code Date}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * @return true if the appointment date is in same week with the input date, false otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean isInSameWeek(Date inputDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        TemporalAdjuster adjusterToMonday \u003d TemporalAdjusters.next(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        LocalDate nextMon \u003d inputDate.value.with(adjusterToMonday);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        LocalDate lastSun \u003d nextMon.minusDays(8);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Date nextMonday \u003d new Date(nextMon);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Date lastSunday \u003d new Date(lastSun);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return isAfter(lastSunday) \u0026\u0026 isBefore(nextMonday);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a date string based on the currDate."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param currDate the current {@code LocalDate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string representation of the appointment {@code Date}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected String toStringBasedOn(LocalDate currDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String toDisplay \u003d value.format(DATE_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (value.isEqual(currDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Simplify date to \"Today\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            toDisplay +\u003d \" (Today)\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return toDisplay;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Formats appointment date as text for viewing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return toStringBasedOn(LocalDate.now());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 101,
      "YangYue128-helen": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/DateMatchesPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Tests that an {@code Appointment}\u0027s {@code Date} matches the Date given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DateMatchesPredicate implements Predicate\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateMatchesPredicate(Date date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean test(Appointment appointment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return Stream.of(date).anyMatch(date -\u003e date.equals(appointment.getDate()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                || (other instanceof DateMatchesPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                \u0026\u0026 date.equals(((DateMatchesPredicate) other).date));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/NaturalDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the natural days that are recognised by Nuudle."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public enum NaturalDay {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Days of Week"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MONDAY(\"MON\", \"MONDAY\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TUESDAY(\"TUE\", \"TUESDAY\", \"TUES\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    WEDNESDAY(\"WED\", \"WEDNESDAY\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    THURSDAY(\"THU\", \"THURSDAY\", \"THURS\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    FRIDAY(\"FRI\", \"FRIDAY\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SATURDAY(\"SAT\", \"SATURDAY\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SUNDAY(\"SUN\", \"SUNDAY\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Other date language"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TODAY(\"TDY\", \"TODAY\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    TOMORROW(\"TMR\", \"TOMORROW\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    YESTERDAY(\"YESTERDAY\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Time grammar"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MIDNIGHT(\"MIDNIGHT\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NOON(\"NOON\", \"AFTERNOON\", \"AFTER-NOON\", \"LUNCH\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    MORNING(\"MORNING\", \"SUNRISE\", \"BREAKFAST\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    EVENING(\"EVENING\", \"EVE\", \"DINNER\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NIGHT(\"NIGHT\", \"BEDTIME\", \"BED-TIME\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The string of words that is linked to the NaturalDay"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String[] words;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    NaturalDay(String... words) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the word given indicate the respective {@code NaturalDay}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param wordToCheck the string to check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the word implies the corresponding {@code NaturalDay}, false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean contains(String wordToCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Arrays.stream(words)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .anyMatch(word -\u003e word.equalsIgnoreCase(wordToCheck));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parse the string input for any natural date or time grammar that is used."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateString the date or time input string with a possible natural day reference."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code NaturalDay} that corresponds to the date or time grammar, or null if no match is found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static NaturalDay parse(String dateString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dateString \u003d dateString.strip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        NaturalDay[] days \u003d NaturalDay.values();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c days.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (days[i].contains(dateString)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return days[i];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.model.appointment.Appointment.DEFAULT_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an appointment time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The formatter to convert the Time into the desired form for presentation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Opens at 8am"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime OPENING_TIME \u003d LocalTime.of(8, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Closes at 10pm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime CLOSING_TIME \u003d LocalTime.of(22, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The appointment time period should fall within \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"the opening hours: from \" + OPENING_TIME.format(TIME_FORMAT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \" to \" + CLOSING_TIME.format(TIME_FORMAT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"\\nThe appointment duration of \" + DEFAULT_DURATION.toHours() + \"hour should also be considered.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create a {@code Time} that represents the time of an appointment."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param hour    the hour of the day, from 0 to 23"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param minutes the minute of the hour, from 0 to 59"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time(int hour, int minutes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(LocalTime.of(hour, minutes));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Create a {@code Time} that represents the time of an appointment."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param time the LocalTime containing the time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Time(LocalTime time) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given {@code LocalTime} is valid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@code LocalTime} is valid if it falls within the opening and closing time (inclusive)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param test the LocalTime to test."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if is valid, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidTime(LocalTime test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !(test.isBefore(OPENING_TIME) || test.isAfter(CLOSING_TIME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the given {@code LocalTime} is a valid start time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@code LocalTime} is valid if it falls within the opening and closing time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The {@link Appointment#DEFAULT_DURATION} is also considered"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param test the LocalTime to test."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if is valid start time, false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean isValidStartTime(LocalTime test) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !(test.isBefore(OPENING_TIME)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || test.isAfter(CLOSING_TIME.minus(DEFAULT_DURATION)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment time comes before the input {@code Time}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputTime the input time to be checked against"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment time comes before the input time, false otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isBefore(Time inputTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isBefore(inputTime.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Check if the appointment time comes after the input {@code Time}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputTime the input time to be checked against"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the appointment time comes after the input time, false otherwise"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isAfter(Time inputTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.isAfter(inputTime.value);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Format appointment time as text for viewing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.format(TIME_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.exceptions.OverlappingAppointmentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A list of appointments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * An appointment is considered unique by comparing using {@code Appointment#isOverlapping(Appointment)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * As such, adding and updating of appointment uses Appointment#isOverlapping(Appointment) for equality so as"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * to ensure that the appointment being added or updated is unique in terms of identity in the UniqueAppointmentList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * However, the removal of a patient uses Appointment#equals(Object) so as to ensure that the patient with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * @see Appointment#isOverlapping(Appointment)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // todo: UniqueAppointmentListTest"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList.sorted(new AppointmentComparator()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns true if the list contains an appointment that has an overlap with the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean hasOverlaps(Appointment toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isOverlapping);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns true if the list contains an appointment that completely overlaps with toCheck appointment."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean hasCompleteOverlaps(Appointment toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return internalList.stream().anyMatch(appointment -\u003e appointment.startAtSameTime(toCheck.getDate(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                toCheck.getStartTime()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Adds an appointment to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The appointment must not overlap with existing appointments in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void add(Appointment toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (hasOverlaps(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new OverlappingAppointmentException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * another existing appointment in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            internalList.remove(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            internalList.add(index, editedAppointment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        } catch (OverlappingAppointmentException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            internalList.add(index, target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new OverlappingAppointmentException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // if (!target.isOverlapping(editedAppointment) \u0026\u0026 hasOverlaps(editedAppointment)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        //     throw new OverlappingAppointmentException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // internalList.set(index, editedAppointment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Removes the equivalent appointment from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The appointment must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove(Appointment toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setAppointments(UniqueAppointmentList replacement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Replaces the contents of this list with {@code appointments}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * {@code appointments} must not contain overlapping appointments."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireAllNonNull(appointments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (!appointmentsAreNotOverlapping(appointments)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new OverlappingAppointmentException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        internalList.setAll(appointments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Deletes the relevant appointments upon the deletion of the {@code target}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deleteAppointmentsWithPatients(Patient target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cAppointment\u003e newAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (Appointment appointment : internalList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            if (!appointment.hasPatient(target)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                newAppointmentList.add(appointment);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.setAll(newAppointmentList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Updates the relevant appointments in the appointment book upon the update of {@code target} details"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * with {@code editedPatient}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateAppointmentsWithPatients(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cAppointment\u003e newAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (Appointment appointment : internalList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            if (appointment.hasPatient(target)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                newAppointmentList.add(appointment.setPatient(editedPatient));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                newAppointmentList.add(appointment);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.setAll(newAppointmentList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Iterator\u003cAppointment\u003e iterator() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                || (other instanceof UniqueAppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u0026\u0026 internalUnmodifiableList.equals(((UniqueAppointmentList) other).internalUnmodifiableList));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Returns true if {@code appointments} contains only non-overlapping appointments."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private boolean appointmentsAreNotOverlapping(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                if (appointments.get(i).isOverlapping(appointments.get(j))) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 36,
      "xz0127": 60,
      "YangYue128-helen": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Signals that the operation is unable to find the specified appointment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class AppointmentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public AppointmentNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        super(\"The appointment is not found in the appointment book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 5,
      "YangYue128-helen": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/OverlappingAppointmentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Signals that the operation will result in overlapping appointments (Appointments are considered overlapped if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * have the overlapping time slot)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class OverlappingAppointmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public OverlappingAppointmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        super(\"Operation would result in overlapping appointments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a Patient\u0027s address in the patient book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "Avalionnet": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a Patient\u0027s name in the patient book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "Avalionnet": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Nric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a Patient\u0027s Nric in the patient book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            \"Nric should only contain 7 numbers leading and ending with an alphabet in uppercase\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[STFG]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param nric A valid Nric."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assert isValidNric(nric) : \"Invalid nric\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        value \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns true if a given string is a valid Nric."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "xz0127": 1,
      "Avalionnet": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a Patient in the patient book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Patient(Name name, Phone phone, Address address, Set\u003cTag\u003e tags, Nric nric, Remark remark) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireAllNonNull(name, phone, address, tags, nric, remark);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if both patients of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getNric().equals(getNric())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 (otherPatient.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getTags().equals(getTags())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 otherPatient.getNric().equals(getNric());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return Objects.hash(name, phone, address, tags, nric);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\" (NRIC: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\")\\nPhone: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\"; Address: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\"; Remark: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .append(\"; Tags: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return builder.append(\";\").toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 6,
      "xz0127": 20,
      "Avalionnet": 17,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a Patient\u0027s phone number in the patient book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "Avalionnet": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a Patient\u0027s remark in the patient book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Guarantees: immutable; is valid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Each remark has a capacity of up to 200 words and can take \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"all alphanumeric and symbol characters.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Only use a blank remark to delete an existing remark from the patient.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"Existing remarks for the patient will also be overridden with the new input.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\W*(?:\\\\w+\\\\b\\\\W*){0,200}$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assert isValidRemark(remark) : \"Invalid Remark\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns true if a given string is a valid Remark."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "Avalionnet": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure that the patient being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * or updated is unique in terms of identity in the UniquePatientList. However, the removal of a patient uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Patient#equals(Object) so as to ensure that the patient with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        super(\"The patient is not found in the patient book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a Tag in the patient book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Contains utility methods for populating {@code PatientBook} and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * {@code AppointmentBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static Patient[] getSamplePatients() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                getTagSet(\"asthma\"), new Nric(\"S9234567Q\"), new Remark(\"Friendly guy\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                getTagSet(\"asthma\", \"hypertension\"), new Nric(\"S9345678P\"), new Remark(\"is\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                getTagSet(\"asthma\"), new Nric(\"S9456789L\"), new Remark(\"next door store owner\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                getTagSet(), new Nric(\"T1234567V\"), new Remark(\"\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                getTagSet(\"epilepsy\"), new Nric(\"T0034567Q\"), new Remark(\"Tough guy\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                getTagSet(\"colleagues\"), new Nric(\"T0934567Q\"), new Remark(\"Honest boy\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static ReadOnlyPatientBook getSamplePatientBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        PatientBook samplePb \u003d new PatientBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (Patient samplePatient : getSamplePatients()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            samplePb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return samplePb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Appointment[] getSampleAppointments() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Patient[] patients \u003d getSamplePatients();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Expired appointments will be deleted on model initialization"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment[]{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(LocalDate.now()), new Time(15, 0), patients[2]),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(LocalDate.now().plusDays(1)), new Time(10, 30), patients[0]),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(LocalDate.now()), new Time(16, 0), patients[4]),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(LocalDate.now().plusDays(2)), new Time(20, 0), patients[0]),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(2025, 12, 1), new Time(13, 30), patients[3]),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(2021, 11, 5), new Time(9, 0), patients[1]),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(2022, 5, 2), new Time(9, 0), patients[3]),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Appointment(new Date(LocalDate.now().plusDays(1)), new Time(11, 30), patients[5]),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static ReadOnlyAppointmentBook getSampleAppointmentBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook sampleAb \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (Appointment sampleAppointment : getSampleAppointments()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            sampleAb.addAppointment(sampleAppointment);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 40,
      "Avalionnet": 4,
      "xz0127": 14,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AppointmentBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AppointmentBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public interface AppointmentBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns AppointmentBook data as a {@link ReadOnlyAppointmentBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @see #getAppointmentBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Saves the given {@link ReadOnlyAppointmentBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param appointmentBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @see #saveAppointmentBook(ReadOnlyAppointmentBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAppointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Jackson-friendly version of {@link Appointment}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "class JsonAdaptedAppointment {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String TIME_IN_WRONG_ORDER \u003d \"Appointment start time is not before end time!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Boolean isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final JsonAdaptedPatient patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public JsonAdaptedAppointment(@JsonProperty(\"date\") LocalDate date,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                  @JsonProperty(\"startTime\") LocalTime startTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                  @JsonProperty(\"endTime\") LocalTime endTime,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                  @JsonProperty(\"doneStatus\") Boolean isDone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                  @JsonProperty(\"patient\") JsonAdaptedPatient patient) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Converts a given {@code Appointment} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public JsonAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d source.getDate().getDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d source.getStartTime().getTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        endTime \u003d source.getEndTime().getTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        isDone \u003d source.getIsDoneStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patient \u003d new JsonAdaptedPatient(source.getPatient());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Appointment."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (startTime \u003d\u003d null || endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!Time.isValidTime(startTime) || !Time.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!startTime.isBefore(endTime)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new IllegalValueException(TIME_IN_WRONG_ORDER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final Time modelStartTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final Time modelEndTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Done Status\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final boolean modelDoneStatus \u003d isDone;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Patient.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final Patient modelPatient \u003d patient.toModelType();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment(modelDate, modelStartTime, modelEndTime, modelPatient, modelDoneStatus);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                              @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                              @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        nric \u003d source.getNric().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            patientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new Patient(modelName, modelPhone, modelAddress, modelTags, modelNric, modelRemark);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 20,
      "Avalionnet": 20,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAppointmentBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A class to access AppointmentBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class JsonAppointmentBookStorage implements AppointmentBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppointmentBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public JsonAppointmentBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return readAppointmentBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Similar to {@link #readAppointmentBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Optional\u003cJsonSerializableAppointmentBook\u003e jsonAppointmentBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                filePath, JsonSerializableAppointmentBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (jsonAppointmentBook.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return Optional.of(jsonAppointmentBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        saveAppointmentBook(appointmentBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Similar to {@link #saveAppointmentBook(ReadOnlyAppointmentBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(appointmentBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAppointmentBook(appointmentBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPatientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * A class to access PatientBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class JsonPatientBookStorage implements PatientBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public JsonPatientBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return readPatientBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Similar to {@link #readPatientBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Optional\u003cJsonSerializablePatientBook\u003e jsonPatientBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                filePath, JsonSerializablePatientBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        if (!jsonPatientBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return Optional.of(jsonPatientBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        savePatientBook(patientBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Similar to {@link #savePatientBook(ReadOnlyPatientBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        requireNonNull(patientBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePatientBook(patientBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAppointmentBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * An Immutable AppointmentBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "@JsonRootName(value \u003d \"appointmentbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "class JsonSerializableAppointmentBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String MESSAGE_OVERLAPPING_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \"Appointment list contains overlapping appointment(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Constructs a {@code JsonSerializableAppointmentBook} with the given appointments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public JsonSerializableAppointmentBook(@JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointments.addAll(appointments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Converts a given {@code ReadOnlyAppointmentBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public JsonSerializableAppointmentBook(ReadOnlyAppointmentBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointments.addAll(source.getAppointmentList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .map(JsonAdaptedAppointment::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Converts this appointment book into the model\u0027s {@code AppointmentBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (appointmentBook.hasOverlapsWith(appointment)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                throw new IllegalValueException(MESSAGE_OVERLAPPING_APPOINTMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (DateTimeUtil.isExpiredByDay(appointment.getDate().getDate())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // send to archive"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // add to appointment book"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            appointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePatientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * An Immutable PatientBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "@JsonRootName(value \u003d \"patientbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "class JsonSerializablePatientBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Constructs a {@code JsonSerializablePatientBook} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public JsonSerializablePatientBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Converts a given {@code ReadOnlyPatientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePatientBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public JsonSerializablePatientBook(ReadOnlyPatientBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Converts this patient book into the model\u0027s {@code PatientBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook patientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            if (patientBook.hasPatient(patient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            patientBook.addPatient(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 16,
      "xz0127": 8,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PatientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Represents a storage for {@link seedu.address.model.PatientBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public interface PatientBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns PatientBook data as a {@link ReadOnlyPatientBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @see #getPatientBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Optional\u003cReadOnlyPatientBook\u003e readPatientBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Saves the given {@link ReadOnlyPatientBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @param patientBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * @see #savePatientBook(ReadOnlyPatientBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public interface Storage extends PatientBookStorage, AppointmentBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Path getPatientBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 11,
      "Avalionnet": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Manages storage of PatientBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final PatientBookStorage patientBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentBookStorage appointmentBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code DataStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public StorageManager(PatientBookStorage patientBookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                          AppointmentBookStorage appointmentBookStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.patientBookStorage \u003d patientBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointmentBookStorage \u003d appointmentBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBookStorage.getPatientBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return readPatientBook(patientBookStorage.getPatientBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Optional\u003cReadOnlyPatientBook\u003e readPatientBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBookStorage.readPatientBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        savePatientBook(patientBook, patientBookStorage.getPatientBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBookStorage.savePatientBook(patientBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentBookStorage.getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return readAppointmentBook(appointmentBookStorage.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(Path filePath)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentBookStorage.readAppointmentBook(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        saveAppointmentBook(appointmentBook, appointmentBookStorage.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBookStorage.saveAppointmentBook(appointmentBook, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 40,
      "Avalionnet": 13,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppointmentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * An UI component that displays information of an {@code Appointment}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public final Appointment appointment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Label contactNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a {@code AppointmentCard} with the given {@code Patient} to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentCard(Appointment appointment) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date.setText(appointment.getDate().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        time.setText(appointment.getStartTime() + \" - \" + appointment.getEndTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        String statusText \u003d appointment.getIsDoneStatus() ? \"Done!\" : \"Upcoming\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        status.setText(\"Status: \" + statusText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        if (appointment.getIsDoneStatus()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            status.setBackground(new Background(new BackgroundFill(Color.FIREBRICK, null, null)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            status.setBackground(new Background(new BackgroundFill(Color.GREEN, null, null)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        name.setText(\"Name: \" + appointment.getPatient().getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        contactNumber.setText(\"Contact: \" + appointment.getPatient().getPhone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!(other instanceof AppointmentCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentCard card \u003d (AppointmentCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointment.equals(card.appointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 65,
      "YangYue128-helen": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppointmentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Panel containing the list of appointments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private ListView\u003cAppointment\u003e appointmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentListView.setItems(appointmentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        protected void updateItem(Appointment appointment, boolean isEmpty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            super.updateItem(appointment, isEmpty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (isEmpty || appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                setGraphic(new AppointmentCard(appointment).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t12-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentStatistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private AppointmentListPanel appointmentListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private StatisticsDisplay statisticsDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private SplitPane splitView;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private StackPane appointmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private StackPane statisticsDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private StackPane patientStatusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private StackPane appointmentStatusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        statisticsDisplay \u003d new StatisticsDisplay(logic.getAppointmentBook().getAppointmentBookStatistics());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        statisticsDisplayPlaceholder.getChildren().add(statisticsDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        StatusBarFooter patientStatusBarFooter \u003d new StatusBarFooter(logic.getPatientBookFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patientStatusbarPlaceholder.getChildren().add(patientStatusBarFooter.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        StatusBarFooter appointmentStatusBarFooter \u003d new StatusBarFooter(logic.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentStatusbarPlaceholder.getChildren().add(appointmentStatusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        setSplitViewPosition(logic.getGuiSettings());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void setSplitViewPosition(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        splitView.setDividerPosition(0, guiSettings.getSplitViewRatio());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(), splitView.getDividerPositions()[0]);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentListPanel getAppointmentListPanel() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentListPanel;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            AppointmentStatistics stats \u003d logic.getAppointmentBook().getAppointmentBookStatistics();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            assert (stats !\u003d null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser() + \"\\n\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            statisticsDisplay.setStatistics(stats.toString());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage() + \"\\n\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 27,
      "xz0127": 6,
      "Avalionnet": 1,
      "-": 190,
      "YangYue128-helen": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a {@code PatientCard} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        nric.setText(\"NRIC: \" + patient.getNric().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (patient.getRemark().value.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            remark.setText(\"Remark: NIL\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            remark.setText(\"Remark: \" + patient.getRemark().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        phone.setText(\"Phone: \" + patient.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        address.setText(\"Address: \" + patient.getAddress().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patient.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 6,
      "xz0127": 14,
      "Avalionnet": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        protected void updateItem(Patient patient, boolean isEmpty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            super.updateItem(patient, isEmpty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (isEmpty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "xz0127": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class StatisticsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private static final String FXML \u003d \"StatisticsDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private TextArea statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * Creates a {@code StatisticsDisplay} with the given {@code AppointmentStatistics} to display."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public StatisticsDisplay(AppointmentStatistics stats) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        statistics.setText(stats.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void setStatistics(String stats) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        requireNonNull(stats);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        statistics.setText(stats);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nuudle_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"90.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$date\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$time\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$status\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"contactNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$contact number\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 34,
      "YangYue128-helen": 5
    }
  },
  {
    "path": "src/main/resources/view/AppointmentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Appointments\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003c/Text\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Nuudle\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cImage url\u003d\"@/images/nuudle_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"100.0\" prefWidth\u003d\"213.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            \u003cSplitPane fx:id\u003d\"splitView1\" dividerPositions\u003d\"0.8\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "               \u003citems\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"120.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                 \u003cStackPane fx:id\u003d\"statisticsDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"120.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                     \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "               \u003c/items\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cSplitPane fx:id\u003d\"splitView\" dividerPositions\u003d\"0.29797979797979796\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "          \u003citems\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cVBox fx:id\u003d\"patientList\" alignment\u003d\"TOP_CENTER\" minWidth\u003d\"170.0\" prefWidth\u003d\"170.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cStackPane fx:id\u003d\"patientStatusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cVBox fx:id\u003d\"appointmentList\" alignment\u003d\"TOP_CENTER\" minWidth\u003d\"170.0\" prefWidth\u003d\"170.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cStackPane fx:id\u003d\"appointmentStatusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "          \u003c/items\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 28,
      "xz0127": 1,
      "-": 46,
      "YangYue128-helen": 12
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 4,
      "Avalionnet": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Patients\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cFont name\u003d\"Segoe UI Light\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "  \u003c/Text\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12,
      "xz0127": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatisticsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003cStackPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    \u003cTextArea fx:id\u003d\"statistics\" editable\u003d\"false\" styleClass\u003d\"stats-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 2,
      "xz0127": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nuudle_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateTimeUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.DateTimeUtil.isExpired;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.util.DateTimeUtil.isExpiredByDay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalDateTime currDateTime \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            LocalDateTime.of(2020, 1, 1, 15, 30);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isExpiredByDay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e isExpiredByDay(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isExpired_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e isExpired(null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e isExpired(null, null, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isExpiredByDay_returnFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpiredByDay(LocalDate.of(2010, 1, 1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isExpired_returnTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate sameDay \u003d currDateTime.toLocalDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime sameTime \u003d currDateTime.toLocalTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // past day, any time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpired(sameDay.minusDays(1), sameTime, currDateTime));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpired(sameDay.minusWeeks(1), LocalTime.NOON, currDateTime));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpired(sameDay.minusMonths(1), LocalTime.MIDNIGHT, currDateTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same day, past time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpired(sameDay, sameTime.minusHours(1), currDateTime));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpired(sameDay, sameTime.minusMinutes(1), currDateTime));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isExpired(sameDay, sameTime.minusSeconds(1), currDateTime));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isExpired_returnFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate sameDay \u003d currDateTime.toLocalDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime sameTime \u003d currDateTime.toLocalTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same day and time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay, sameTime, currDateTime));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // future day, any time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay.plusDays(1), sameTime, currDateTime));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay.plusWeeks(1), LocalTime.NOON, currDateTime));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay.plusMonths(1), LocalTime.MIDNIGHT, currDateTime));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same day, future time"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay, sameTime.plusHours(1), currDateTime));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay, sameTime.plusMinutes(1), currDateTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isExpired(sameDay, sameTime.plusSeconds(1), currDateTime));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.storage.JsonAppointmentBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.storage.JsonPatientBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new JsonPatientBookStorage(temporaryFolder.resolve(\"patientBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAppointmentBookStorage appointmentBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAppointmentBookStorage(temporaryFolder.resolve(\"appointmentBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // Setup LogicManager with JsonPatientBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new JsonPatientBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPatientBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAppointmentBookStorage appointmentBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAppointmentBookStorage(temporaryFolder.resolve(\"ioExceptionAppointmentBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        StorageManager storage \u003d new StorageManager(patientBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAppointmentList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4, 0.5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(guiSettings, logic.getGuiSettings());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientBook(), model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static class JsonPatientBookIoExceptionThrowingStub extends JsonPatientBookStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        private JsonPatientBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public void savePatientBook(ReadOnlyPatientBook patientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 24,
      "xz0127": 10,
      "Avalionnet": 12,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientBook(), model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPatient), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient patientInList \u003d model.getPatientBook().getPatientList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "Avalionnet": 4,
      "xz0127": 9,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public Path getPatientBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public void setPatientBookFilePath(Path patientBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        public void setAppointmentBookFilePath(Path appointmentBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public void setPatientBook(ReadOnlyPatientBook newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public ReadOnlyPatientBook getPatientBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public boolean hasOverlappingAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public boolean hasAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void deleteAppointment(Appointment target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public void setAppointment(Appointment target, Appointment editedPatient) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void updateAppointmentsWithPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void deleteAppointmentsWithPatient(Patient target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        public void setAppointmentBook(ReadOnlyAppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        public ReadOnlyPatientBook getPatientBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            return new PatientBook();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "ZhangWanlin98": 12,
      "Avalionnet": 8,
      "xz0127": 56,
      "-": 159,
      "YangYue128-helen": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AssignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OVERLAP_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SAME_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DurationSupporter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.AppointmentBookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.DurationSupporterBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPatientBook(), new AppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporter();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignCommand(null, durationSupporter));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index index \u003d Index.fromZeroBased(10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignCommand(index, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullIndexAndBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignCommand(null, null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void constructor_nullDurationAcceptedByModel_assignSuccessful() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, durationSupporter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date date \u003d durationSupporter.getDate().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time start \u003d durationSupporter.getTime().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time end \u003d durationSupporter.getEndTime(start).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d new Appointment(date, start, end, ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_SUCCESS, appointment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AppointmentBook expectedAppointmentBook \u003d new AppointmentBookBuilder().withAppointment(appointment).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                expectedAppointmentBook, new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_appointmentAcceptedByModel_assignSuccessful() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, durationSupporter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date date \u003d durationSupporter.getDate().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time start \u003d durationSupporter.getTime().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time end \u003d durationSupporter.getEndTime(start).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d new Appointment(date, start, end, ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_SUCCESS, appointment);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AppointmentBook expectedAppointmentBook \u003d new AppointmentBookBuilder().withAppointment(appointment).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                expectedAppointmentBook, new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_appointmentRejectedDueToOverSizedIndex_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index overSizedIndex \u003d Index.fromOneBased(getTypicalPatients().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(overSizedIndex, durationSupporter);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(assignCommand, model, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_sameAppointmentRejectedDueToOverlap_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, durationSupporter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date date \u003d durationSupporter.getDate().get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time start \u003d durationSupporter.getTime().get();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time end \u003d durationSupporter.getEndTime(start).get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d new Appointment(date, start, end, ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(assignCommand, model, AssignCommand.ASSIGNMENT_OVERLAP);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_differentAppointmentRejectedDueToOverlap_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, durationSupporter);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Date date \u003d durationSupporter.getDate().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time start \u003d durationSupporter.getTime().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Time end \u003d durationSupporter.getEndTime(start).get();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Appointment appointment \u003d new Appointment(date, start, end, ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(assignCommand, model, AssignCommand.ASSIGNMENT_OVERLAP);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter durationSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter diffSupporter \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(OVERLAP_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand command \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, durationSupporter);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter supporterCopy \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(SAME_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand commandCopy \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, supporterCopy);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(command.equals(commandCopy));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(command.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand diffIndexCommand \u003d new AssignCommand(INDEX_SECOND_APPOINTMENT, durationSupporter);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(command.equals(diffIndexCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different dateTimeLoader -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AssignCommand diffLoaderCommand \u003d new AssignCommand(INDEX_FIRST_APPOINTMENT, diffSupporter);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(command.equals(diffLoaderCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 163,
      "Avalionnet": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CancelCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFF_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SAME_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class CancelCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_validDateTimeInput_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withDate(\"1 Jan 2050\").withTime(\"9am\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Appointment appointmentToCancel \u003d ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        CancelCommand cancelCommand \u003d new CancelCommand(loader);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String expectedMessage \u003d String.format(CancelCommand.MESSAGE_MARK_CANCEL_SUCCESS, appointmentToCancel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        expectedModel.deleteAppointment(appointmentToCancel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandSuccess(cancelCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_appointmentWithDateTimeAbsent_fail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        CancelCommand cancelCommand \u003d new CancelCommand(loader);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandFailure(cancelCommand, model, CancelCommand.APPOINTMENT_DOES_NOT_EXISTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        final CancelCommand standardCommand \u003d new CancelCommand(loader);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        CancelCommand commandWithSameValues \u003d new CancelCommand(loader);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // different DateTimeLoader -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader difLoader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withDate(DIFF_DATE).withTime(SAME_TIME).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(standardCommand.equals(new CancelCommand(difLoader)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_emptyAppointmentBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_nonEmptyAppointmentBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        expectedModel.setAppointmentBook(new AppointmentBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 5,
      "Avalionnet": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_ONE_NINETY_NINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_TWO_FIVE_ZERO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.DurationSupporterBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1234567J\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"T0034567P\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"She loves movies\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Serial entrepreneur\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String VALID_DATE \u003d \"20 Nov 2050\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String DIFF_DATE \u003d \"03 August 2050\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String VALID_TIME \u003d \"12pm\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String SAME_TIME \u003d \"Afternoon\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String OVERLAP_TIME \u003d \"12:01 pm\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String VALID_DURATION \u003d \"90\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String DIFF_DURATION \u003d \"91\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String ASSIGN_DATE_TIME \u003d \" \" + PREFIX_DATE + VALID_DATE + \" \" + PREFIX_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String ASSIGN_TIME \u003d \" \" + PREFIX_TIME + VALID_TIME;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String ASSIGN_DATE \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String ASSIGN_DURATION \u003d \" \" + PREFIX_DURATION + VALID_DURATION;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d PREFIX_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d PREFIX_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String REMARK_DESC_EMPTY \u003d PREFIX_REMARK + \" \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"q1234567k\"; // lower caps not allowed in Nric"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"20201202\"; // not a recognised date format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String INVALID_DATE_DESC_LETTERS \u003d \" \" + PREFIX_DATE + \"abcd\"; // not a recognised date format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_DATE_DESC_EXPIRED \u003d \" \" + PREFIX_DATE + \"20/12/2010\"; // date is in the past"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"2530\"; // not a proper 24h time format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String INVALID_TIME_DESC_LETTERS \u003d \" \" + PREFIX_TIME + \"abcd\"; // not a recognised time format"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String INVALID_TIME_DESC_CLOSED \u003d \" \" + PREFIX_TIME + \"2359\"; // not during opening hours"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String INVALID_REMARK_EXCEED_LIMIT \u003d \" 1 \" + PREFIX_REMARK + WORDS_TWO_FIVE_ZERO;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String INVALID_REMARK_INDEX \u003d \" 0 \" + PREFIX_REMARK + WORDS_ONE_NINETY_NINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String INVALID_DURATION_NEGATIVE_DESC \u003d \" \" + PREFIX_DURATION + \"-40\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final String INVALID_DURATION_NON_INTEGER_DESC \u003d \" \" + PREFIX_DURATION + \"CS\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final EditCommand.EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public static final DateTimeLoader LOADER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final DateTimeLoader LOADER_DIFF_TIME;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final DateTimeLoader LOADER_DIFF_DATE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DurationSupporter SUPPORTER;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DurationSupporter SUPPORTER_DIFF_DATE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DurationSupporter SUPPORTER_DIFF_TIME;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final AssignCommand.DurationSupporter SUPPORTER_DIFF_DURATION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        LOADER \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        LOADER_DIFF_TIME \u003d new DateTimeLoaderBuilder().withDate(VALID_DATE).withTime(OVERLAP_TIME).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        LOADER_DIFF_DATE \u003d new DateTimeLoaderBuilder().withDate(DIFF_DATE).withTime(OVERLAP_TIME).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        SUPPORTER \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        SUPPORTER_DIFF_DATE \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(DIFF_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        SUPPORTER_DIFF_TIME \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(OVERLAP_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        SUPPORTER_DIFF_DURATION \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(DIFF_DURATION).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * - the patient book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook expectedPatientBook \u003d new PatientBook(actualModel.getPatientBook());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredPatientList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook expectedAppointmentBook \u003d new AppointmentBook(actualModel.getAppointmentBook());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cAppointment\u003e expectedFilteredAppointmentList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(expectedPatientBook, actualModel.getPatientBook());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedFilteredPatientList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedAppointmentBook, actualModel.getAppointmentBook());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedFilteredAppointmentList, actualModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Updates {@code model}\u0027s filtered patient list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * {@code model}\u0027s patient book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Updates {@code model}\u0027s filtered appointment list to show only the appointment at the given {@code targetIndex}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * in the {@code model}\u0027s appointment book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static void showAppointmentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final Date date \u003d appointment.getDate();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        final Time startTime \u003d appointment.getStartTime();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        model.updateFilteredAppointmentList(appt -\u003e appt.startAtSameTime(date, startTime));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, model.getFilteredAppointmentList().size());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 37,
      "ZhangWanlin98": 31,
      "Avalionnet": 24,
      "xz0127": 15,
      "-": 104,
      "YangYue128-helen": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DateTimeLoaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOADER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOADER_DIFF_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOADER_DIFF_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DateTimeLoaderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoader(LOADER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(LOADER.equals(loader));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(LOADER.equals(LOADER));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(LOADER_DIFF_DATE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(LOADER.equals(LOADER_DIFF_TIME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH_APPOINTMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment firstAppointmentToDelete \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment secondAppointmentToDelete \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_SIXTH_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deleteAppointment(firstAppointmentToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deleteAppointment(secondAppointmentToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment firstAppointmentToDelete \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment secondAppointmentToDelete \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_SIXTH_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientBook(), model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deleteAppointment(firstAppointmentToDelete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deleteAppointment(secondAppointmentToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showNoPatient(expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_patientNotWithinAppointmentBook_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index indexOfPatientNotInAppointmentBook \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(indexOfPatientNotInAppointmentBook.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexOfPatientNotInAppointmentBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPatientBook(), model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of patient book list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientBook().getPatientList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PATIENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private void showNoPatient(Model model) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        model.updateFilteredPatientList(p -\u003e false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(model.getFilteredPatientList().isEmpty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "ZhangWanlin98": 10,
      "xz0127": 39,
      "Avalionnet": 6,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFF_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SAME_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void execute_validDateTimeInput_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder(ALICE_APPOINTMENT).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment appointmentToMark \u003d ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment markedAppointment \u003d ALICE_APPOINTMENT.markAsDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_DONE_SUCCESS, appointmentToMark);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPatientBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        expectedModel.setAppointment(appointmentToMark, markedAppointment);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void execute_invalidDateTimeInput_fail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertCommandFailure(doneCommand, model, DoneCommand.APPOINTMENT_DOES_NOT_EXISTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void execute_markTheAlreadyDoneAppointment_fail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder(ALICE_APPOINTMENT).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment appointmentToMark \u003d ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment markedAppointment \u003d ALICE_APPOINTMENT.markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        model.setAppointment(appointmentToMark, markedAppointment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertCommandFailure(doneCommand, model, DoneCommand.APPOINTMENT_HAS_BEEN_MARKED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        final DoneCommand standardCommand \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DoneCommand commandWithSameValues \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // different DateTimeLoader -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateTimeLoader difLoader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(DIFF_DATE).withTime(SAME_TIME).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(standardCommand.equals(new DoneCommand(difLoader)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "Avalionnet": 3,
      "YangYue128-helen": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DurationSupporterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPORTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPORTER_DIFF_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPORTER_DIFF_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUPPORTER_DIFF_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DurationSupporter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DurationSupporterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter supporter \u003d new DurationSupporter(SUPPORTER);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(SUPPORTER.equals(supporter));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(SUPPORTER.equals(SUPPORTER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(SUPPORTER.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(SUPPORTER.equals(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(SUPPORTER.equals(SUPPORTER_DIFF_DATE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(SUPPORTER.equals(SUPPORTER_DIFF_TIME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(SUPPORTER.equals(SUPPORTER_DIFF_DURATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH_APPOINTMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment firstAppointmentToEdit \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment secondAppointmentToEdit \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_SIXTH_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment firstEditedAppointment \u003d firstAppointmentToEdit.setPatient(editedPatient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment secondEditedAppointment \u003d secondAppointmentToEdit.setPatient(editedPatient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_FIRST_APPOINTMENT.getZeroBased()), firstEditedAppointment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_SIXTH_APPOINTMENT.getZeroBased()), secondEditedAppointment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_patientNotWithinAppointmentBook_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index indexOfPatientNotInAppointmentBook \u003d Index.fromOneBased(model.getFilteredPatientList().size() - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient lastPatient \u003d model.getFilteredPatientList().get(indexOfPatientNotInAppointmentBook.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexOfPatientNotInAppointmentBook, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(lastPatient, editedPatient);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, new EditPatientDescriptor());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment firstAppointmentToEdit \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_FIRST_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment secondAppointmentToEdit \u003d model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_SIXTH_APPOINTMENT.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment firstEditedAppointment \u003d firstAppointmentToEdit.setPatient(editedPatient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Appointment secondEditedAppointment \u003d secondAppointmentToEdit.setPatient(editedPatient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_FIRST_APPOINTMENT.getZeroBased()), firstEditedAppointment);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.setAppointment(model.getFilteredAppointmentList()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .get(INDEX_SIXTH_APPOINTMENT.getZeroBased()), secondEditedAppointment);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PATIENT, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // edit patient in filtered list into a duplicate in patient book"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient patientInList \u003d model.getPatientBook().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * but smaller than size of patient book"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of patient book list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientBook().getPatientList().size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, DESC_AMY);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PATIENT, copyDescriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PATIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PATIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 5,
      "xz0127": 93,
      "Avalionnet": 12,
      "-": 112,
      "YangYue128-helen": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPatientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class EditPatientDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 8,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getPatientBook(), model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_zeroKeywords_noPatientFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(appointment -\u003e predicate.test(appointment.getPatient()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void execute_multipleKeywords_multiplePatientsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(appointment -\u003e predicate.test(appointment.getPatient()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "xz0127": 14,
      "Avalionnet": 3,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPatientBook(), model.getAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_listsAreNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_patientListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_appointmentListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void execute_bothListsAreFiltered_showsEverything() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 19,
      "xz0127": 3,
      "Avalionnet": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_4;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_ONE_NINETY_NINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "class RemarkCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientBook(), getTypicalAppointmentBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(firstPatient).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        expectedModel.setPatient(firstPatient, editedPatient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(firstPatient).withRemark(\"\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        expectedModel.setPatient(firstPatient, editedPatient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(firstPatient)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PATIENT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientBook(model.getPatientBook()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new AppointmentBook(model.getAppointmentBook()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        expectedModel.setPatient(firstPatient, editedPatient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_invalidPatientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * but smaller than size of patient book"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void execute_invalidPatientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of patient book list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientBook().getPatientList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_sameObject_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient samplePatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(samplePatient).withRemark(WORDS_ONE_NINETY_NINE).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(remarkCommand.equals(remarkCommand));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_sameContent_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient samplePatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(samplePatient).withRemark(WORDS_ONE_NINETY_NINE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand anotherRemarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT, new Remark(WORDS_ONE_NINETY_NINE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(remarkCommand.equals(anotherRemarkCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand anotherRemarkCommand2 \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(remarkCommand.equals(anotherRemarkCommand2));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_differentContent_fail() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient samplePatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(samplePatient)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withRemark(WORDS_ONE_NINETY_NINE).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand anotherRemarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT, new Remark(STRING_REMARK_4));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(remarkCommand.equals(anotherRemarkCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand anotherRemarkCommand2 \u003d new RemarkCommand(INDEX_SECOND_PATIENT, new Remark(STRING_REMARK_5));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(remarkCommand.equals(anotherRemarkCommand2));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand anotherRemarkCommand3 \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(samplePatient.getRemark().value));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(remarkCommand.equals(anotherRemarkCommand3));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_differentType_fail() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        final DoneCommand standardCommand \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient samplePatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(samplePatient).withRemark(WORDS_ONE_NINETY_NINE).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(remarkCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_null_fail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient samplePatient \u003d model.getFilteredPatientList()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(samplePatient).withRemark(WORDS_ONE_NINETY_NINE).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_SECOND_PATIENT,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new Remark(editedPatient.getRemark().value));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(remarkCommand.equals(null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "Avalionnet": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_APPOINTMENTS_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFF_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.DateMatchesPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            getTypicalPatientBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            getTypicalAppointmentBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            getTypicalPatientBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            getTypicalAppointmentBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                new DateMatchesPredicate(ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                new DateMatchesPredicate(ParserUtil.parseDate(DIFF_DATE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                new DateMatchesPredicate(ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand firstViewCommand \u003d new ViewCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand secondViewCommand \u003d new ViewCommand(secondPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(firstViewCommand.equals(firstViewCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand firstViewCommandCopy \u003d new ViewCommand(firstPredicateCopy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(firstViewCommand.equals(firstViewCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(firstViewCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(firstViewCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(firstViewCommand.equals(secondViewCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_defaultAllAppointments_viewSuccessful() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand command \u003d new ViewCommand(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandSuccess(command, model, ViewCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertEquals(model.getFilteredAppointmentList(), expectedModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_multipleAppointmentsFound_viewSuccessful() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_OVERVIEW, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate predicate \u003d new DateMatchesPredicate(new Date("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                2050, 1, 1)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand command \u003d new ViewCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertEquals(model.getFilteredAppointmentList(), expectedModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void execute_noAppointmentFound_viewSuccessful() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_APPOINTMENTS_OVERVIEW, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate predicate \u003d preparePredicate(LocalDate.of(2088, 3, 3));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand command \u003d new ViewCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        expectedModel.updateFilteredAppointmentList(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(model.getFilteredAppointmentList(), expectedModel.getFilteredAppointmentList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Passes {@code input} into a {@code DateMatchesPredicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private DateMatchesPredicate preparePredicate(LocalDate input) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new DateMatchesPredicate(new Date(input));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "ZhangWanlin98": 103,
      "Avalionnet": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NRIC_DESC_BOB, new AddCommand(expectedPatientMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // multiple nric - last nric accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + NRIC_DESC_BOB, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        + ADDRESS_DESC_AMY + NRIC_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 15,
      "xz0127": 36,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AssignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPIRED_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC_EXPIRED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_NEGATIVE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_NON_INTEGER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC_CLOSED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DurationSupporter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.DurationSupporterBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, ASSIGN_DATE_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1\" + ASSIGN_TIME, AssignCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // no time specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1\" + ASSIGN_DATE, AssignCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // no index and no date or time specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"-5\" + ASSIGN_DATE_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"0\" + ASSIGN_DATE_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // invalid prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1 o/\" + VALID_DATE + ASSIGN_TIME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + ASSIGN_TIME, DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC_EXPIRED + ASSIGN_TIME, MESSAGE_EXPIRED_DATE_TIME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + ASSIGN_DATE, TimeParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC_CLOSED + ASSIGN_DATE, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC_CLOSED + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + INVALID_DATE_DESC_EXPIRED,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                TimeParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC_CLOSED + INVALID_DATE_DESC_EXPIRED,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1\" + ASSIGN_DATE + ASSIGN_DATE_TIME + INVALID_DURATION_NEGATIVE_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \"1\" + ASSIGN_DATE + ASSIGN_DATE_TIME + INVALID_DURATION_NON_INTEGER_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ASSIGN_DATE + ASSIGN_TIME + ASSIGN_DURATION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DurationSupporter loader \u003d new DurationSupporterBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).withDuration(VALID_DURATION).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AssignCommand expectedCommand \u003d new AssignCommand(targetIndex, loader);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 41,
      "ZhangWanlin98": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CancelCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC_LETTERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC_CLOSED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC_LETTERS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.CancelCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.DateTimeLoader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class CancelCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final CancelCommandParser parser \u003d new CancelCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, ASSIGN_TIME, CancelCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // no time specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, ASSIGN_DATE, CancelCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // no date or time specified, empty arguments"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC + ASSIGN_TIME, DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC_LETTERS + ASSIGN_TIME, DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC + ASSIGN_DATE, TimeParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC_CLOSED + ASSIGN_DATE, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC_LETTERS + ASSIGN_DATE, TimeParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC_CLOSED + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void parse_allFieldPresents_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String userInput \u003d ASSIGN_DATE + ASSIGN_TIME;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        CancelCommand expectedCommand \u003d new CancelCommand(loader);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DateParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final int currYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Default/now --\u003e Monday"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate currDate \u003d LocalDate.of(2020, 9, 7);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse_invalidDateString_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, DateParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e DateParserUtil.parse(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parse(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parse(null, currDate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // formatted date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parse(\"12/08\", currDate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 14), DateParserUtil.parse(\"monday\", currDate));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByDateFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // dependent on current year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parseByDateFormat(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d[/][-]M[[/][-]uuuu] --\u003e d/M[/uuuu]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12/08\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12/08/2019\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 25), DateParserUtil.parseByDateFormat(\"25/8\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 25), DateParserUtil.parseByDateFormat(\"25/8/2019\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d[/][-]M[[/][-]uuuu] --\u003e d-M[-uuuu]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-08\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-08-2019\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-8\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-8-2019\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // M[/][-]d[[/][-]uuuu] --\u003e M/d[/uuuu]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Must use an obvious month to differentiate month from dayOfMonth"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 12, 25), DateParserUtil.parseByDateFormat(\"12/25\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 12, 25), DateParserUtil.parseByDateFormat(\"12/25/2019\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // If month is not differentiable from dayOfMonth"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 5, 12), DateParserUtil.parseByDateFormat(\"12/5\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 12), DateParserUtil.parseByDateFormat(\"12/5/2019\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // M[/][-]d[[/][-]uuuu] --\u003e M-d[-uuuu]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Must use an obvious month to differentiate month from dayOfMonth"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 12, 25), DateParserUtil.parseByDateFormat(\"12-25\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 12, 25), DateParserUtil.parseByDateFormat(\"12-25-2019\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // If month is not differentiable from dayOfMonth"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 5, 12), DateParserUtil.parseByDateFormat(\"12-5\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 12), DateParserUtil.parseByDateFormat(\"12-5-2019\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // uuuu[/][-]M[/][-]d --\u003e uuuu/M/d (compulsory year)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 25), DateParserUtil.parseByDateFormat(\"2019/05/25\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 5, 25), DateParserUtil.parseByDateFormat(\"2020/5/25\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // uuuu[/][-]M[/][-]d --\u003e uuuu-M-d (compulsory year)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 5, 25), DateParserUtil.parseByDateFormat(\"2019-05-25\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 5, 25), DateParserUtil.parseByDateFormat(\"2020-5-25\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d-MMM[-uuuu] (Short month)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-Aug\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-Aug-2019\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Insensitive case"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 2, 12), DateParserUtil.parseByDateFormat(\"12-FEB\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 3, 12), DateParserUtil.parseByDateFormat(\"12-mAR-2019\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // d-MMMM[-uuuu] (Long month)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 8, 12), DateParserUtil.parseByDateFormat(\"12-August\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 8, 12), DateParserUtil.parseByDateFormat(\"12-August-2019\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Insensitive case"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(currYear, 2, 12), DateParserUtil.parseByDateFormat(\"12-FEBruarY\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2019, 3, 12), DateParserUtil.parseByDateFormat(\"12-mARCh-2019\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(DateParserUtil.parseByDateFormat(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByNaturalDay() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateParserUtil.parseByNaturalDay(null, currDate));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // today"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 7), DateParserUtil.parseByNaturalDay(\"tdy\", currDate));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 7), DateParserUtil.parseByNaturalDay(\"today\", currDate));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, DateParserUtil.parseByNaturalDay(\"TODAY\", currDate).compareTo(currDate));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // tomorrow"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tmr\", currDate));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tomorrow\", currDate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, DateParserUtil.parseByNaturalDay(\"TOMORROW\", currDate).compareTo(currDate));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // day of weeks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 14), DateParserUtil.parseByNaturalDay(\"mon\", currDate));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 14), DateParserUtil.parseByNaturalDay(\"MONDAY\", currDate));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.MONDAY, DateParserUtil.parseByNaturalDay(\"MONDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"Tues\", currDate));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tue\", currDate));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 8), DateParserUtil.parseByNaturalDay(\"tuesday\", currDate));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.TUESDAY, DateParserUtil.parseByNaturalDay(\"TUESDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 9), DateParserUtil.parseByNaturalDay(\"weD\", currDate));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 9), DateParserUtil.parseByNaturalDay(\"wednesday\", currDate));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.WEDNESDAY, DateParserUtil.parseByNaturalDay(\"WEDNESDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 10), DateParserUtil.parseByNaturalDay(\"tHu\", currDate));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 10), DateParserUtil.parseByNaturalDay(\"Thurs\", currDate));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 10), DateParserUtil.parseByNaturalDay(\"thursday\", currDate));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.THURSDAY, DateParserUtil.parseByNaturalDay(\"THURSDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 11), DateParserUtil.parseByNaturalDay(\"fri\", currDate));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 11), DateParserUtil.parseByNaturalDay(\"friday\", currDate));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.FRIDAY, DateParserUtil.parseByNaturalDay(\"FRIDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 12), DateParserUtil.parseByNaturalDay(\"sat\", currDate));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 12), DateParserUtil.parseByNaturalDay(\"saturday\", currDate));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.SATURDAY, DateParserUtil.parseByNaturalDay(\"SATURDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 13), DateParserUtil.parseByNaturalDay(\"sun\", currDate));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDate.of(2020, 9, 13), DateParserUtil.parseByNaturalDay(\"sundaY\", currDate));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(DayOfWeek.SUNDAY, DateParserUtil.parseByNaturalDay(\"SUNDAY\", currDate).getDayOfWeek());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(DateParserUtil.parseByNaturalDay(\"\", currDate));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PATIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC_CLOSED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.DateTimeLoader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.testutil.DateTimeLoaderBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, ASSIGN_TIME, DoneCommand.DATE_MISSING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // no time specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, ASSIGN_DATE, DoneCommand.TIME_MISSING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // no index and no date or time specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC + ASSIGN_TIME, DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC + ASSIGN_DATE, TimeParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC_CLOSED + ASSIGN_DATE, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseFailure(parser, INVALID_TIME_DESC_CLOSED + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void parse_allFieldPresents_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        String userInput \u003d ASSIGN_DATE + ASSIGN_TIME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DateTimeLoader loader \u003d new DateTimeLoaderBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(VALID_DATE).withTime(VALID_TIME).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        DoneCommand expectedCommand \u003d new DoneCommand(loader);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, \"1 o/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Patient} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY + INVALID_NRIC_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                + TAG_DESC_FRIEND + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // nric"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PATIENT;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 12,
      "xz0127": 40,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NuudleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class NuudleParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final NuudleParser parser \u003d new NuudleParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PATIENT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                + INDEX_FIRST_PATIENT.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PATIENT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "xz0127": 16,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"S12347B\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_DATE_FORMAT \u003d \"1-1-1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_TIME_CLOSED \u003d \"midnight\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_TIME_FORMAT \u003d \"2359am\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String VALID_DATE \u003d \"20-AUG-2050\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String VALID_TIME \u003d \"noon\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, DateParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseDate(INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date expectedDate \u003d new Date(2050, 8, 20);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date expectedDate \u003d new Date(2050, 8, 20);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime(null));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, Time.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseTime(INVALID_TIME_CLOSED));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, TimeParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e ParserUtil.parseTime(INVALID_TIME_FORMAT));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time expectedTime \u003d new Time(12, 0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time expectedTime \u003d new Time(12, 0);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 71,
      "xz0127": 6,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // no remark specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        //assertParseFailure(parser, \" 1 \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, PREFIX_REMARK + VALID_REMARK_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // no index and no index and remark specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_REMARK_INDEX,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseFailure(parser, INVALID_REMARK_EXCEED_LIMIT, Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void parse_allFieldPresents_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String userInput \u003d \" 1 \" + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PATIENT, new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String userInput2 \u003d \" 2 \" + REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand expectedCommand2 \u003d new RemarkCommand(INDEX_SECOND_PATIENT, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseSuccess(parser, userInput2, expectedCommand2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        String userInput3 \u003d \" 1 \" + REMARK_DESC_EMPTY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        RemarkCommand expectedCommand3 \u003d new RemarkCommand(INDEX_FIRST_PATIENT, new Remark(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertParseSuccess(parser, userInput3, expectedCommand3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TimeParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse_invalidTimeString_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(ParseException.class, TimeParserUtil.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e TimeParserUtil.parse(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeParserUtil.parse(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // formatted time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(14, 45), TimeParserUtil.parse(\"02:45PM\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parse(\"morning\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByTimeFormat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeParserUtil.parseByTimeFormat(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // 24h format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(23, 59), TimeParserUtil.parseByTimeFormat(\"2359\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(2, 11), TimeParserUtil.parseByTimeFormat(\"0211\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // 12h time format with min"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(0, 55), TimeParserUtil.parseByTimeFormat(\"12:55am\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 55), TimeParserUtil.parseByTimeFormat(\"12:55pm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(2, 35), TimeParserUtil.parseByTimeFormat(\"02:35AM\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(14, 35), TimeParserUtil.parseByTimeFormat(\"2:35PM\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // with spacing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(0, 55), TimeParserUtil.parseByTimeFormat(\"12:55 am\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(2, 35), TimeParserUtil.parseByTimeFormat(\"02:35 AM\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // 12h time format with no min given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(3, 0), TimeParserUtil.parseByTimeFormat(\"3am\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(15, 0), TimeParserUtil.parseByTimeFormat(\"3pM\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(10, 0), TimeParserUtil.parseByTimeFormat(\"10AM\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByTimeFormat(\"10PM\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // with spacing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(10, 0), TimeParserUtil.parseByTimeFormat(\"10 AM\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByTimeFormat(\"10 PM\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(TimeParserUtil.parseByNaturalTime(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseByNaturalTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeParserUtil.parseByNaturalTime(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Morning"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parseByNaturalTime(\"morning\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parseByNaturalTime(\"sunrise\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(8, 0), TimeParserUtil.parseByNaturalTime(\"breakfast\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Noon"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"NOON\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"afterNoon\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"after-noon\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(12, 0), TimeParserUtil.parseByNaturalTime(\"lunch\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Evening"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(19, 0), TimeParserUtil.parseByNaturalTime(\"eve\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(19, 0), TimeParserUtil.parseByNaturalTime(\"eVeNiNg\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(19, 0), TimeParserUtil.parseByNaturalTime(\"dinner\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Night"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByNaturalTime(\"night\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByNaturalTime(\"bedTime\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(22, 0), TimeParserUtil.parseByNaturalTime(\"Bed-Time\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Midnight"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalTime.of(23, 59), TimeParserUtil.parseByNaturalTime(\"midnight\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // return null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(TimeParserUtil.parseByNaturalTime(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGN_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.DateMatchesPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_noArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        ViewCommand expectedCommand \u003d new ViewCommand(preparePredicate(VALID_DATE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseSuccess(parser, ASSIGN_DATE, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // invalid prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, \" a/\" + VALID_DATE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC, DateParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Parses {@code input} into a {@code DateMatchesPredicate}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private DateMatchesPredicate preparePredicate(String input) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return new DateMatchesPredicate(ParserUtil.parseDate(input));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AppointmentBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.exceptions.OverlappingAppointmentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private final AppointmentBook appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(Collections.emptyList(), appointmentBook.getAppointmentList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appointmentBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void resetData_withValidReadOnlyPatientBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook newData \u003d getTypicalAppointmentBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(newData, appointmentBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void resetData_withOverlappingAppointments_throwsOverlappingAppointmentException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Two patients with the overlapping appointments."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedAppointmentOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(9, 30)).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APPOINTMENT, editedAppointmentOne);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBookStub newData \u003d new AppointmentBookStub(newAppointments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(OverlappingAppointmentException.class, () -\u003e appointmentBook.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void hasAppointment_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appointmentBook.hasAppointment(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void hasAppointment_nullAppointment_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentBook.hasAppointment(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void hasAppointment_appointmentInAppointmentBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBook.addAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentBook.hasAppointment(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hasAppointment_appointmentWithOverlapsInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBook.addAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment overlappingAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT).withPatient(BENSON)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusMinutes(1))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentBook.hasOverlapsWith(overlappingAppointment));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        overlappingAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT).withPatient(BENSON)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusMinutes(1),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        ALICE_APPOINTMENT.getEndTime().getTime().minusMinutes(1))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(appointmentBook.hasOverlapsWith(overlappingAppointment));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void removeAppointment_appointmentInAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.addAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.removeAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(appointmentBook.hasAppointment(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void removeAppointment_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appointmentBook.removeAppointment(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deleteAppointmentWithPatients_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appointmentBook.deleteAppointmentsWithPatients(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void deleteAppointmentWithPatients_patientInAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.addAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.deleteAppointmentsWithPatients(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(appointmentBook.hasAppointment(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateAppointmentsWithPatients_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appointmentBook"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .updateAppointmentsWithPatients(ALICE, null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void updateAppointmentsWithPatients_patientInAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        appointmentBook.addAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBook.updateAppointmentsWithPatients(ALICE, BENSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(appointmentBook.getAppointmentList().get(0).equals(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e appointmentBook.getAppointmentList().remove(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void getAppointmentBookStatistics_patientInAppointmentBook_returnsTrue() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBookStub newData \u003d new AppointmentBookStub(newAppointments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(appointmentBook.getAppointmentBookStatistics().equals(newData.getAppointmentBookStatistics()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void getAppointmentBookStatistics_patinetInAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        //Todo: change the date to a date in this week."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment editedAppointmentOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(LocalDate.of(2020, 10, 22)).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointmentBook.addAppointment(editedAppointmentOne);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APPOINTMENT, editedAppointmentOne);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBookStub newData \u003d new AppointmentBookStub(newAppointments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(appointmentBook.getAppointmentBookStatistics().equals(newData.getAppointmentBookStatistics()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     * A stub ReadOnlyAppointmentBook whose appointments list can violate interface constraints."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private static class AppointmentBookStub implements ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        AppointmentBookStub(Collection\u003cAppointment\u003e patients) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            this.appointments.setAll(patients);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return appointments;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        public AppointmentStatistics getAppointmentBookStatistics() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "            return new AppointmentStatistics(0, 0, 0, 0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 44,
      "xz0127": 39,
      "Avalionnet": 2,
      "YangYue128-helen": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AppointmentStatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentStatisticsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void toStringBasedOn() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBook newAppointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(\"Today: \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \"0 upcoming  |  \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \"0 done \\n\" + \"This Week:\\n\" + \"0 upcoming  |  \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                + \"0 done\", newAppointmentBook.getAppointmentBookStatistics().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void getStats() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentStatistics stats \u003d new AppointmentStatistics(5, 2, 3, 6);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(5, stats.getNumOfDoneApptInToday());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(2, stats.getNumOfUpcomingApptInToday());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(3, stats.getNumOfDoneApptInThisWeek());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(6, stats.getNumOfUpcomingApptInThisWeek());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYue128-helen": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.model.ModelManager.isValidModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.BENSON_APPOINTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.CARL_APPOINTMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.testutil.AppointmentBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.testutil.PatientBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(new PatientBook(), new PatientBook(modelManager.getPatientBook()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertEquals(new AppointmentBook(), new AppointmentBook(modelManager.getAppointmentBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        userPrefs.setPatientBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userPrefs.setAppointmentBookFilePath(Paths.get(\"appointment/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4, 0.5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        userPrefs.setPatientBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userPrefs.setAppointmentBookFilePath(Paths.get(\"new/appointment/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4, 0.5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void setPatientBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientBookFilePath(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void setPatientBookFilePath_validPath_setsPatientBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        modelManager.setPatientBookFilePath(path);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(path, modelManager.getPatientBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setAppointmentBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAppointmentBookFilePath(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setAppointmentBookFilePath_validPath_setsAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Path path \u003d Paths.get(\"appointment/book/file/path\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        modelManager.setAppointmentBookFilePath(path);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(path, modelManager.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hasPatient_patientNotInPatientBook_returnsFalse() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hasPatient_patientInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidModel_inconsistentPatientAndAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        PatientBook patientBook \u003d new PatientBookBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBookBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withAppointment(ALICE_APPOINTMENT).withAppointment(CARL_APPOINTMENT).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(isValidModel(patientBook, appointmentBook));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidModel_consistentPatientAndAppointmentBook_returnsFalse() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        PatientBook patientBook \u003d new PatientBookBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBookBuilder().withAppointment(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withAppointment(ALICE_APPOINTMENT_2).withAppointment(BENSON_APPOINTMENT).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isValidModel(patientBook, appointmentBook));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patientBook \u003d getTypicalPatientBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBook \u003d getTypicalAppointmentBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(isValidModel(patientBook, appointmentBook));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook patientBook \u003d new PatientBookBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBookBuilder()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withAppointment(ALICE_APPOINTMENT).withAppointment(BENSON_APPOINTMENT).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook differentPatientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        AppointmentBook differentAppointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        modelManager \u003d new ModelManager(patientBook, appointmentBook, userPrefs);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(patientBook, appointmentBook, userPrefs);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // different patientBook -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPatientBook, appointmentBook, userPrefs)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // different appointmentBook -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientBook, differentAppointmentBook, userPrefs)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientBook, appointmentBook, userPrefs)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        differentUserPrefs.setPatientBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        differentUserPrefs.setAppointmentBookFilePath(Paths.get(\"differentFilePath2\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientBook, appointmentBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 40,
      "xz0127": 13,
      "Avalionnet": 21,
      "-": 105,
      "YangYue128-helen": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PatientBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class PatientBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private final PatientBook patientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(Collections.emptyList(), patientBook.getPatientList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void resetData_withValidReadOnlyPatientBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook newData \u003d getTypicalPatientBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(newData, patientBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBookStub newData \u003d new PatientBookStub(newPatients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e patientBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientBook.hasPatient(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hasPatient_patientNotInPatientBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(patientBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hasPatient_patientInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(patientBook.hasPatient(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInPatientBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.addPatient(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(patientBook.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patientBook.getPatientList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * A stub ReadOnlyPatientBook whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static class PatientBookStub implements ReadOnlyPatientBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBookStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 15,
      "Avalionnet": 24,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void setPatientBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setAppointmentBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAppointmentBookFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 5,
      "Avalionnet": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentComparatorTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final AppointmentComparator comparator \u003d new AppointmentComparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsBefore_returnNegative() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 2)).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 3)).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(-1, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, same date (not overlapping)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(9, 0), LocalTime.of(10, 0)).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(10, 30), LocalTime.of(11, 0)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(-1, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsAfter_returnPositive() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 3)).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2020, 2, 2)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, same date (not overlapping)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(10, 0), LocalTime.of(11, 0)).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(9, 0), LocalTime.of(10, 0)).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void compare_appointmentIsOverlapping_returnZero() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(17, 0), LocalTime.of(18, 0)).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(17, 30), LocalTime.of(18, 40)).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentBefore \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(17, 0), LocalTime.of(19, 0)).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentAfter \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(17, 30), LocalTime.of(18, 30)).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentAfter));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different appointment time, but overlapping"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentAfter, appointmentBefore));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same appointment time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentAfter, appointmentAfter));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, comparator.compare(appointmentBefore, appointmentBefore));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentIdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentIdTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date testDate \u003d new Date(2020, 2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time testTime \u003d new Time(12, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Date testDate1 \u003d new Date(2019, 11, 24);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Time testTime2 \u003d new Time(13, 30);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AppointmentId(null, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_correctValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"202002021200\", new AppointmentId(testDate, testTime).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"201911241200\", new AppointmentId(testDate1, testTime).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"202002021330\", new AppointmentId(testDate, testTime2).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"201911241330\", new AppointmentId(testDate1, testTime2).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentId appointmentIdTest \u003d new AppointmentId(testDate, testTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentId appointmentIdTestCopy \u003d new AppointmentId(testDate, testTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentIdTest.equals(appointmentIdTestCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(appointmentIdTest.equals(appointmentIdTest));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate1, testTime)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate, testTime2)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(appointmentIdTest.equals(new AppointmentId(testDate1, testTime2)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.BENSON_APPOINTMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, null, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e new Appointment(null, null, null, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_invalidStartAndEndTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2024, 1, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalTime time \u003d LocalTime.of(13, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start and end time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e new Appointment(new Date(date), new Time(time), new Time(time), ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // start time \u003e end time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            -\u003e new Appointment(new Date(date), new Time(time), new Time(time.minusHours(1)), ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void getIsDoneStatus() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.getIsDoneStatus());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment doneAppointment \u003d ALICE_APPOINTMENT.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(doneAppointment.getIsDoneStatus());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void hasPatient_returnTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.hasPatient(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withTags(\"others\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different address"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void hasPatient_returnFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.hasPatient(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void setPatient() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ALICE_APPOINTMENT.setPatient(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.setPatient(BOB).hasPatient(BOB));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.setPatient(BOB).hasPatient(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void startAtSameTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.startAtSameTime(ALICE_APPOINTMENT.getDate(), ALICE_APPOINTMENT.getStartTime()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.startAtSameTime(ALICE_APPOINTMENT.getDate(), ALICE_APPOINTMENT.getEndTime()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isOverlapping() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ALICE_APPOINTMENT.isOverlapping(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isOverlapping(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2019, 12, 20)).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2019, 12, 20))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(13, 30), LocalTime.of(14, 0))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same date, same time, different patient -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatient(BOB).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later date -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isOverlapping(editedOne));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ALICE_APPOINTMENT.isBefore(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isBefore(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start time and same date, different patientId -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatient(BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isBefore(editedOne));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ALICE_APPOINTMENT.isAfter(null));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isAfter(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same start time and same date, different patientId -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatient(BOB).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusMinutes(30))"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // later start time, same date (not overlapping) -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().plusHours(1))"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isAfter(editedOne));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void isInSameWeek() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ALICE_APPOINTMENT.isInSameWeek(null));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isInSameWeek(ALICE_APPOINTMENT.getDate()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // earlier date -\u003e returns true"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().minusDays(1))"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isInSameWeek(editedOne.getDate()));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // earlier start time, same date (not overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusHours(1))"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isInSameWeek(editedOne.getDate()));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // earlier start time, same date (overlapping) -\u003e returns true"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withTime(ALICE_APPOINTMENT.getStartTime().getTime().minusMinutes(30))"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isInSameWeek(editedOne.getDate()));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // earlier date -\u003e returns false"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().plusDays(2))"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.isInSameWeek(editedOne.getDate()));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // earlier date -\u003e returns true"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .withDate(ALICE_APPOINTMENT.getDate().getDate().plusDays(1))"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.isInSameWeek(editedOne.getDate()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment appointmentOneCopy \u003d new AppointmentBuilder(ALICE_APPOINTMENT).build();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.equals(appointmentOneCopy));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(ALICE_APPOINTMENT.equals(ALICE_APPOINTMENT));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.equals(null));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.equals(5));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different Appointment -\u003e returns false"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.equals(BENSON_APPOINTMENT));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Appointment editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withDate(LocalDate.of(2010, 10, 10)).build();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.equals(editedOne));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withTime(LocalTime.of(15, 15)).build();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.equals(editedOne));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedOne \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .withPatient(BOB).build();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE_APPOINTMENT.equals(editedOne));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 301,
      "YangYue128-helen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/DateMatchesPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DateMatchesPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date firstPredicateDate \u003d new Date(2020, 12, 12);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date secondPredicateDate \u003d new Date(2020, 12, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate firstPredicate \u003d new DateMatchesPredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate secondPredicate \u003d new DateMatchesPredicate(secondPredicateDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        DateMatchesPredicate firstPredicateCopy \u003d new DateMatchesPredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void test_dateMatches_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DateMatchesPredicate predicate \u003d new DateMatchesPredicate(new Date(2020, 12, 12));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new AppointmentBuilder().withDate(LocalDate.of(2020, 12, 12)).build()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public void test_dateDoesNotMatch_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DateMatchesPredicate predicate \u003d new DateMatchesPredicate(new Date(2020, 12, 2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(predicate.test("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new AppointmentBuilder().withDate(LocalDate.of(2020, 12, 12)).build()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 10,
      "ZhangWanlin98": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDate currDate \u003d LocalDate.of(2020, 5, 5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toStringBasedOn() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDate testDate \u003d LocalDate.of(2020, 6, 6);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"Saturday, Jun 06 2020\", new Date(testDate).toStringBasedOn(currDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"Saturday, Jun 06 2020 (Today)\", new Date(testDate).toStringBasedOn(testDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date testDate \u003d new Date(2020, 6, 6);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testDate.isBefore(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is before input --\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isBefore(new Date(2020, 7, 6)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isBefore(new Date(2020, 6, 7)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is same as input --\u003e false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(testDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(2020, 6, 6)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is after input --\u003e false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(2020, 5, 6)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isBefore(new Date(2020, 6, 5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date testDate \u003d new Date(2020, 6, 6);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testDate.isAfter(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is after input --\u003e true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isAfter(new Date(2020, 5, 6)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testDate.isAfter(new Date(2020, 6, 5)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is same as input --\u003e false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(testDate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(2020, 6, 6)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // date is before input --\u003e false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(2020, 7, 6)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testDate.isAfter(new Date(2020, 6, 7)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public void isInSameWeek() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        Date testDate \u003d new Date(2020, 10, 19);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // date is after input --\u003e true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(testDate.isInSameWeek(new Date(2020, 10, 19)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertTrue(testDate.isInSameWeek(new Date(2020, 10, 25)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        // date is before input --\u003e false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(testDate.isInSameWeek(new Date(2020, 7, 6)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(testDate.isInSameWeek(new Date(2020, 6, 7)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(testDate.isInSameWeek(new Date(2020, 10, 18)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        assertFalse(testDate.isInSameWeek(new Date(2020, 10, 26)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date dateTest \u003d new Date(2020, 10, 10);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Date dateTestCopy \u003d new Date(2020, 10, 10);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(dateTest.equals(dateTestCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(dateTest.equals(dateTest));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(dateTest.equals(new Date(2020, 6, 6)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 88,
      "YangYue128-helen": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/NaturalDayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class NaturalDayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MONDAY.contains(\"Monday\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TUESDAY.contains(\"Tues\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.WEDNESDAY.contains(\"Wed\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.THURSDAY.contains(\"Thursday\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.FRIDAY.contains(\"friDay\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.SATURDAY.contains(\"SATURDAY\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.SUNDAY.contains(\"sun\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TODAY.contains(\"tdy\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.TOMORROW.contains(\"tmr\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.YESTERDAY.contains(\"yesterday\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MIDNIGHT.contains(\"midnight\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.NOON.contains(\"Noon\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.MORNING.contains(\"breakfast\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.EVENING.contains(\"eve\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(NaturalDay.NIGHT.contains(\"night\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.MIDNIGHT.contains(\"Monday\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.EVENING.contains(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.FRIDAY.contains(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(NaturalDay.WEDNESDAY.contains(\"123\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NaturalDay.parse(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // natural day found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MONDAY, NaturalDay.parse(\"Monday\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TUESDAY, NaturalDay.parse(\"Tues\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.WEDNESDAY, NaturalDay.parse(\"Wed\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.THURSDAY, NaturalDay.parse(\"Thursday\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.FRIDAY, NaturalDay.parse(\"friDay\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.SATURDAY, NaturalDay.parse(\"SATURDAY\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.SUNDAY, NaturalDay.parse(\"sun\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TODAY, NaturalDay.parse(\"tdy\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.TOMORROW, NaturalDay.parse(\"tmr\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.YESTERDAY, NaturalDay.parse(\"yesterday\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MIDNIGHT, NaturalDay.parse(\"midnight\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.NOON, NaturalDay.parse(\"Noon\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.MORNING, NaturalDay.parse(\"breakfast\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.EVENING, NaturalDay.parse(\"eve\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(NaturalDay.NIGHT, NaturalDay.parse(\"night\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // no natural day found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(NaturalDay.parse(\"\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNull(NaturalDay.parse(\"123\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // valid local times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourBeforeOpening \u003d Time.OPENING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourAfterClosing \u003d Time.CLOSING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // invalid local times"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourAfterOpening \u003d Time.OPENING_TIME.plusHours(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalTime oneHourBeforeClosing \u003d Time.CLOSING_TIME.minusHours(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(oneHourBeforeOpening));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(oneHourAfterClosing));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(oneHourBeforeOpening));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(oneHourAfterClosing));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidTime(LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // valid times"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(LocalTime.NOON));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(oneHourAfterOpening));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidTime(oneHourBeforeClosing));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isValidStartTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidStartTime(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // invalid times"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(oneHourBeforeOpening));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(oneHourAfterClosing));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(Time.CLOSING_TIME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(Time.isValidStartTime(LocalTime.MIDNIGHT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // valid times"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidStartTime(LocalTime.NOON));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidStartTime(oneHourAfterOpening));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(Time.isValidStartTime(oneHourBeforeClosing));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isBefore() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testTime.isBefore(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is before input --\u003e true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isBefore(new Time(15, 0)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isBefore(new Time(oneHourBeforeClosing)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is equal to input --\u003e false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(LocalTime.NOON)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is after input --\u003e false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(11, 0)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isBefore(new Time(oneHourAfterOpening)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void isAfter() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time testTime \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null time check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testTime.isAfter(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is after input --\u003e true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isAfter(new Time(11, 0)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(testTime.isAfter(new Time(oneHourAfterOpening)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is equal to input --\u003e false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(LocalTime.NOON)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // time is before input --\u003e false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(15, 0)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(testTime.isAfter(new Time(oneHourBeforeClosing)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time timeTest \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Time timeTestCopy \u003d new Time(LocalTime.NOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(timeTest.equals(timeTestCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(timeTest.equals(timeTest));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different dates -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(timeTest.equals(new Time(13, 0)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 12,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patient.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void isSamePatient() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // same name, same phone, same nric, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 10,
      "xz0127": 23,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_6;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_7;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.SAMPLE_REMARK_8;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_6;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.STRING_REMARK_8;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_ONE_NINETY_NINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_THREE_HUNDRED;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_TWO_FIVE_ZERO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_TWO_HUNDRED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.RemarkUtil.WORDS_TWO_HUNDRED_ONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void constructor_invalidRemark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(WORDS_TWO_FIVE_ZERO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(WORDS_THREE_HUNDRED));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(WORDS_TWO_HUNDRED_ONE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void isValidRemark_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\" \")); // spaces only, resetting remark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"#$%^\u0026\")); // contains symbols"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(WORDS_ONE_NINETY_NINE)); // large input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(Remark.isValidRemark(WORDS_TWO_HUNDRED)); // maximum input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void isValidRemark_null_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void isValidRemark_input_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(Remark.isValidRemark(WORDS_TWO_FIVE_ZERO));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(Remark.isValidRemark(WORDS_THREE_HUNDRED));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(Remark.isValidRemark(WORDS_THREE_HUNDRED + WORDS_TWO_FIVE_ZERO));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(Remark.isValidRemark(WORDS_TWO_HUNDRED_ONE)); // boundary range input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_1.equals(new Remark(STRING_REMARK_1)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_2.equals(new Remark(STRING_REMARK_2)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_3.equals(new Remark(STRING_REMARK_3)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_4.equals(new Remark(STRING_REMARK_4)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_5.equals(new Remark(STRING_REMARK_5)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_6.equals(new Remark(STRING_REMARK_6)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_7.equals(new Remark(STRING_REMARK_7)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_8.equals(new Remark(STRING_REMARK_8)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_1.equals(SAMPLE_REMARK_1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_7.equals(SAMPLE_REMARK_7));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void equals_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_1.equals(new Remark(STRING_REMARK_2)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_2.equals(new Remark(STRING_REMARK_3)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_3.equals(new Remark(STRING_REMARK_4)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_4.equals(new Remark(STRING_REMARK_5)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_5.equals(new Remark(STRING_REMARK_6)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_6.equals(new Remark(STRING_REMARK_7)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_7.equals(new Remark(STRING_REMARK_8)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(SAMPLE_REMARK_8.equals(new Remark(STRING_REMARK_1)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void hashCode_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_1.hashCode() \u003d\u003d STRING_REMARK_1.hashCode());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_3.hashCode() \u003d\u003d STRING_REMARK_3.hashCode());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_8.hashCode() \u003d\u003d STRING_REMARK_8.hashCode());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_1.toString() \u003d\u003d STRING_REMARK_1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_3.toString() \u003d\u003d STRING_REMARK_3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertTrue(SAMPLE_REMARK_8.toString() \u003d\u003d STRING_REMARK_8);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAppointment.TIME_IN_WRONG_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.BENSON_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class JsonAdaptedAppointmentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalTime INVALID_START_TIME_ORDER \u003d LocalTime.of(15, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalTime INVALID_END_TIME_ORDER \u003d LocalTime.of(10, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalTime INVALID_TIME \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final JsonAdaptedPatient INVALID_PATIENT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new JsonAdaptedPatient(\"R@chel\", \"+651234\", \" \", null, \"a123456G\", \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalDate VALID_DATE \u003d BENSON_APPOINTMENT.getDate().getDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalTime VALID_START_TIME \u003d BENSON_APPOINTMENT.getStartTime().getTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final LocalTime VALID_END_TIME \u003d BENSON_APPOINTMENT.getEndTime().getTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final JsonAdaptedPatient VALID_PATIENT \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Boolean VALID_DONE_STATUS \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment patient \u003d new JsonAdaptedAppointment(BENSON_APPOINTMENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(BENSON_APPOINTMENT, patient.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(null, VALID_START_TIME, VALID_END_TIME, VALID_DONE_STATUS, VALID_PATIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, INVALID_TIME, VALID_END_TIME, VALID_DONE_STATUS, VALID_PATIENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, null, VALID_END_TIME, VALID_DONE_STATUS, VALID_PATIENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, VALID_START_TIME, INVALID_TIME, VALID_DONE_STATUS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        VALID_PATIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, VALID_START_TIME, null, VALID_DONE_STATUS, VALID_PATIENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_endTimeBeforeStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, INVALID_START_TIME_ORDER, INVALID_END_TIME_ORDER,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        VALID_DONE_STATUS, VALID_PATIENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, TIME_IN_WRONG_ORDER, appointment::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullDoneStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, VALID_START_TIME, VALID_END_TIME, null, VALID_PATIENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Done Status\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_invalidPatient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, VALID_START_TIME, VALID_END_TIME, VALID_DONE_STATUS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        INVALID_PATIENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, appointment::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullPatient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedAppointment appointment \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAdaptedAppointment(VALID_DATE, VALID_START_TIME, VALID_END_TIME, VALID_DONE_STATUS, null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Patient.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"a123456G\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_TAGS, VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, null, VALID_TAGS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                INVALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                null, VALID_REMARK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xz0127"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ADDRESS, invalidTags,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                        VALID_NRIC, VALID_REMARK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        assertThrows(IllegalValueException.class, patient::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                VALID_NRIC, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 28,
      "xz0127": 24,
      "Avalionnet": 9,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAppointmentBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.HOON_APPOINTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.IDA_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class JsonAppointmentBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \"test\", \"data\", \"JsonAppointmentBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readAppointmentBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAppointmentBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(readAppointmentBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppointmentBook(\"notJsonFormatAppointmentBook.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readAppointmentBook_invalidAppointmentBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppointmentBook(\"invalidAppointmentBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readAppointmentBook_invalidAndValidAppointmentBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppointmentBook(\"invalidAndValidAppointmentBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readAppointmentBook_overlappingAppointmentBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppointmentBook(\"overlappingAppointmentBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readAndSaveAppointmentBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAppointmentBook.json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook original \u003d getTypicalAppointmentBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAppointmentBookStorage jsonAppointmentBookStorage \u003d new JsonAppointmentBookStorage(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        jsonAppointmentBookStorage.saveAppointmentBook(original, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ReadOnlyAppointmentBook readBack \u003d jsonAppointmentBookStorage.readAppointmentBook(filePath).get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(original, new AppointmentBook(readBack));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        original.addAppointment(HOON_APPOINTMENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // TODO: add after implementation of remove appointment"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // original.removeAppointment(ALICE_APPOINTMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        jsonAppointmentBookStorage.saveAppointmentBook(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        readBack \u003d jsonAppointmentBookStorage.readAppointmentBook(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(original, new AppointmentBook(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        original.addAppointment(IDA_APPOINTMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        jsonAppointmentBookStorage.saveAppointmentBook(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        readBack \u003d jsonAppointmentBookStorage.readAppointmentBook().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(original, new AppointmentBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveAppointmentBook_nullAppointmentBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAppointmentBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveAppointmentBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAppointmentBook(new AppointmentBook(), null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new JsonAppointmentBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                .readAppointmentBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Saves {@code appointmentBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new JsonAppointmentBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    .saveAppointmentBook(appointmentBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPatientBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class JsonPatientBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void readPatientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPatientBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertFalse(readPatientBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPatientBook(\"notJsonFormatPatientBook.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readPatientBook_invalidPatientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPatientBook(\"invalidPatientBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void readPatientBook_invalidAndValidPatientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPatientBook(\"invalidAndValidPatientBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void readAndSavePatientBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPatientBook.json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook original \u003d getTypicalPatientBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonPatientBookStorage jsonPatientBookStorage \u003d new JsonPatientBookStorage(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        jsonPatientBookStorage.savePatientBook(original, filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ReadOnlyPatientBook readBack \u003d jsonPatientBookStorage.readPatientBook(filePath).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(original, new PatientBook(readBack));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        jsonPatientBookStorage.savePatientBook(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        readBack \u003d jsonPatientBookStorage.readPatientBook(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(original, new PatientBook(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        jsonPatientBookStorage.savePatientBook(original); // file path not specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        readBack \u003d jsonPatientBookStorage.readPatientBook().get(); // file path not specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(original, new PatientBook(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void savePatientBook_nullPatientBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePatientBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void savePatientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePatientBook(new PatientBook(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPatientBook\u003e readPatientBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new JsonPatientBookStorage(Paths.get(filePath)).readPatientBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Saves {@code patientBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private void savePatientBook(ReadOnlyPatientBook patientBook, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            new JsonPatientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                    .savePatientBook(patientBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 19,
      "Avalionnet": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAppointmentBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.testutil.TypicalAppointments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class JsonSerializableAppointmentBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableAppointmentBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path TYPICAL_APPOINTMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAppointmentBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path INVALID_APPOINTMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAppointmentBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path DUPLICATE_APPOINTMENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"overlappingAppointmentBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_typicalAppointmentFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonSerializableAppointmentBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_APPOINTMENT_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                JsonSerializableAppointmentBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook appointmentBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook typicalAppointmentBook \u003d TypicalAppointments.getTypicalAppointmentBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(appointmentBookFromFile, typicalAppointmentBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_invalidAppointmentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonSerializableAppointmentBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_APPOINTMENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                JsonSerializableAppointmentBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonSerializableAppointmentBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_APPOINTMENT_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                JsonSerializableAppointmentBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAppointmentBook.MESSAGE_OVERLAPPING_APPOINTMENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePatientBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class JsonSerializablePatientBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonSerializablePatientBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                JsonSerializablePatientBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook patientBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook typicalPatientsPatientBook \u003d TypicalPatients.getTypicalPatientBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(patientBookFromFile, typicalPatientsPatientBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonSerializablePatientBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                JsonSerializablePatientBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        JsonSerializablePatientBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "                JsonSerializablePatientBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePatientBook.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "Avalionnet": 13,
      "xz0127": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100, 0.3));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        userPrefs.setPatientBookFilePath(Paths.get(\"patientbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userPrefs.setAppointmentBookFilePath(Paths.get(\"appointmentbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2, 0.3));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5, 0.7));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 4,
      "Avalionnet": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalAppointments.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.ReadOnlyPatientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonPatientBookStorage patientBookStorage \u003d new JsonPatientBookStorage(getTempFilePath(\"pb\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        JsonAppointmentBookStorage appointmentBookStorage \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                new JsonAppointmentBookStorage(getTempFilePath(\"appt\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        storageManager \u003d new StorageManager(patientBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6, 0.6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void patientBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "         * {@link JsonPatientBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        PatientBook original \u003d getTypicalPatientBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        storageManager.savePatientBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        ReadOnlyPatientBook retrieved \u003d storageManager.readPatientBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertEquals(original, new PatientBook(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public void getPatientBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        assertNotNull(storageManager.getPatientBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void appointmentBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         * {@link JsonAppointmentBookStorage} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAppointmentBookStorageTest} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        AppointmentBook original \u003d getTypicalAppointmentBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        storageManager.saveAppointmentBook(original);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ReadOnlyAppointmentBook retrieved \u003d storageManager.readAppointmentBook().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(original, new AppointmentBook(retrieved));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertNotNull(storageManager.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 27,
      "Avalionnet": 10,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * A utility class to help with building AppointmentBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " *     {@code AppointmentBook ab \u003d new AppointmentBookBuilder().withAppointment(appointment_1\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "public class AppointmentBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    private AppointmentBook appointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBookBuilder(AppointmentBook appointmentBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        this.appointmentBook \u003d appointmentBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Adds a new {@code Appointment} to the {@code AppointmentBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBookBuilder withAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        appointmentBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    public AppointmentBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 1,
      "YangYue128-helen": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class to help with building Appointment objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AppointmentBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2020, 12, 23);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final LocalTime DEFAULT_START_TIME \u003d LocalTime.of(13, 30);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Duration DEFAULT_DURATION \u003d Duration.ofHours(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Patient DEFAULT_PATIENT \u003d ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final boolean DEFAULT_DONE_STATUS \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an {@code AppointmentBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d new Time(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        endTime \u003d new Time(DEFAULT_START_TIME.plus(DEFAULT_DURATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patient \u003d DEFAULT_PATIENT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        isDone \u003d DEFAULT_DONE_STATUS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder(Appointment appointmentToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        date \u003d appointmentToCopy.getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        startTime \u003d appointmentToCopy.getStartTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        endTime \u003d appointmentToCopy.getEndTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        patient \u003d appointmentToCopy.getPatient();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        isDone \u003d appointmentToCopy.getIsDoneStatus();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code Date} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Same as {@link #withTime(LocalTime, LocalTime)} but using the {@code DEFAULT_DURATION}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return withTime(startTime, startTime.plus(DEFAULT_DURATION));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the start time and end time of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withTime(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.startTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code Patient} for the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the done status for the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AppointmentBuilder withDoneStatus(boolean isDone) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Build the {@code Appointment}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Appointment build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new Appointment(date, startTime, endTime, patient, isDone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DateTimeLoaderBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYue128-helen"
        },
        "content": "import seedu.address.logic.commands.DateTimeLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.DateParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.TimeParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class to help with building DateTimeLoader objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DateTimeLoaderBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final DateTimeLoader loader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder(DateTimeLoader loader) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.loader \u003d new DateTimeLoader(loader);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Returns an {@code DateTimeLoaderBuilder} with fields containing {@code appointment}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder(Appointment appointment) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader \u003d new DateTimeLoader();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentDate(appointment.getDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentTime(appointment.getStartTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code date} of the {@code DateTimeLoader} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder withDate(String date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            loader.setAppointmentDate(new Date(DateParserUtil.parse(date)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Sets the {@code time} of the {@code DateTimeLoader} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoaderBuilder withTime(String time) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            loader.setAppointmentTime(new Time(TimeParserUtil.parse(time)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DateTimeLoader build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return loader;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 17,
      "ZhangWanlin98": 43,
      "YangYue128-helen": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DurationSupporterBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand.DurationSupporter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.DateParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.TimeParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.appointment.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " * A utility class to help with building DurationSupporter object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "public class DurationSupporterBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    private final DurationSupporter loader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporterBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader \u003d new DurationSupporter();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporterBuilder(DurationSupporter loader) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        this.loader \u003d new DurationSupporter(loader);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Returns an {@code DurationSupporterBuilder} with fields containing {@code Appointment}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporterBuilder(Appointment appointment) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader \u003d new DurationSupporter();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentDate(appointment.getDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentTime(appointment.getStartTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        loader.setAppointmentDuration(appointment.getDuration());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Sets the {@code Time} of the {@code DurationSupporterBuilder} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporterBuilder withDate(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            loader.setAppointmentDate(new Date(DateParserUtil.parse(date)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Sets the {@code Time} of the {@code DurationSupporterBuilder} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporterBuilder withTime(String time) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            loader.setAppointmentTime(new Time(TimeParserUtil.parse(time)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Sets the {@code Duration} of the {@code DurationSupporterBuilder} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporterBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            loader.setAppointmentDuration(ParserUtil.parseDuration(duration));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            // ignore, fallthrough expected"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public DurationSupporter build() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return loader;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangWanlin98": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.descriptor \u003d new EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setAddress(patient.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setTags(patient.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setNric(patient.getNric());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Nric} of the {@code Nric} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * A utility class to help with building Patientbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " *     {@code PatientBook pb \u003d new PatientBookBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class PatientBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private PatientBook patientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook \u003d new PatientBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBookBuilder(PatientBook patientBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.patientBook \u003d patientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Adds a new {@code Patient} to the {@code PatientBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBookBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        patientBook.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return patientBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 1,
      "Avalionnet": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xz0127"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1234567U\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"This is a test remark :)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        nric \u003d patientToCopy.getNric();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        remark \u003d patientToCopy.getRemark();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Sets the {@code Nric} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Sets the {@code Remark} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public PatientBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xz0127"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        return new Patient(name, phone, address, tags, nric, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xz0127"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 94,
      "Avalionnet": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns an add command string for adding the {@code patient}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static String getAddCommand(Patient patient) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the part of command string for the given {@code patient}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_NRIC + patient.getNric().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        patient.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 2,
      "xz0127": 16,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RemarkUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.patient.Remark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " * A utility class for Remark."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "public class RemarkUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String WORDS_TWO_FIVE_ZERO \u003d \"A wonderful serenity has taken possession of my entire soul,\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" like these sweet mornings of spring which I enjoy with my whole heart. \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"I am alone, and feel the charm of existence in this spot, which was created \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"for the bliss of souls like mine. I am so happy, my dear friend, so absorbed \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"in the exquisite sense of mere tranquil existence, that I neglect my talents. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"I should be incapable of drawing a single stroke at the present moment; and yet \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"I feel that I never was a greater artist than now. When, while the lovely valley \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"teems with vapour around me, and the meridian sun strikes the upper surface of\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" the impenetrable foliage of my trees, and but a few stray gleams steal into the \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"inner sanctuary, I throw myself down among the tall grass by the trickling stream; \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"and, as I lie close to the earth, a thousand unknown plants are noticed by me: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"when I hear the buzz of the little world among the stalks, and grow familiar with \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"the countless indescribable forms of the insects and flies, then I feel the presence \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"of the Almighty, who formed us in his own image, and the breath of that universal \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"love which bears and sustains us, as it floats around us in an eternity of bliss; and \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"then, my friend, when darkness overspreads my eyes, and heaven and earth seem to dwell\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" in my soul and absorb its power, like the form of a one one one\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String WORDS_THREE_HUNDRED \u003d \"A wonderful serenity has taken possession of my entire soul,\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" like these sweet mornings of spring which I enjoy with my whole heart. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"I am alone, and feel the charm of existence in this spot, which was created \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"for the bliss of souls like mine. I am so happy, my dear friend, so absorbed \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"in the exquisite sense of mere tranquil existence, that I neglect my talents. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"I should be incapable of drawing a single stroke at the present moment; and yet \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"I feel that I never was a greater artist than now. When, while the lovely valley \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"teems with vapour around me, and the meridian sun strikes the upper surface of\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" the impenetrable foliage of my trees, and but a few stray gleams steal into the \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"inner sanctuary, I throw myself down among the tall grass by the trickling stream; \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"and, as I lie close to the earth, a thousand unknown plants are noticed by me: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"when I hear the buzz of the little world among the stalks, and grow familiar with \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"the countless indescribable forms of the insects and flies, then I feel the presence \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"of the Almighty, who formed us in his own image, and the breath of that universal \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"love which bears and sustains us, as it floats around us in an eternity of bliss; and \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"then, my friend, when darkness overspreads my eyes, and heaven and earth seem to dwell\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" in my soul and absorb its power, like the form of a\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"beloved mistress, then I often think with longing, Oh,\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" would I could describe these conceptions, could impress upon paper all that is living so full \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"and warm within me, that it might be the mirror of my soul, as my soul is the mirror of the \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"infinite God! O my friend one one one\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String WORDS_TWO_HUNDRED \u003d \"A wonderful serenity has taken possession of my entire soul,\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" like these sweet mornings of spring which I enjoy with my whole heart.\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I am alone, and feel the charm of existence in this spot, which was \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"created for the bliss of souls like mine. I am so happy, my dear friend,\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" so absorbed in the exquisite sense of mere tranquil existence, that\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I neglect my talents. I should be incapable of drawing a single stroke\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" at the present moment; and yet I feel that I never was a greater artist\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" than now. When, while the lovely valley teems with vapour around me, \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"and the meridian sun strikes the upper surface of the impenetrable foliage\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" of my trees, and but a few stray gleams steal into the inner sanctuary,\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I throw myself down among the tall grass by the trickling stream; and, \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"as I lie close to the earth, a thousand unknown plants are noticed by me: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"when I hear the buzz of the little world among the stalks, and grow one one one\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"familiar with the countless indescribable forms of the insects and flies, \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"then I feel the presence of the Almighty, who formed us in his own image\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String WORDS_ONE_NINETY_NINE \u003d \"A wonderful serenity has taken \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"possession of my entire soul, one one one\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" like these sweet mornings of spring which I enjoy with my whole heart.\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I am alone, and feel the charm of existence in this spot, which was \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"created for the bliss of souls like mine. I am so happy, my dear friend,\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" so absorbed in the exquisite sense of mere tranquil existence, that\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I neglect my talents. I should be incapable of drawing a single stroke\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" at the present moment; and yet I feel that I never was a greater artist\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" than now. When, while the lovely valley teems with vapour around me, \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"and the meridian sun strikes the upper surface of the impenetrable foliage\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" of my trees, and but a few stray gleams steal into the inner sanctuary,\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I throw myself down among the tall grass by the trickling stream; and, \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"as I lie close to the earth, a thousand unknown plants are noticed by me: \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"when I hear the buzz of the little world among the stalks, and grow \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"familiar with the countless indescribable forms of the insects and flies, \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"then I feel the presence of the Almighty, who formed us in his own\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String WORDS_TWO_HUNDRED_ONE \u003d \"A wonderful serenity has taken possession\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" of my entire soul,\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" like these sweet mornings of spring which I enjoy with my whole heart.\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I am alone, and feel the charm of existence in this spot, which was \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"created for the bliss of souls like mine. I am so happy, my dear friend,\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" so absorbed in the exquisite sense of mere tranquil existence, that\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I neglect my talents. I should be incapable of drawing a single stroke\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" at the present moment; and yet I feel that I never was a greater artist\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" than now. When, while the lovely valley teems with vapour around me, \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"and the meridian sun strikes the upper surface of the impenetrable foliage\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" of my trees, and but a few stray gleams steal into the inner sanctuary,\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \" I throw myself down among the tall grass by the trickling stream; and, \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"as I lie close to the earth, a thousand unknown plants are noticed by me: \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"when I hear the buzz of the little world among the stalks, and grow \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"familiar with the countless indescribable forms of the insects and flies, \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            + \"then I feel the presence of the Almighty, who formed us in his own image one one one extra\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_1 \u003d \"this is a test\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_2 \u003d \" \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_3 \u003d \"12345\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_4 \u003d \"1 2 3 4 5\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_5 \u003d \"#$%^\u0026\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_6 \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_7 \u003d WORDS_ONE_NINETY_NINE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final String STRING_REMARK_8 \u003d WORDS_TWO_HUNDRED;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_1 \u003d new Remark(\"this is a test\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_2 \u003d new Remark(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_3 \u003d new Remark(\"12345\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_4 \u003d new Remark(\"1 2 3 4 5\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_5 \u003d new Remark(\"#$%^\u0026\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_6 \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_7 \u003d new Remark(WORDS_ONE_NINETY_NINE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static final Remark SAMPLE_REMARK_8 \u003d new Remark(WORDS_TWO_HUNDRED);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Avalionnet": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xz0127": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAppointments.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import seedu.address.model.appointment.AppointmentComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TypicalAppointments {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment ALICE_APPOINTMENT \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 1, 1))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(9, 0))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatient(ALICE).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment BENSON_APPOINTMENT \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 5, 12))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(11, 30))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatient(BENSON).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment CARL_APPOINTMENT \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 1, 1))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(20, 0))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatient(CARL).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment ALICE_APPOINTMENT_2 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 5, 22))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(15, 0))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatient(ALICE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment BENSON_APPOINTMENT_2 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 4, 1))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(11, 30))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatient(BENSON).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment CARL_APPOINTMENT_2 \u003d new AppointmentBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 5, 22))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(14, 0))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withPatient(CARL).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment HOON_APPOINTMENT \u003d new AppointmentBuilder().withPatient(HOON)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 2, 5))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(13, 0)).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Appointment IDA_APPOINTMENT \u003d new AppointmentBuilder().withPatient(IDA)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withDate(LocalDate.of(2050, 2, 5))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .withTime(LocalTime.of(19, 30)).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private TypicalAppointments() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     * Returns an {@code AppointmentBook} with all the typical Appointments."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static AppointmentBook getTypicalAppointmentBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        AppointmentBook ab \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        for (Appointment appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "            ab.addAppointment(appointment);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d Arrays.asList("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                ALICE_APPOINTMENT, BENSON_APPOINTMENT, CARL_APPOINTMENT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                CARL_APPOINTMENT_2, ALICE_APPOINTMENT_2, BENSON_APPOINTMENT_2"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        appointmentList.sort(new AppointmentComparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 67,
      "ZhangWanlin98": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangWanlin98"
        },
        "content": "    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Index INDEX_FOURTH_APPOINTMENT \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Index INDEX_FIFTH_APPOINTMENT \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Index INDEX_SIXTH_APPOINTMENT \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "ZhangWanlin98": 4,
      "xz0127": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "import seedu.address.model.PatientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xz0127"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xz0127"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xz0127"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withPhone(\"94351253\").withNric(\"S1234567I\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withTags(\"friends\").withRemark(\"This is a test remark :)\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withNric(\"S1234567O\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withPhone(\"98765432\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"S1234567P\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"S1234567L\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"T1234567P\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"T0234567P\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withNric(\"T0034567P\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xz0127"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "     * Returns an {@code PatientBook} with all the typical patients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Avalionnet"
        },
        "content": "    public static PatientBook getTypicalPatientBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        PatientBook pb \u003d new PatientBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xz0127"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            pb.addPatient(patient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return pb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xz0127"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 3,
      "Avalionnet": 11,
      "xz0127": 29,
      "-": 36
    }
  }
]
