[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* For the detailed documentation of this project, see the Address Book Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 16,
      "seowalex": 2,
      "-": 5
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Ng Zhia Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/zhiayang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "[[github](http://github.com/zhiayang)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Role: Technical Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Responsibilities: Command UI and Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "### Seow Alex"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cimg src\u003d\"images/seowalex.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "[[github](http://github.com/seowalex)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* Role: Code quality/Integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### Travis Toh"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cimg src\u003d\"images/trav1st.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[github](http://github.com/trav1st)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* Role: Testing / Deliverables and Deadlines"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### Teh Xue Yong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/fall9x.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "[[github](http://github.com/fall9x)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* Role: Testing / Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "### He Jialei"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/hjl99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "[[github](http://github.com/hjl99)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* Role: Deliverables and Deadlines / Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "zhiayang": 5,
      "Trav1sT": 5,
      "seowalex": 4,
      "-": 34,
      "fall9x": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Target user profile**: People that cook daily, who need a way to manage recipes and their fridge contents."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Value proposition**: Manages recipes and fridge inventory/expiry, and automatically suggests recipes to cook."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| Priority | As a ...                              | I want to ...                                                                     | So that I can ...                                      |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| -------- | ------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------ |"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person learning how to cook           | view my recipes                                                                   | not get the instructions wrong                         |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | forgetful home cook                   | record recipes that I learnt from my friends and television shows                 | try to cook them in the future                         |                                                                        |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person that cannot decide             | select recipes to cook automatically based on the ingredients that i have         | eat a wider variety of meals                           |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | home cook who buys a lot of groceries | Enter the long list of products that I have bought while referring to the receipt | I can easily enter a large number of groceries at once |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | person on a diet                      | sort recipes based on calorie count                                               | choose to cook lower-calorie meals                     |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `*`      | busy mother                           | enter the list of recipes I want to cook for the week                             | find out which groceries I need to buy                 |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hjl99"
        },
        "content": "(For all use cases below, the **System** is the `Food Recipe Management System (FRMS)` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U1 - Add recipe**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add a recipe."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new recipe."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate recipe."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3.\t      "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U2 - Delete recipe**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete a recipe."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the recipe name."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of recipe name."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U3 - View recipe**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all recipes."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User requests for the recipes."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS display all the recipes."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U4 - Filter recipes**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered recipes."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of recipes."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any recipes."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U5 - List ingredients**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all ingredients."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User inputs the command to request for the ingredients."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS shows the confirmation message and displays the complete list of ingredients."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format.  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U6 - Add Ingredient**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add an ingredient."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new ingredient."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate ingredient."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b1. FRMS displays error messages."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b2. User enters new data.  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U7 - Delete Ingredient**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete an ingredient."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of ingredient name."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. FRMS displays error messages."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. User enters new data.  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U8 - View expiring ingredients** "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of expiring ingredients."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the date range."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of expiring ingredients."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients in the date range."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U9 - Filter ingredients**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hjl99"
        },
        "content": " "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered ingredients."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of ingredients."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.      "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seowalex"
        },
        "content": "4. Should be able to add multiple recipes at once"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seowalex"
        },
        "content": "5. Should have autocompletion for commands"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seowalex"
        },
        "content": "6. Should be able to fuzzy search for recipes/food"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seowalex"
        },
        "content": "7. Should be able to manage recipes in a interactive manner (like Google Assistant)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seowalex"
        },
        "content": "8. Should have input sanitisation"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Mainstream OS:** Latest version of Windows, MacOS or any Linux distro"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Recipe:** List of ingredients and steps needed to cook a dish"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "hjl99": 130,
      "seowalex": 18,
      "-": 320,
      "fall9x": 51
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "ChopChop is a **desktop app for managing recipes and ingredients, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ChopChop can manage your items faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Download the latest `chopchop.jar` from [here](https://github.com/AY2021S1-CS2103T-T10-3/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ChopChop."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   * **`list recipes`** : Lists recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   * **`add recipe Milkshake /ingredient Milk /qty 500ml /step Pour Milk /step Shake`** : Adds a recipe for making milkshakes, with one ingredient and two steps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:** \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  eg. `add recipe NAME /ingredient INGREDIENT`, `NAME` and `INGREDIENT` are parameters supplied by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Items in [square brackets] are optional. \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  eg. `add ingredient NAME [/qty QUANTITY]` can be used as `add ingredient Eggs /qty 4` or as `add ingredient Eggs /qty 4`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Items with `...` after them can be used multiple times. \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Listing all recipes: **`list`** `recipes`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shows a list of all recipes in the recipe manager."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `list recipes`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Adding recipe: **`add`** `recipe`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Adds a recipe to the recipe manager."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `add recipe NAME [/ingredient INGREDIENT [/qty QTY1]...]... (/step STEP)...`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Deleting recipe: **`delete`** `recipe`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Deletes a specific recipe from the recipe manager."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `delete recipe NAME`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Finding recipes: **`find`** `recipe`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Finds all recipes containing the given keywords in the name."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `find recipe KEYWORDS [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The search is case-insensitive. e.g henz will match Henz"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the name is searched, and only substrings will be matched."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Listing all ingredients: **`list`** `ingredient`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shows a list of all ingredients in the recipe manager."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `list ingredient`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Adding ingredient: **`add`** `ingredient`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Adds an ingredient to the recipe manager"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `add ingredient NAME [/qty QUANTITY] [/expiry DATE]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Deleting ingredient: **`delete`** `ingredient`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Deletes a specific ingredient from the recipe manager."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `delete ingredient NAME [/qty QUANTITY]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Finding ingredients: **`find`** `ingredient`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Finds ingredients containing the given keywords in the name."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `find ingredient KEYWORDS [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The search is case-insensitive. e.g cheese will match Cheese"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the name is searched, and only substrings will be matched."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Exiting the program: **`exit`**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `exit`"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 47,
      "-": 88
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* For the detailed documentation of this project, see the Address Book Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 15,
      "-": 8
    }
  },
  {
    "path": "src/main/java/chopchop/parser/CommandArguments.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandArguments.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class to hold a parsed command, holding its:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - target"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - unnamed arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - named arguments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * For example, a command such as:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code add ingredient onions /quantity 500g /location fridge /location shelf}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Would have the following properties:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      command     \u003d \"add\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      target      \u003d \"ingredient\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      remaining   \u003d \"onions\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      arguments   \u003d {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      \"quantity\": [ \"500g\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      \"location\": [ \"fridge\", \"shelf\" ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * For named arguments, the name cannot be empty, while the value can be empty. For example,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code ... /tag /tag /tag} is valid, but {@code ... / owo / uwu} is not."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * This class makes no judgement on the contents of any of the properties. Note that the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * ordering of arguments with different names are not preserved (eg. one cannot know that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code /quantity} came before {@code /location}), but the ordering of arguments with the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * same name are preserved (eg. {@code /location fridge} will appear before {@code /location shelf}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * in the list of arguments of a given name)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandArguments {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String remaining;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Map\u003cString, List\u003cString\u003e\u003e arguments;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of only the command name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.target     \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name and"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * some number of named arguments."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, Map\u003cString, List\u003cString\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.target     \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new HashMap\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name, the command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * target, and some number of named arguments."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param target    the command target"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, String target, Map\u003cString, List\u003cString\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.target     \u003d target;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new HashMap\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name, the command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * target, any remaining non-named arguments, and some number of named arguments."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param target    the command target"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param remaining any remaining non-named arguments"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, String target, String remaining,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Map\u003cString, List\u003cString\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.target     \u003d target;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d remaining;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new HashMap\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cString\u003e getTarget() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cString\u003e getRemaining() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.remaining);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the arguments with the given name. Since it makes sense for some parameters to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * be specified more than once, this method returns a list of all arguments with the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * given name."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e getArgument(String name) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.arguments.get(name))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Map\u003cString, List\u003cString\u003e\u003e getAllArguments() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new HashMap\u003c\u003e(this.arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 132
    }
  },
  {
    "path": "src/main/java/chopchop/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.Result;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.util.StringView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cMap\u003cString, List\u003cString\u003e\u003e\u003e parseNamedArguments(StringView input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (input.size() \u003e 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (input.find(\u0027/\u0027) !\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var currentArg \u003d input.drop(1).bisect(\u0027/\u0027, input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var argName \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var argValue \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                currentArg.bisect(argName, \u0027 \u0027, argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (argName.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"argument name cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var list \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                list.add(argValue.toString().strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ret.merge(argName.toString().strip(), list, (oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    oldVal.addAll(newVal);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return oldVal;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (input.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            input \u003d input.undrop(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ret);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse an input string into its constituent components, including the name of the command, its target,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * and its arguments. See the documentation for {@link chopchop.parser.CommandArguments} for the recognised"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * components of a given input string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the input string to parse"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed components, iff parsing succeeded; an empty optional otherwise."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cCommandArguments\u003e parse(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv \u003d new StringView(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var x \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        sv.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            add recipe NAME [/ingredient INGREDIENT [/qty QTY1]...]... [/step STEP]..."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            delete recipe NAME"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            find recipe KEYWORDS [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            list recipes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            add ingredient NAME [/qty QUANTITY] [/expiry DATE]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            delete ingredient NAME [/qty QUANTITY]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            find ingredient KEYWORDS [MORE_KEYWORDS]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            list ingredients"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d x.toString().strip();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var target \u003d Optional.of(x)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .filter(s -\u003e !s.isEmpty())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(StringView::toString)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(String::strip)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.bisect(x, \u0027/\u0027, xs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var theRest \u003d x.toString().strip();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!xs.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            xs \u003d xs.undrop(1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert xs.at(0) \u003d\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parseNamedArguments(xs)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(args -\u003e new CommandArguments(command, target, theRest, args));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 104
    }
  },
  {
    "path": "src/main/java/chopchop/util/Either.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Either.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class that wraps a value of either type L (the \u0027left\u0027 value), or"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * of type R (the \u0027right\u0027 value), but not both at once -- an Either contains only"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * either a left or a right value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Either\u003cL, R\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final L leftValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final R rightValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    protected Either(L leftVal, R rightVal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.leftValue \u003d leftVal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.rightValue \u003d rightVal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.leftValue \u003d\u003d null || this.rightValue \u003d\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the Either contains a left value, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true if this is a left value, false otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isLeft() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.leftValue !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the Either contains a right value, false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return True if this is a right value, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isRight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.rightValue !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored left value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * right value, throws a NoSuchElementException."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The left value contained in the Either."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a right value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public L fromLeft() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.leftValue)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchElementException(\"Either was not left\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored right value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * left value, throws a NoSuchElementException."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The right value contained in the Either."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a left value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public R fromRight() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.rightValue)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchElementException(\"Either was not right\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored left value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * right value, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The left value contained in the Either, optionally."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a right value"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cL\u003e fromLeftOpt() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.leftValue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored right value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * left value, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The right value contained in the Either, optionally."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a left value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cR\u003e fromRightOpt() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.rightValue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Maps the given function onto the left value of the Either, returning a new Either with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the updated left value. If it contains a right value, it returns the Either unmodified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map with."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new Either with the corresponding value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cL1\u003e Either\u003cL1, R\u003e mapLeft(Function\u003c? super L, ? extends L1\u003e fn) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isLeft()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Either.left(fn.apply(this.leftValue))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Either.right(this.rightValue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Maps the given function onto the right value of the Either, returning a new Either with"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the updated right value. If it contains a left value, it returns the Either unmodified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map with."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new Either with the corresponding value."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR1\u003e Either\u003cL, R1\u003e mapRight(Function\u003c? super R, ? extends R1\u003e fn) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isRight()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Either.right(fn.apply(this.rightValue))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Either.left(this.leftValue);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an Either containing a left value."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return An Either containing a left value."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cL, R\u003e Either\u003cL, R\u003e left(L l) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Either\u003cL, R\u003e(l, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an Either containing a right value."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return An Either containing a right value."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cL, R\u003e Either\u003cL, R\u003e right(R r) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Either\u003cL, R\u003e(null, r);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 134
    }
  },
  {
    "path": "src/main/java/chopchop/util/Pair.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Pair.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class with two values, of types L and R. No restrictions are"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * imposed on the types or their values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final T one;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final U two;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Pair with the specified values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param a the first value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param b the second value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair(T a, U b) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.one \u003d a;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.two \u003d b;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the first value from the pair."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the first value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T fst() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.one;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the second value from the pair."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the second value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public U snd() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.two;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on both values of the pair, returning the new pair;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the original pair is left unmodified. The BiFunction should return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the new pair."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the values on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cT1, U1\u003e Pair\u003cT1, U1\u003e map(BiFunction\u003c? super T, ? super U, Pair\u003cT1, U1\u003e\u003e fn) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return fn.apply(this.one, this.two);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on only the first value of the pair, returning the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * new pair; the original pair is left unmodified. The second value of"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the pair is returned as-is."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the first value on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cT1\u003e Pair\u003cT1, U\u003e mapFst(Function\u003c? super T, ? extends T1\u003e fn) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT1, U\u003e(fn.apply(this.one), this.two);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on only the second value of the pair, returning the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * new pair; the original pair is left unmodified. The first value of"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the pair is returned as-is."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the second value on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cU1\u003e Pair\u003cT, U1\u003e mapSnd(Function\u003c? super U, ? extends U1\u003e fn) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT, U1\u003e(this.one, fn.apply(this.two));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 81
    }
  },
  {
    "path": "src/main/java/chopchop/util/Result.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Result.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The Result class is used to encapsulate the result of some computation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * producing a value of type {@code T} which may or may not fail. It also holds"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a string value describing the reason for the failure or error, if indeed the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * wanted value of {@code T} was not produced successfully."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * In other words, a {@code Result\u003cT\u003e} is an {@code Optional\u003cT\u003e} that also contains"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a reason for the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Result\u003cT\u003e extends Either\u003cString, T\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This constructor is private; use the of() and error() methods to create"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Results."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result(T value, String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // note that, by convention, an Either\u003cL, R\u003e holds the failure case in the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // left variant, and the success case in the right variant."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message, value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the contained value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the contained value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Result was invalid (ie. does not have a value)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRight();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the contained value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the contained value, optionally"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cT\u003e getValueOpt() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRightOpt();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether this Result contains a value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the Result contains a value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean hasValue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.isRight();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the error message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Result was valid (ie. does not have an error message)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getError() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromLeft();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the error message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the error message, optionally"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cString\u003e getErrorOpt() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromLeftOpt();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether this Result contains an error message."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the Result contains an error message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isError() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.isLeft();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a functor map on the value of this Result, returning a new result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * with the modified value. If the original result was an error variant, then"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the error message is forwarded unchanged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to apply"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new result"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR\u003e Result\u003cR\u003e map(Function\u003c? super T, ? extends R\u003e fn) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cR\u003e("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            super.fromRightOpt().map(fn).orElse(null),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            super.fromLeftOpt().orElse(null)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the Result contains a value, return it, otherwise return {@code other}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the alternative value to use"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      either the value contained in the result, or the alternative provided"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T orElse(T other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRightOpt().orElse(other);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a {@code Result} containing the given value"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e of(T value) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} with an error message describing why a value"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * could not be computed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param message   the error message"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return          a {@code Result} without a value, with the given error message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e error(String message) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(null, message);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 131
    }
  },
  {
    "path": "src/main/java/chopchop/util/Slice.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Slice.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Represents a non-owning array-like reference. Allows for efficient"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * substring-like operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Slice\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public final T[] xs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public final int begin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public final int length;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Slice from the backing array"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs     the backing array"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin  the starting index of the slice"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param length the length of the slice"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice(T[] xs, int begin, int length) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.xs     \u003d xs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin  \u003d begin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.length \u003d length;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Slice from the backing array. The length of the slice is the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * length of the backing array, minus the starting offset."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs     the backing array"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin  the starting index of the slice"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice(T[] xs, int begin) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.xs     \u003d xs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin  \u003d begin;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (begin \u003e xs.length) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.length \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.length \u003d xs.length - begin;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Slice from the backing array. The slice spans the whole array."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs     the backing array"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice(T[] xs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.xs     \u003d xs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin  \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.length \u003d xs.length;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the starting index of the slice."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the starting index of the slice."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int begin() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.begin;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get one-past-the-last index of the slice."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return one-past-the-index of the slice."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int end() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.begin + this.length;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the length of the slice."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the length of the slice."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.length;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the ith element of the slice."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param i the index of the element to get"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the element at the specified index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T get(int i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.xs[this.begin + i];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the first element of the slice."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the first element of the slice"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T front() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.size() \u003e 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.xs[this.begin];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Get the last element of the slice."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the last element of the slice"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T back() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.size() \u003e 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.xs[this.begin + this.length - 1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice without the first n elements. If n is larger than the length of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the slice, an empty slice will be returned."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of elements to drop"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e drop(int n) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.length \u003c n) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.length;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin + n, this.length - n);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice with only the first n elements. If n is larger than the length of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the slice, a copy of the original slice will be returned."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of elements to take"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e take(int n) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.length \u003c n) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.length;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin, n);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice with only the last n elements. If n is larger than the length of"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the slice, a copy of the original slice will be returned."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of elements to take (from the back)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e takeLast(int n) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.length \u003c n) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.length;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin + this.length - n, n);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a new slice with the given bounds."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param start the starting index of the new slice"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param len   the length of the new slice"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new subslice"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Slice\u003cT\u003e slice(int start, int len) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Slice\u003cT\u003e(this.xs, this.begin + start, len);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Return a Stream from the elements in the slice"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of elements"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Stream\u003cT\u003e stream() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Arrays.stream(this.xs)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .skip(this.begin())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .limit(this.size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Arrays.toString(Arrays.copyOfRange(this.xs, this.begin(), this.end()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(other instanceof Slice\u003c?\u003e)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ((Slice\u003c?\u003e) other).stream().collect(Collectors.toList())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .equals(this.stream().collect(Collectors.toList()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // just cheat"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.stream()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .hashCode();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 207
    }
  },
  {
    "path": "src/main/java/chopchop/util/StreamUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StreamUtils.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StreamUtils {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a stream by zipping two streams together. The length of the resulting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * stream is the minimum of either of the inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s1 the first stream to zip"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s2 the second stream to zip"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of Pairs, comprising the elements from each stream."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT, U\u003e Stream\u003cPair\u003cT, U\u003e\u003e zip(Stream\u003cT\u003e s1, Stream\u003cU\u003e s2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d s2.iterator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return s1.map(x1 -\u003e i2.hasNext() ? new Pair\u003c\u003e(x1, i2.next()) : null)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .takeWhile(x -\u003e x !\u003d null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a stream by zipping the input stream together with a stream of indices,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * beginning at 0. This is implemented in terms of zip(). The index is the first"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * item in the pair."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s the stream to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of Pairs, with the first item being the 0-based index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Stream\u003cPair\u003cInteger, T\u003e\u003e indexed(Stream\u003cT\u003e s) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return StreamUtils.zip(Stream.iterate(0, i -\u003e i + 1), s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 35
    }
  },
  {
    "path": "src/main/java/chopchop/util/StringView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StringView.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A class representing a view over a character array (ie. a String), that allows operations like"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * drop(), take(), substr(), etc. to be implemented efficiently (without copying the underlying data)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The class behaves like an immutable class -- most methods will return a new copy of the StringView"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * with the appropriate bounds (the array itself is not copied), except for one method -- bisect()."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * See the documentation for bisect() to learn why."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StringView {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private char[] chars;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int begin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new string view using the contents of the given string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param string the string to use"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView(String string) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d string.toCharArray();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d this.chars.length;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new string view using the provided array and bounds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param chars the array of characters to use"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin the starting index (inclusive) of this string view"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param end   the ending index (exclusive) of this string view"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private StringView(char[] chars, int begin, int end) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d chars;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d Math.max(begin, 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d Math.min(end, this.chars.length);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.begin \u003c\u003d this.end;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Reseats this string view to point to the given character array and bounds. This method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is required for bisect(), and violates the immutability of the string view."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param chars the array of characters to use"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin the starting index (inclusive) of this string view"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param end   the ending index (exclusive) of this string view"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void set(char[] chars, int begin, int end) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d chars;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d end;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Reseats this string view to refer to the same array as the given other string view, with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the appropriate bounds etc. This violates the immutability of the string view."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the source string view"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void replaceWith(StringView other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.set(other.chars, other.begin, other.end);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} does not violate any immutability constraints."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a {@code Pair} of string views"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair\u003cStringView, StringView\u003e bisect(char delim) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(x -\u003e x \u003d\u003d delim);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003c\u003e(fst, snd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} will modify both parameters {@code x} and {@code xs}, and will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * replace their contents with the appropriate first and second parts of the split."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * The reason that {@code bisect()} is implemented in this way is to allow writing code in this manner:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      var foo \u003d x;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      var bar \u003d x;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * It would not be necessary if this language had some semblance of pattern matching so one could do"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code var (x, xs) \u003d sv.bisect(\u0027 \u0027)}, so we have to live with this."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param x     the view in which to place the first part of the bisection"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs    the view in which to place the second part of the bisection"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void bisect(StringView x, char delim, StringView xs) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(c -\u003e c \u003d\u003d delim);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        x.replaceWith(fst);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.replaceWith(snd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} will modify the {@code xs} parameter, and will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * replace its content with the second part of the split. The first part is returned normally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs    the view in which to place the second part of the bisection"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the first part of the bisection"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView bisect(char delim, StringView xs) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(c -\u003e c \u003d\u003d delim);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.replaceWith(snd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return fst;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the size of the string view."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the size"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.end - this.begin;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view is empty."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the view is empty"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the substring occurs."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index at which the given substring first occurs,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *         or {@code -1} if it does not exist"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(String sub) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(new StringView(sub));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the substring occurs."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index at which the given substring first occurs,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *         or {@code -1} if it does not exist"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(StringView sub) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Collections.indexOfSubList(Arrays.asList(this.chars), Arrays.asList(sub.chars));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the character occurs."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param ch the character to search for"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index of the character, or {@code -1} if it does not exist."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(char ch) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (int i \u003d this.begin; i \u003c this.end; i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.chars[i] \u003d\u003d ch) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return i - this.begin;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view starts with the given substring. This is equivalent to"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code sv.find(sub) \u003d\u003d 0}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff this string view starts with the substring."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean startsWith(String sub) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(sub) \u003d\u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view starts with the given substring. This is equivalent to"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code sv.find(sub) \u003d\u003d 0}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff this string view starts with the substring."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean startsWith(StringView sub) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(sub) \u003d\u003d 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the character at the given index."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the index"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the character"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char at(int idx) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.chars[this.begin + idx];"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, without the first {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view, then an empty view is returned. {@code n} cannot be negative."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to drop."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view without the first {@code n} characters."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView drop(int n) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert n \u003e\u003d 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.min(this.begin + n, this.end), this.end);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, with only the first {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view or is negative, then a copy of this view is returned."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to take."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view with only first {@code n} characters."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView take(int n) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (n \u003c 0) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.size();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, this.begin, Math.min(this.begin + n, this.end));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, with only the last {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view, then a copy of this view is returned. {@code n} cannot be negative."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to take."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view with only the last {@code n} characters."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView takeLast(int n) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert n \u003e\u003d 0;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.min(this.begin + n, this.end), this.end);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view by dropping characters as long as the given predicate holds true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * at the first instance where the predicate returns true, the string is returned."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView dropWhile(Predicate\u003cCharacter\u003e pred) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int i \u003d this.begin;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (i \u003c this.end \u0026\u0026 pred.test(this.chars[i])) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, i, this.end);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view by taking characters as long as the given predicate holds true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * at the first instance where the predicate returns false, the string is returned."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView takeWhile(Predicate\u003cCharacter\u003e pred) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int n \u003d this.begin;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (n \u003c this.end \u0026\u0026 pred.test(this.chars[n])) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n +\u003d 1;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, this.begin, n);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view containing {@code n} characters at the front which were previously dropped."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * For example:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *     var sv \u003d StringView(\"asdf\").drop(1);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *     assert sv.undrop(1).equals(\"asdf\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to undrop"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView undrop(int n) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.max(0, this.begin - n), this.end);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new String(this.chars, this.begin, this.size());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Provides operator\u003d\u003d for StringView. This method works for both {@code String} instances"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * as well as {@code StringView} instances."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param obj the object to compare"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the string contents are equal"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (obj instanceof String) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (String) obj;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Arrays.equals("
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.chars, this.begin, this.end,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                other.toCharArray(), 0, other.length()"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (obj instanceof StringView) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (StringView) obj;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Arrays.equals("
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.chars, this.begin, this.end,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                other.chars, other.begin, other.end"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 362
    }
  }
]
