[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T17-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* This is **a project for Software Engineering (SE) students**.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _MyMods_) used for managing module details."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* It is named **MyMods**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* For the detailed documentation of this project, see the **[MyMods Product Website](https://ay2021s1-cs2103t-t17-1.github.io/tp/)**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [User Guide](https://ay2021s1-cs2103t-t17-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Developer Guide](https://ay2021s1-cs2103t-t17-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [About Us](https://ay2021s1-cs2103t-t17-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "kunnan97": 7,
      "pongzers": 3,
      "-": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    archiveName \u003d \u0027MyMods.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "run {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 1,
      "pongzers": 4,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "### Hong Kunnan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cimg src\u003d\"images/kunnan97.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[github](https://github.com/kunnan97)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[portfolio](team/kunnan97.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "### Zhang Xin Yue"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cimg src\u003d\"images/xyzhangg.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[github](http://github.com/xyzhangg)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[portfolio](team/xyzhangg.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "### Augustine Kau"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cimg src\u003d\"images/augustinekau.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[github](http://github.com/augustinekau)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[portfolio](team/augustinekau.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Role: Code Quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "### Li Xupeng"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cimg src\u003d\"images/pongzers.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[github](http://github.com/pongzers)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[portfolio](team/pongzers.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "### Zhao Lingshan"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cimg src\u003d\"images/zhaolingshan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[github](http://github.com/zhaolingshan)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "[[portfolio](team/zhaolingshan.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "augustinekau": 27
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/grade/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "augustinekau": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### \u003ca name\u003d\"top\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **[Setting up, getting started](#Setting_up,_getting_started)**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **[Design](#Design)**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Architecture](#Architecture)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [UI component](#UI_component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Logic component](#Logic_component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Model  component](#Model_component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Storage component](#Storage_component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Common classes](#Common_classes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **[Implementation](#Implementation)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Obtaining module information automatically](#Obtaining_module_information_automatically)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Recommend S/U](#Recommend_S/U)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Dark/Light Mode](#Dark/Light_Mode)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Start Semester](#Start_Semester)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Show progress towards target CAP](#Show_progress_towards_target_CAP)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **[Product scope](#Product_scope)**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Target user profile](#Target_user_profile)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [User stories](#User_stories)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Use cases](#Use_cases)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Non-Functional Requirements](#Non-Functional_Requirements)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [Glossary](#Glossary)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "## **Setting up, getting started** \u003ca name\u003d\"Setting_up,_getting_started\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "## **Design** \u003ca name\u003d\"Design\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Architecture \u003ca name\u003d\"Architecture\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "of each component."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**`Main`** has two classes called"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[`Main`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/Main.java)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "and [`MainApp`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "It is responsible for,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[**`Commons`**](#Common_classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* [**`UI`**](#UI_component): The UI of the App."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* [**`Logic`**](#Logic_component): The command executor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* [**`Model`**](#Model_component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* [**`Storage`**](#Storage_component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "(which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "user issues the command `delete 1`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### UI component \u003ca name\u003d\"UI_component\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "![Structure of the UI Component]()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "files that are in the `src/main/resources/view` folder. For example, the layout of the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[`MainWindow`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Logic component \u003ca name\u003d\"Logic_component\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "![Structure of the Logic Component]()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command]()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Model component \u003ca name\u003d\"Model_component\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "![Structure of the Model Component]()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Storage component \u003ca name\u003d\"Storage_component\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "![Structure of the Storage Component]()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T17-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Common classes \u003ca name\u003d\"Common_classes\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#top)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "## **Implementation** \u003ca name\u003d\"Implementation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pongzers"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Obtaining module information automatically: \u003ca name\u003d\"Obtaining_module_information_automatically\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pongzers"
        },
        "content": "This feature is facilitated by ```ModuleInfoRetriever```, and is used to obtain the number of modular credits"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pongzers"
        },
        "content": "when you are adding a module, or the “su” status of the module when you are recommending S/U options."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pongzers"
        },
        "content": "It implements the following operation:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pongzers"
        },
        "content": "```ModuleInfoRetriever#retrieve(String moduleName)``` - Returns a HashMap containing module-related information."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Given below is an example usage scenario and how obtaining module information is used and integrated into"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pongzers"
        },
        "content": "the ```add``` command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Step 1: The users executes ```add --mod CS1101S --grade A+```, the add command executes"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pongzers"
        },
        "content": "```Logic#execute(“add --mod CS1101S --grade A+”)```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Step 2: Logic uses the ```AddCommandParser``` class to parse the command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pongzers"
        },
        "content": "```AddCommandParser#parse(“add --mod CS1101S --grade A+”)``` is executed, which then executes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pongzers"
        },
        "content": "```(ModuleInfoRetriever#retrieve(“CS1101S”)``` to retrieve the number of modular credits CS1101S has."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Step 3: During the call of ```ModuleInfoRetriever#retrieve(“CS1101S”)``` , it parses the JSON file"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pongzers"
        },
        "content": "```moduleInfo.json```, and searches the file for “moduleCode” : “CS1101S”, retrieving the following information,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pongzers"
        },
        "content": "returning it as a HashMap."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\\"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\\"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Title: “Programming Methodology”"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\\"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pongzers"
        },
        "content": "moduleCredit: 4"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\\"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pongzers"
        },
        "content": "SU: True"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pongzers"
        },
        "content": "An exception is thrown if the module is not found."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Step 4: The new module constructor is executed with the following arguments,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pongzers"
        },
        "content": "```new Module(“CS1101S”, “A+”, Set\u003cTag\u003e(), 4, Y2S1)```. An AddCommand object is then returned with the module,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pongzers"
        },
        "content": "and the new module with modular credit information is saved to storage."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Recommend S/U: \u003ca name\u003d\"Recommend_S/U\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The Recommend S/U feature works in conjunction with the goal-setting feature."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "MyMods will recommend modules to S/U based on the goal that the user has set and the user’s grade. \\"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\\"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The implementation of goal-setting is first done by introducing a new model class - ```GoalTarget```."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The ```GoalTarget``` class models the 6 different levels following the Honours Classification in NUS."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "For the user to set their goal, there is a ```SetCommand``` class under the logic commands."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "There will be two different variants of the goal command, there is a ```SetCommandParser``` class under parser to"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "handle the different user’s input: ```goal --set``` and ```goal --list```."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The goal of the user will update a field under ```ModelManager```. \\"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\\"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "User’s goal will be written to and can be read from the ```addressbook.json``` file under the attribute"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "“```goalTarget```” which will store a default value of ```0```. \\"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\\"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "To implement the command ```RecommendSU```, a class ```RecommendSuCommand``` is introduced in logic commands."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "To determine which module to recommend the user to S/U the method ```RecommendSuCommand#filterModule()``` will"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "retrieve the user’s goal and modules and filter using the following three conditions:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "1. ```RecommendSuCommand#isModSuAble()``` -- Checks if module can be S/U by NUS based on data"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "file ```moduleInfo.json```. \\"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "2. ```RecommendSuCommand#isGradeBelowGoal()``` -- Checks if the grade of the module is below the lower bound of the"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "goal. \\"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "3. ```RecommendSuCommand#isGradeAboveC()``` -- Checks if the grade of the module is C and above. \\"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\\"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "#### Design Considerations:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Aspect: How to represent the different levels of goals (Highest Distinction, Distinction, Merit, Honours, Pass, Fail) \\"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Alternative 1 (current choice): Labels each level with a number 1 to 6 and the user inputs the level number to"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "set the goal. \\"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Pros: \\"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        1. Using number to label the goals is easier for the user to type"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        (eg: ```goal --set 2``` instead of ```goal --set distinction```) \\"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        2. Using an integer value is more efficient for comparison as compared to a String. \\"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Cons: \\"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        1. Difficult for the user to know which level represents which goal. \\"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Alternative 2: User key in the full name of the goal level. \\"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Pros: \\"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        1. User knows what to key in without referring. \\"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Cons: \\"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        1. It is longer for the user to type. \\"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* Justification of choosing Alternative 1: Having a shorter command will be easier for the user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "To solve the con of the user not sure on which level represents which goal, the command “```goal --list```” is"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "provided."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Dark/Light Mode: \u003ca name\u003d\"Dark/Light_Mode\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "####Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The dark and light mode switch is part of the UI implementation that allows the user to instantly switch between two"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "different styles of the application. It is facilitated by the ```MainWindow component``` in the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "UI component and the ```Scene``` object from the ```Stage``` object(private property in ```MainWindow```)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**The stylesheet property in the ```Scene``` object is manipulated**. The two different stylings are supplied by"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "two CSS files that contain CSS styling for both dark and light mode separately."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The following method in ```MainWindow``` facilitates the switching process:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "- ```MainWindow#setStyleSheet(String cssFileName)``` - sets a specific CSS file to be the current stylesheet for UI."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Flow of method:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. “Light” is selected"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. ```MainWindow``` calls ```setStyleSheet(“Light”)```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. ```Scene``` object is obtain from ```Stage``` object"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "4. An ```ObservableList\u003cString\u003e``` of stylesheets is obtained from ```Scene``` object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "5. File path to the “Light” CSS file is added as a string that overrides the current ```ObservableList\u003cString\u003e```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "of stylesheets"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**Default theme** is Dark theme supplied by DarkTheme.css"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "####User Interaction"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Users have the ability to easily choose which mode under the “Theme” menu bar. Either “Dark” or “Light”."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Start Semester: \u003ca name\u003d\"Start_Semester\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Start is a command which allows the user to start modifying the list of modules in the semester which the user"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "specifies by adding, editing or deleting the modules in the specified semester. The user is unable to modify the list"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "of modules before typing in start followed by the semester which the user wishes to edit the module list of."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "A class StartCommand is added in the commands folder under logic to execute the command start."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "A class SemesterManager is added in the semester folder under model to retrieve the current semester the user is in"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "and set the current semester to a specified semester."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Show progress towards target CAP: \u003ca name\u003d\"Show_progress_towards_target_CAP\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "####Implementation"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "The progress feature works in conjunction with the goal-setting feature."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "The user will first need to indicate their desired CAP using the `goal` command."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\\"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\\"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "Users can then use the command `progress` to calculate the required average CAP"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "they have to obtain in their remaining modules in order to achieve their"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "target CAP. The user can include the string `--ddp` to indicate if they are taking"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "a double degree programme (e.g. `progress --ddp`)."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\\"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\\"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "A `ProgressCommand class` is added to commands under logic to execute the required"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "CAP calculation. The calculation process is done as shown below:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " 1. User enters their target CAP using `goal` command"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " 2. Info about current CAP and MCs taken are retrieved from the `ModelManager` class"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " 3. Total MCs required is determined by whether user is in double degree programme"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " or not (e.g. user input is `progress --ddp` or `just progress`)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " 4. Target CAP is retrieved from the `ModelManager` class"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " 5. Required CAP from remaining modules is calculated."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#top)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "## **Product scope** \u003ca name\u003d\"Product_scope\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Target user profile: \u003ca name\u003d\"Target_user_profile\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   NUS students"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**Value proposition**: You type, We track."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Track and view your modules and grades efficiently, anytime anywhere."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### User stories \u003ca name\u003d\"User_stories\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003cstrong\u003ePriority\u003c/strong\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003cstrong\u003eAs a …​\u003c/strong\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003cstrong\u003eI want to …​\u003c/strong\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003cstrong\u003eSo that I can…​\u003c/strong\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003ccode\u003e* * *\u003c/code\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eNUS student"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eadd the modules taken and grades attained"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eview them anytime anywhere."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003ccode\u003e* * *\u003c/code\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eNUS student"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eadd my modules taken to reflect my CAP, and be able to update those modules when I S/U it to reflect my updated CAP"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e I can view my new CAP."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003ccode\u003e* * *\u003c/code\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eNUS student"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eview my current progress of my modules taken and my CAP"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003ehave a gauge of how I am doing in school."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003ccode\u003e* * *\u003c/code\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eimpatient NUS student"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003ecalculate my CAP as fast as possible without doing any calculations myself"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003euse the time that will be spent on doing manual calculations more productively."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003ctr\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003e\u003ccode\u003e* *\u003c/code\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eNUS student"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003edelete a module taken or the grade attained in the event that I decide to drop the module"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003ctd\u003eI am able to view an updated list of the modules I am currently taking and view my CAP without the grade from the dropped module."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "   \u003c/td\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003c/tr\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Use cases \u003ca name\u003d\"Use_cases\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "(For all use cases below, the **System** is the `MyMods` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#### **Use case: Delete a module**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. User requests to list modules"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. MyMods shows a list of modules he/she has taken"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. User requests to delete a specific module in the list"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "4. MyMods deletes the module \\"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   2a. The list is empty. \\"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   3a. The given index is invalid."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    *   3a1. MyMods shows an error message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    *   Use case resumes at step 3."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#### **Use case: Add a module**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. User enters academic semester to edit"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. MyMods shows the academic semester and a list of modules he/she has taken"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. User requests to add a specific module into the list"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "4. MyMods adds the module \\"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   1a. Academic semester not found \\"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   3a. Module moduleName already exists."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    *   3a1. MyMods shows an error message."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    *   Use case resumes at step 3."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#### **Use case: View CAP**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. User requests to show CAP"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. MyMods shows CAP for the latest completed semester"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   1a. No modules has been added, CAP is undefined"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    *   1a1. MyMods shows an error message suggesting user to add modules \\"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Non-Functional Requirements \u003ca name\u003d\"Non-Functional_Requirements\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "2. Should be able to hold up to 1000 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### Glossary \u003ca name\u003d\"Glossary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#top)"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 8,
      "kunnan97": 216,
      "pongzers": 36,
      "xyzhangg": 22,
      "-": 151,
      "augustinekau": 44
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "   1. Run the `seedu.grade.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "augustinekau": 1
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "   e.g. `seedu.grade.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "   e.g. `seedu.grade.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "   e.g. `seedu.grade.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "augustinekau": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/MyMods-logo.png\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "# 1. Product Overview \u003ca name\u003d\"Product_Overview\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Welcome to **MyMods**:100:! Let us guide you through the overview of **MyMods**:100: in this section."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 1.1 Table of Contents \u003ca name\u003d\"Table_of_Contents\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* [1. Product Overview](#Product_Overview)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [1.1 Table of Contents](#Table_of_Contents)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [1.2 About](#About)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [1.3 Introduction](#Introduction)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [1.4 Glossaries](#Glossaries)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [1.5 Getting Started](#Getting_Started)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* [2. Key Features](#Key_Features)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.1 Summary of Key Features](#Summary_of_Key_Features)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.2 Edit Semester](#Edit_Semester)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.3 Add Module](#Add_Module)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.4 Update Module](#Update_Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.5 List all Modules](#List_all_Modules)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.6 Set Goals](#Set_Goals)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.7 Recommend S/U](#Recommend_S/U)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.8 S/U Module](#S/U_Module)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.9 Delete Module](#Delete_Module)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.10 Exit Semester](#Exit_Semester)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.11 Find Module](#Find_Module)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.12 Progress Report](#Progress_Report)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.13 Get Help](#Get_Help)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * [2.14 Exit Application](#Exit_Application)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 1.2 About \u003ca name\u003d\"About\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Are you a NUS student who wants a clean Command Line Interface (CLI) to keep track of your modules and grades?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "If yes, then this user guide is for you!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Want to know the common use cases, how to get started or in-depth documentation of all of our 13 key features in **MyMods**:100:?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "We got that all covered for you in this user guide."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "And yes, that is right! We have 13 key features in **MyMods**:100:: `start`, `add`, `update`, `list`, `goal`, `recommendSU`,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`su`, `delete`, `done`, `find`, `progress`, `help` and `exit` commands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "You do not need any prior technical knowledge to understand this document, however, you will need to know how to read"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "English though!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "**Navigating this user guide:**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* Tips will be shown in a box:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: This symbol indicates good-to-know tips."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* Important information will be shown in a box:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: This symbol indicates important information."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `start`: A grey highlight (called a mark-up) indicates that this is a command that can be typed into the command line"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "and executed by the application."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 1.3 Introduction \u003ca name\u003d\"Introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "So what exactly is **MyMods**:100:? It is a desktop app for tracking modules and grades, optimized for use for students who"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "prefer typing via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "With **MyMods**:100:, you are able to keep track of your module results efficiently, easily make S/U decisions, and view your"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "academic progress. **MyMods**:100: is available for the Linux, Unix, Windows XP and Mac OS X operating systems."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 1.4 Glossaries \u003ca name\u003d\"Glossaries\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "If you do not understand any of the terms or short forms that we used, you can refer to this table:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Term | Description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "-----|------------"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "CAP | Cumulative Average Point"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "ddp | Double Degree Programme"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "mod | Module"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "S/U | Satisfactory / Unsatisfactory option in NUS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 1.5 Getting Started \u003ca name\u003d\"Getting_Started\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#### Installation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Grab a cup of coffee :coffee:."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. Ensure you have Java 11 or above installed in your computer :computer:."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. Download the last MyMods.jar file from [here](https://github.com/AY2021S1-CS2103T-T17-1/tp/releases/tag/v1.3.1)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "4. Place the file in any folder that you want to be the home folder for **MyMods**:100:."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "5. Start the web application by double-clicking the file or run it with `java -jar"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "MyMods.jar`. The window (without any modules) similar to the interface shown below will appear."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: Check your Java version by typing java -version in the Command Prompt\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/1.5 Getting Started 1.png\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The data of all of your modules can be found on your local disk. It is located in the “data” folder found at the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "home folder."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#### The Interface"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "This is what **MyMods**:100: looks like: \\"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/1.5 Getting Started 2.png\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: Default colours looking different? Fret not! The theme of **MyMods**:100: is determined by the time of the day."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "You can change the colours using the tab “Theme”."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "---"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "# 2. Key Features \u003ca name\u003d\"Key_Features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Below is information about the features and commands of **MyMods**:100:."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: \u003cstrong\u003eImportant information about the command format:\u003c/strong\u003e\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* Words in \u003cstrong\u003eUPPER_CASE\u003c/strong\u003e are the parameters to be supplied by the user. e.g. in add `m/MODULE_CODE`, `MODULE_CODE` is a parameter which can be used as `add m/CS2100`.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* Items in \u003cstrong\u003eSQUARE BRACKETS\u003c/strong\u003e are optional input parameters. e.g `m/MODULE_CODE [g/GRADE]` can be used as `m/CS2100 g/A` or as `m/CS2100`.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* Parameters are \u003cstrong\u003eNOT case-sensitive\u003c/strong\u003e. e.g. `add m/CS2100` is the same as `add m/cs2100`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " or `start Y1S1` is the same as `start y1s1`.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.1 Summary of Key Features \u003ca name\u003d\"Summary_of_Key_Features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Command | Format"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "--------|-------"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`start` | `start SEMESTER`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`add` | `add m/MODULE_CODE [g/GRADE] [mc/MODULAR_CREDIT]`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`update` | `update m/MODULE_CODE [g/GRADE] [s/SEMESTER]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`list` | `list`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`goal` | `goal set LEVEL` or `goal list`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`recommendSU` | `recommendSU`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`su` | `su MODULE_CODE`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`delete` | `delete MODULE_CODE`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`done` | `done`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`find` | `find KEYWORD`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`progress` | `progress [ddp]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`help` | `help`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "`exit` | `exit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.2 Edit Semester: `start` \u003ca name\u003d\"Edit_Semester\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Can’t wait to add your modules into **MyMods**:100:? You can start modifying the modules by starting a semester! \\"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\\"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `start SEMESTER` \\"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\\"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "*   `start Y2S1`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* Important information will be shown in a box:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: You can only add, edit or delete modules after starting a particular semester."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "To edit a Semester (e.g. Y2S1):"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `start Y2S1` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.2 Edit Semester 1.png\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message: \\"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.2 Edit Semester 2.png\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: You can check the current semester that you are editing at the bottom left corner of the interface:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.3 Add module: `add` \u003ca name\u003d\"Add_Module\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Yes! After starting a semester, we can now add a module to your list. \\"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\\"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `add m/MODULE_CODE [g/GRADE]`\\"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "\\"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `add m/CS1101S`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `add m/CS1231 g/A`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "To add a module (e.g. add CS1101S):"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `add m/CS1101S g/A+` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.3 Add Module 1.png\"\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message: \\"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.3 Add Module 2.png\"\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. You can check that the module is added in the list below: \\"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.3 Add Module 3.png\"\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: Our database is **valid up to modules in the AY19/20 academic year**. So if the modules you are adding is"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "new in AY20/21 academic year, the following message will be shown:\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "To add a module that is not in our database(e.g. CS1101A): \\"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\\"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Type `add m/CS1101A mc/4` (with `mc/`) into the command box, and press Enter to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: Manually added modules will not be recommended to S/U for the command `recommendSU` and cannot be S/U-ed using the command `su`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.4 Update Module: `update` \u003ca name\u003d\"Update_Module\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Oops, typed something wrong or want to change something? Use this update feature to change the module’s grade."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\\"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `update m/MODULE_CODE [g/GRADE]` \\"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "\\"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `update m/CS1101S`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `update m/CS1101S g/A+`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pongzers"
        },
        "content": "To update a module (e.g. CS2030):"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `update m/CS2030 g/A` into the command box, and press Enter to execute it."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.4 Update Module 1.png\"\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pongzers"
        },
        "content": "2. The result box will display the message:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.4 Update Module 2.png\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pongzers"
        },
        "content": "3. You can check that the module is updated from the list below:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.4 Update Module 3.png\"\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.5 List all Modules: `list` \u003ca name\u003d\"List_all_Modules\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Displays the list of modules and their respective grades (if any)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pongzers"
        },
        "content": "Narrow to specific semester if stated. If no semester is stated, the current semester you"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pongzers"
        },
        "content": "are editing will be displayed.\\"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " \\"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `list` \\"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " \\"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "*   `list`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: \u003cstrong\u003eIf you are editing a semester\u003c/strong\u003e (e.g. Y2S1),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "only modules from that semester(e.g. Y2S1) will be listed."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pongzers"
        },
        "content": "To view all the modules that you have taken:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `list` into the command box, and press Enter to execute it."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.5 List all Modules 1.png\"\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pongzers"
        },
        "content": "2. The result box will display the message:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.5 List all Modules 2.png\"\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pongzers"
        },
        "content": "3. You can check that all the modules are shown in the list below:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.5 List all Modules 3.png\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.6 Set Goals: `goal` \u003ca name\u003d\"Set_Goals\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Reach for the stars! Set your goal level according to NUS’ Honours Classification System"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "or list to show the corresponding levels. \\"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " \\"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `goal set LEVEL` or `goal list` \\"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " \\"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `goal set 2`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `goal list`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: Below is the NUS Honours Classification System with respect to the `LEVEL` available:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `6`: Highest Distinction (CAP **4.50 ~ 5.00**)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `5`: Distinction (CAP **4.00 ~ 4.49**)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `4`: Merit (CAP **3.50 ~ 3.99**)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `3`: Honours (CAP **3.00 ~ 3.49**)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `2`: Pass (CAP **2.00 ~ 2.99**)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `1`: Fail (CAP **\u003c 2.00**)\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: You can also show the same list in **MyMods**:100: using `goal list`:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "To set your goal to 2 (CAP4.00 ~ 4.49):"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `goal set 2` into the command box,  and press Enter to execute it. \\"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.6 Set Goals 1.png\"\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message: \\"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.6 Set Goals 2.png\"\u003e "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: You can check your current goal using the command `progress`:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.7 Recommend S/U: `recommendSU` \u003ca name\u003d\"Recommend_S/U\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Having a headache on what module you should S/U? This feature will ease your headache by recommending which module(s)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "from your list to S/U based on your goal, grades and if the module can be S/U-ed. \\"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " \\"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Format: `recommendSU` \\"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " \\"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "*   `recommendSU`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "To get recommendations on which modules to S/U:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `recommendSU` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.7 Recommend SU 1.png\"\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "2. The result box will display the message (if there are suitable modules to recommend): \\"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.7 Recommend SU 2.png\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. Check the module(s) that are recommended to S/U in the list below: \\"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.7 Recommend SU 3.png\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: If there are no modules for us to recommend you to S/U, the result box will show:\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: Manually added modules will not be recommended to S/U for the command `recommendSU` and cannot be S/U-ed"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "using the command `su`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.8 S/U module: `su` \u003ca name\u003d\"S/U_Module\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Didn’t so very well for a module? S/U the module in your list using this feature! \\"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " \\"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `su MODULE_CODE` \\"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " \\"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `su CS1101S`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `su CS1231S`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "To S/U a module (e.g. CS1231):"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `su CS1231S` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.8 SU Module 1.png\"\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message (if the module can be S/U-ed): \\"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.8 SU Module 2.png\"\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. Check if the module’s grade has been changed to “SU” in the list below: \\"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.8 SU Module 3.png\"\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":warning: If the module cannot be S/U-ed according to NUS’ guidelines or the module is manually added using parameter `mc/`, the command box will display:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.8 SU Module 4.png\"\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.9 Delete Module: `delete` \u003ca name\u003d\"Delete_Module\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "If you want to remove a module from your list, use this feature to delete the module along with its grade"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "from your list of modules. \\"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " \\"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Format: `delete MODULE_CODE` \\"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " \\"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "*   `delete CS1101S`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "To delete a module (e.g. CS1231) from the list: \\"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.9 Delete Module 1.png\"\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `delete CS1231` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.9 Delete Module 2.png\"\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message: \\"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.9 Delete Module 3.png\"\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "3. The module CS1231 will be deleted from the list below: \\"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.9 Delete Module 4.png\"\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.10 Exit Semester: `done` \u003ca name\u003d\"Exit_Semester\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Finally done with editing the semester? You will not be able to change any module in a particular"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "semester until you start another semester. \\"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "pongzers"
        },
        "content": " \\"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `done` \\"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "pongzers"
        },
        "content": " \\"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `done`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "To stop editing a semester (e.g. Y1S1):"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `done` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.10 Exit Semester 1.png\"\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message: \\"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.10 Exit Semester 2.png\"\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: You can check the current semester that you are editing at the bottom left corner of the interface:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.11 Find Module: `find` \u003ca name\u003d\"Find_Module\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Unable to find a module that you took? Search it using the find command. \\"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\\"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: find KEYWORD \\"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\\"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* `find CS1101S`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*  `find MA`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: Searching for part of the module code will work too. For example, you can `find CS1231` to find the"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "module CS1231S or `find CS` to find all modules that contain the word ‘CS’."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "To search for a module (e.g. CS):"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `find CS` into the command box, and press Enter to execute it."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The modules that contain the keyword ‘CS’ will be listed below:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: If there is no module that matches the keyword, the following message will be shown:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.12 Progress Report: `progress` \u003ca name\u003d\"Progress_Report\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Want to know how well you are doing relative to your goal? Use this feature for a progress report"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "that calculates the average CAP required for your remaining modules to achieve your target CAP."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "It shows you your current goal that you have set as well."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "Format: `progress [ddp]`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "*   `progress`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "*   `progress ddp`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ":bulb: ddp here refers to NUS’s Double Degree Programme. Include it if you are in a ddp."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "To calculate the CAP required to achieve your goal:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `progress` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.11 Progress Report 1.png\"\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message: \\"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.11 Progress Report 2.png\"\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.13 Get Help: `help` \u003ca name\u003d\"Get_Help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "If you are lost, this command will give you a summary of the command formats."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Format: `help` \\"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " \\"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "*   `help`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "To seek help:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `help` in the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.12 Get Help 1.png\"\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "2. The result box will display the message with an additional pop-up window: \\"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.12 Get Help 2.png\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "### 2.14 Exit Application: `exit` \u003ca name\u003d\"Exit_Application\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Format: `exit` \\"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " \\"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "*   `exit`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "To exit the application:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "1. Type `exit` into the command box, and press Enter to execute it. \\"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cimg src\u003d\"images/UG SS/2.13 Exit Application 1.png\"\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[Back to top](#Product_Overview)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 22,
      "kunnan97": 364,
      "pongzers": 15,
      "xyzhangg": 4,
      "-": 94,
      "augustinekau": 20
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(gradeBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "ecp -\u003e ec ++: index, updateModNameDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "title: MyMods"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T17-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T17-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T17-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "**MyMods is a desktop application for managing your module results.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* If you are interested in using MyMods, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* If you are interested about developing MyMods, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 1,
      "pongzers": 5,
      "-": 13
    }
  },
  {
    "path": "docs/team/augustinekau.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "title: Augustine Kau\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "## Project: MyMod"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "MyMod is a desktop app for tracking modules and grades, optimized for use for students who prefer typing via a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "With MyMods, you are able to keep track of your module results efficiently, easily make S/U decisions,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "and view your academic progress."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "It is written in Java."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* **Set Goal**: Added the ability for users to set their goal according to the university\u0027s Honours Classification System"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * What it does: Allow the user to set their goals or view the list of goal available."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Justification: This feature is needed for recommendSU and Progress report feature as it needs to take into account the user\u0027s desired goal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Highlights: This enhancement affects how the application saves and read from the json file. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to how the file is saved and read."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* **Recommend S/U**: Added the ability for MyMods to recommend modules to S/U for the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * What it does: Recommend S/U looks through the all the modules by the user and cross check with our data file on where the module can be S/U by NUS restrictions. It then compares that module\u0027s grade with the user\u0027s defined goal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Justification: This feature gives the user more purpose of using MyMods as it is a personalised list and it is useful as students (esp NUS freshmen) have difficulty deciding what modules they should S/U."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Highlights: This enhancement affects existing commands (semester feature) and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required consideration of OOP design principes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003daugustinekau\u0026tabRepo\u003dAY2021S1-CS2103T-T17-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Updated and refactored the code from the original AB3 code to fit MyMods functionality (Pull requests [\\#46](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/46), [\\#47](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/47))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Added documentation for the features `Set Goal`, `Recommend S/U` and `Find` (No PR by me as we typed collectively in Google Docs and pushed by one person)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Added documentation for Product Overview `Table of Contents`, `About`, `Glossaries` and `Getting Started` (No PR by me as we typed collectively in Google Docs and pushed by one person)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Did cosmetic tweaks to existing documentation by including tips and all screenshot annotation (No PR by me as we typed collectively in Google Docs and pushed by one person)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    * Added implementation details of the `recommendSU` feature."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Number of PRs reviewed (with trivial review comments): 31"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  * Reported 13 bugs and suggestions for other teams in PE-D"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 42
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "AddressBook - Level 3 is a desktop grade book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "augustinekau": 1
    }
  },
  {
    "path": "docs/team/kunnan97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "title: Hong Kunnan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "## Project: MyMods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "MyMods is a desktop mod tracking application used for tracking mods in NUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **New Feature**: Added the ability to change themes of GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * What it does: Allow user to switch between dark and light mode easily."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Justification: The purpose of the dark and light mode is to let users use light mode in the day while dark mode at"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  night so users can adapt to the lighting of day."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Credits: *{css file is adopted from AB3 from https://github.com/nus-cs2103-AY2021S1/tp wih light(newly created) and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  dark(modified) themed css file suited to our application}*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **New Feature**: Added autocomplete suggestions for command box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * What it does: Allow command box to suggest command types."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Credits *{Autocomplete is implemented from @Caleb Brinkman with modifications}*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkunnan97\u0026tabRepo\u003dAY2021S1-CS2103T-T17-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Managed releases `v1.2` - `v1.3.1` (3 releases) on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Updated the GUI color scheme, added option for user to switch between the two themes(Light and Dark)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  [\\#76](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/76)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Added box to display CAP"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  [\\#58](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/58)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * Converted the collaborative document to markdown plus cosmetic tweaks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    (Pull Requests"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#197](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/197)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#201](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/201)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#202](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/202)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#203](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/203)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#206](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/206)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#208](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/208)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#210](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/210)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#212](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/212)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#213](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/213)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    [\\#215](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/215))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    * Added documentation for the features `goal` and `delete`, work is done on Google Document collaboratively."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Number of PRs reviewed (with trivial review comments): 25"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  * Reported 4 bugs and suggestions for other teams in PE-D"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 47,
      "augustinekau": 8
    }
  },
  {
    "path": "docs/team/pongzers.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "title: Li Xupeng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "## Project: MyMods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "MyMod is a desktop mod tracking application used for tracking mods in NUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* **New Feature**: Added the ability to SU modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * What it does: allows the user to SU a module to not include the module in CAP calculation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can now easily SU modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * Highlights: This command made use of an implementation with data extracted from NUSMods API."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dpongzers\u0026tabRepo\u003dAY2021S1-CS2103T-T17-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * Contributed and aided debugging of releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * Updated the GUI to display the semester the user is currently editing (Pull request [\\#205](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/205))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    * Added documentation for the features `list` and `add` "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    * Generated skeleton of developer guide for team members to use. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  * Integrated data from a third-party API NUSMods into our app ([\\#182](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/182))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pongzers": 25,
      "augustinekau": 10
    }
  },
  {
    "path": "docs/team/xyzhangg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "title: Zhang Xin Yue\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "## Project: MyMod"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "MyMod is a desktop mod tracking application used for tracking mods in NUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "* **New Feature**: Added the Progress command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * What it does: Allows the user to track their progress towards their target CAP by calculating and displaying the average CAP required for their remaining modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Justification: This feature helps the user to set a clear goal for their remaining modules and keeps them informed about whether their target CAP is achievable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Highlights: This enhancement works together with our other new feature: the ability to set a goal or target CAP, and it required an in-depth analysis of design alternatives. A side feature to calculate the number of MCs taken was added to aid the implementation of this command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "* **New Feature**: Added the functionality to change semesters to Update command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * What it does: Allows the user to shift a module to a different semester."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Justification: This feature allows the user to change the semester of a module directly without having to delete it and add it in again."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Highlights: This enhancement affects existing features and commands that are related to semester and features to be added in the future for the update command, hence it required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Renamed Edit to Update and allows user to delete the grade of a module by leaving the grade parameter out when updating a module. (Pull requests [\\#54](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/54), [\\#119](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/119))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Modified CAP display to ensure it reflects the CAP correctly whenever changes are made to the module list. (Pull requests [\\#61](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/61))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Updated the UI to display the semester for each module. (Pull requests [\\#132](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/132))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Renamed AddressBook to GradeBook. (Pull requests [\\#221](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/221))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dxyzhangg\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dxyzhangg\u0026tabRepo\u003dAY2021S1-CS2103T-T17-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    * Added documentation for the features `progress`, `help` and `exit`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    * Added implementation details of the `progress` feature. (Pull requests [\\#93](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/93))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * PRs reviewed: 22"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  * Reported bugs and suggestions for other teams during PE-D: 7 issues"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 28,
      "augustinekau": 11
    }
  },
  {
    "path": "docs/team/zhaolingshan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "title: Zhao Lingshan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "## Project: MyMod"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "MyMod is a desktop mod tracking application used for tracking mods in NUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **New Feature**: Added the ability to start editing a semester."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * What it does: allows the user to start editing a particular semester one at a time. The user can add, delete, upgrade the grade or semester, and S/U modules in a semester only after the user starts that specific semester."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can edit the modules in a specific semester and keep track of the modules"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  he is taking in a specific semester, and the changes he made to them. The app should provide a convenient way to segregate the modules in different semesters to keep it organised and enhance readability."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in the future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **New Feature**: Added the ability to stop editing a semester."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * What it does: allows the user to stop editing a particular semester one at a time. The user cannot add, delete, upgrade the grade or semester, and S/U modules in a semester after the user exits that specific semester."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can stop editing the modules in a specific semester which allows the user to navigate to and make changes to the modules in a different semester."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  This allows users to make changes to the modules in different semesters. The app should provide a convenient way to segregate the modules in different semesters to keep it organised and enhance readability."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  Once the user is done editing a specific semester, he will be brought back to the main list of modules."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in the future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **New Feature**: Added the ability to calculate and display the current CAP."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * What it does: calculates the CAP automatically after every modification the user makes including adding a module, updating the grade of a module, and S/U-ing a module."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can view how each change he makes will affect the CAP and see an instantaneous change in the CAP without having to do any manual calculations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Highlights: This enhancement required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to the UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **New Feature**: Added the ability to add a module by using the `add` command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * What it does: allows the user to add a module only after the user has started a semester by keying in a module code followed by a grade which is optional."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can add modules he has taken or is taking in different semesters which allows him to keep track of the modules he has taken, and the modules"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  he will be taking in the future. This feature provides a primary function and is one of the core features which build the foundation of our app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in the future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dzhaolingshan\u0026tabRepo\u003dAY2021S1-CS2103T-T17-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Updated and shortened the prefixes used to prioritise fast typists (Pull request [\\#193](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/193))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Edited `done` command to omit user input of semester to prioritise fast typists (Pull request [\\#96](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/96))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Sorted the main list of modules according to semester (Pull request [\\#87](https://github.com/AY2021S1-CS2103T-T17-1/tp/pull/87))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    * Added documentation for the features `delete`, `done` and `find` "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    * Added implementation details of the `start semester` feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Number of PRs reviewed: 28"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "  * Reported 9 bugs and suggestions with in-depth explanations and detailed annotated screenshots for other teams in PE-D"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 43,
      "augustinekau": 9
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their grade book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/grade/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.grade.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.grade.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Changes the remark of an existing module in the grade book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the module identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"by the index number used in the last module listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.grade.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param index of the module in the filtered module list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param remark of the module to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.grade.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of module data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the module’s moduleName). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a module."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Create a new `Remark` in `seedu.grade.model.module`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each module."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Simply add the following to [`seedu.grade.ui.ModuleCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty grade book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public PersonCard(Person module, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    remark.setText(module.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Person moduleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Person editedModule \u003d new Person(moduleToEdit.getName(), moduleToEdit.getPhone(), moduleToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                moduleToEdit.getAddress(), remark, moduleToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.setPerson(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedModule));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * {@code moduleToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private String generateSuccessMessage(Person moduleToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return String.format(message, moduleToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Following convention, let’s change the moduleName of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 367,
      "augustinekau": 27
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `grade` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "The `grade` field in `Person` is actually an instance of the `seedu.address.model.module.Gradeclass. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "1. Safe delete the field `grade` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "1. Remove the usages of `grade` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `grade` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `grade` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$grade` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "![$grade](../images/remove/$grade.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "private Label grade;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cLabel fx:id\u003d\"grade\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$grade\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `grade` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \"moduleName\": \"Person with invalid moduleName field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    \"grade\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "You can go through each individual `json` file and manually remove the `grade` field."
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "augustinekau": 15
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.grade.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "![Using the `Search for target by moduleName` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "       Person moduleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "       Person editedModule \u003d createEditedPerson(moduleToEdit, updateModNameDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "       if (!moduleToEdit.isSamePerson(editedModule) \u0026\u0026 model.hasPerson(editedModule)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "       model.setPerson(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "       modules.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    3.  Save the grade book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    6.  Add a new entity to the grade book"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 240,
      "augustinekau": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.storage.GradeBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.storage.JsonGradeBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing GradeBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBookStorage gradeBookStorage \u003d new JsonGradeBookStorage(userPrefs.getGradeBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storage \u003d new StorageManager(gradeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GoalTarget goalTarget \u003d gradeBookStorage.getGoalTarget();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, goalTarget);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s grade book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * The data from the sample grade book will be used instead if {@code storage}\u0027s grade book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * or an empty grade book will be used instead if errors occur when reading {@code storage}\u0027s grade book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Optional\u003cReadOnlyGradeBook\u003e gradeBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ReadOnlyGradeBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            gradeBookOptional \u003d storage.readGradeBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (!gradeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample GradeBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            initialData \u003d gradeBookOptional.orElseGet(SampleDataUtil::getSampleGradeBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty GradeBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            initialData \u003d new GradeBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradeBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            initialData \u003d new GradeBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new ModelManager(initialData, userPrefs, goalTarget);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradeBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        logger.info(\"Starting GradeBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 23,
      "-": 158,
      "augustinekau": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final String LOG_FILE \u003d \"gradebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_MODULE_CANNOT_BE_SU \u003d \"%1$s cannot be S/U-ed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_NAME \u003d \"The module name provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String MESSAGE_NO_MODULES_FOUND \u003d \"No modules were found!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_SEQUENCE \u003d \"Start a semester before modifying the module list.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_INVALID_DONE_COMMAND \u003d \"There is no semester being modified.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER \u003d \"The semester you have entered is invalid.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Only Y1S1, Y1S2, Y2S1, Y2S2, Y3S1, Y3S2, Y4S1, Y4S2, Y5S1, and Y5S2 are accepted.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_IN_WRONG_SEMESTER \u003d \"The module you are trying to delete is in \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_UPDATE_MODULE_IN_WRONG_SEMESTER \u003d \"The module you are trying to update is in \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_CURRENT_SEMESTER \u003d \"The semester you are currently editing is \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_DIRECT_TO_CORRECT_SEMESTER \u003d \"Please navigate to \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_DIRECT_TO_CORRECT_SEMESTER_TO_DELETE \u003d \" to delete the module.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_DIRECT_TO_CORRECT_SEMESTER_TO_UPDATE \u003d \" to update the module.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 10,
      "pongzers": 1,
      "xyzhangg": 1,
      "-": 10,
      "augustinekau": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/GetModuleIndex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Gets the index of a module from a module list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class GetModuleIndex {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final int MODULE_NOT_FOUND_INDEX \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static Index getIndex(List\u003cModule\u003e moduleList, ModuleName moduleName) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (module.getModuleName().equals(moduleName)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                int index \u003d moduleList.indexOf(module);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                return Index.fromZeroBased(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return Index.fromZeroBased(MODULE_NOT_FOUND_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        sentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        word \u003d word.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return sentence.contains(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 3,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the GradeBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @see seedu.address.model.Model#getGradeBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    ReadOnlyGradeBook getGradeBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of modules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the user prefs\u0027 grade book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Path getGradeBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns the cap calculated from the list of modules."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the cap to 2 significant figures."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    String generateCap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Returns the sem the user is currently editting."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return a string representation of the sem."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    String generateSem();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns the filtered list of modules by semester."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the filtered module list according to semester."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    ObservableList\u003cModule\u003e filterModuleListBySem();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Returns the filtered list of modules by read only semester."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return the filtered module list according to semester."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    ObservableList\u003cModule\u003e filterModuleListByReadOnlySem();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    ObservableList\u003cModule\u003e sortModuleListBySem();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void resetFilteredList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 18,
      "pongzers": 14,
      "xyzhangg": 10,
      "-": 41,
      "augustinekau": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.parser.GradeBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final GradeBookParser gradeBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBookParser \u003d new GradeBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Command command \u003d gradeBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            storage.saveGradeBook(model.getGradeBook(), model.getGoalTarget());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public ReadOnlyGradeBook getGradeBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return model.getGradeBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Path getGradeBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return model.getGradeBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Generates the cap calculated from the list of modules."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a string representation of the cap to 2 significant figures."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String generateCap() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return model.generateCapAsString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Filters the module list according to semester."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the filtered list of modules by semester."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ObservableList\u003cModule\u003e filterModuleListBySem() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return model.filterModuleListBySem();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Filters the module list according to read only semester."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return the filtered list of modules by semester."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public ObservableList\u003cModule\u003e filterModuleListByReadOnlySem() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return model.filterModuleListByReadOnlySem();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ObservableList\u003cModule\u003e sortModuleListBySem() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return model.sortModuleListBySem();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void resetFilteredList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model.resetFilteredList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String generateSem() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return model.generateSem();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    };"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 25,
      "pongzers": 17,
      "xyzhangg": 15,
      "-": 68,
      "augustinekau": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Adds a module to the grade book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to your module list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + PREFIX_MOD_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + \"[\" + PREFIX_GRADE + \"GRADE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + PREFIX_MODULAR_CREDIT + \"MC] \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + PREFIX_MOD_NAME + \"CS2103T\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + PREFIX_GRADE + \"A+ \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in your module list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public AddCommand(Module module) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (semester \u003d\u003d Semester.NA) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_SEQUENCE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 8,
      "pongzers": 6,
      "xyzhangg": 1,
      "-": 40,
      "augustinekau": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Clears the grade book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Grade book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model.setGradeBook(new GradeBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * recommendSU command is called."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private final boolean isRecommendSuOrFind;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * List command is called."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private final boolean isList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                         boolean isRecommendSuOrFind, boolean isList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isRecommendSuOrFind \u003d isRecommendSuOrFind;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isList \u003d isList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public boolean isList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return isList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public boolean isRecommendSuOrFind() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return isRecommendSuOrFind;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \u0026\u0026 isRecommendSuOrFind \u003d\u003d otherCommandResult.isRecommendSuOrFind;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, isRecommendSuOrFind);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 10,
      "kunnan97": 4,
      "pongzers": 18,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.commons.core.index.GetModuleIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Deletes a module identified using it\u0027s displayed name from the module list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \": Deletes the module identified by the module name used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"Parameters: MODULE_NAME\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ModuleName targetModuleName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a DeleteCommand object with a module name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * The module name must not be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param targetModuleName the name of the module to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public DeleteCommand(ModuleName targetModuleName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        requireNonNull(targetModuleName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.targetModuleName \u003d targetModuleName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester currentSemester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (currentSemester \u003d\u003d Semester.NA) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_SEQUENCE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Index targetModuleIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            targetModuleIndex \u003d GetModuleIndex.getIndex(lastShownList, targetModuleName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module moduleToDelete \u003d lastShownList.get(targetModuleIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semesterOfModuleToDelete \u003d moduleToDelete.getSemester();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (semesterOfModuleToDelete !\u003d currentSemester) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    Messages.MESSAGE_DELETE_MODULE_IN_WRONG_SEMESTER + semesterOfModuleToDelete + \".\\n\" + Messages"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                            .MESSAGE_CURRENT_SEMESTER + currentSemester + \".\\n\" + Messages"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                            .MESSAGE_DIRECT_TO_CORRECT_SEMESTER + semesterOfModuleToDelete + Messages"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                            .MESSAGE_DIRECT_TO_CORRECT_SEMESTER_TO_DELETE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                \u0026\u0026 targetModuleName.equals(((DeleteCommand) other).targetModuleName)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 22,
      "xyzhangg": 16,
      "-": 36,
      "augustinekau": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Stops the modifying of the module list in a semester."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Signifies that the user is done updating the module list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * and prevents the user from adding, updating or deleting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * modules in a particular semester."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \": Stops the adding or updating of modules in the semester stated.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_DONE_SEMESTER_SUCCESS \u003d \"You are done updating: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (semester \u003d\u003d Semester.NA) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DONE_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semesterManager.setCurrentSemester(Semester.NA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_SEMESTER_SUCCESS, semester),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return other instanceof DoneCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 38,
      "pongzers": 1,
      "xyzhangg": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Exits the application.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return other instanceof ExitCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 9,
      "pongzers": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \": Finds all module codes which contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            + \"the specified keywords (non-case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2100\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final ModuleNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public FindCommand(ModuleNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        int searchResultsListSize \u003d model.getFilteredModuleList().size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (searchResultsListSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String.format(Messages.MESSAGE_NO_MODULES_FOUND));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW, searchResultsListSize),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    false, false, true, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 3,
      "kunnan97": 1,
      "pongzers": 8,
      "-": 34,
      "augustinekau": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return other instanceof HelpCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 5,
      "pongzers": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Lists all modules in all semesters in MyMods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * to the user regardless of whether the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * keys in this command inside a semester or not."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all modules in all semesters.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules in all semesters\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return other instanceof ListCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 11,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ProgressCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOUBLE_DEGREE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Calculates the CAP required to achieve the user\u0027s target CAP for the remaining modules that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * they will take."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class ProgressCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"progress\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows your target CAP and\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"calculates the average CAP required for your remaining modules to reach your target.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"[\" + PREFIX_DOUBLE_DEGREE + \"]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_DOUBLE_DEGREE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_REQUIRED_CAP \u003d \"The average CAP required for your remaining modules \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"to meet your target is: %.2f\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_TARGET_CAP \u003d \"Your target CAP is: %.2f\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_UNACHIEVABLE_CAP \u003d \"Sorry! Your target CAP cannot be achieved :(\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final int TOTAL_MODULAR_CREDIT \u003d 160;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final int TOTAL_MODULAR_CREDIT_DDP \u003d 200;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final double MAX_CAP \u003d 5.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final double MIN_CAP \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final boolean isDdp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public ProgressCommand(boolean isDdp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.isDdp \u003d isDdp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double currentCap \u003d model.generateCap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GoalTarget userGoalTarget \u003d model.getGoalTarget();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double targetCap \u003d GoalTarget.getUserGoalGrade(userGoalTarget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double currentMc \u003d model.getCurrentMc();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double totalMc \u003d isDdp ? TOTAL_MODULAR_CREDIT_DDP : TOTAL_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double remainingMc \u003d totalMc - currentMc;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double currentWeightedCap \u003d currentCap * currentMc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double totalWeightedCap \u003d targetCap * totalMc;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double requiredCap \u003d (totalWeightedCap - currentWeightedCap) / remainingMc;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (requiredCap \u003e MAX_CAP || requiredCap \u003c MIN_CAP) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_TARGET_CAP, targetCap)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    + MESSAGE_UNACHIEVABLE_CAP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_TARGET_CAP, targetCap)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    + String.format(MESSAGE_REQUIRED_CAP, requiredCap));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (!(other instanceof ProgressCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return isDdp \u003d\u003d ((ProgressCommand) other).isDdp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "xyzhangg": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecommendSuCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.util.ModuleInfoRetriever;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Recommend modules to S/U based on user\u0027s goal."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class RecommendSuCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recommendSU\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \": Recommends modules to S/U based on your goal and CAP.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here\u0027s the list of module(s) that we recommend to S/U!\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"Use command \u0027list\u0027 to view all modules again.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NO_RECOMMENDATION \u003d \"Looks like there is no module that we \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"recommend to S/U based on your goal!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please key in your goal using \u0027goal\u0027 command for \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"S/U recommendations!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget userGoal \u003d model.getGoalTarget();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!GoalTarget.isValidGoal(userGoal.getGoalTarget())) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            // user has yet to key in goal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE, false, false,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    true, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        filterModule(model, userGoal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return getCommandResult(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns command result based on the filtered module list size."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param model Model."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return CommandResult."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private CommandResult getCommandResult(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        int modListSize \u003d model.getFilteredModuleList().size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (modListSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_NO_RECOMMENDATION, false,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    false, true, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Filter the modules to only modules that MyMods recommends to user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param model Current model."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goal  User\u0027s goal."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private void filterModule(Model model, GoalTarget goal) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.updateFilteredModuleList(x -\u003e isRecommendSu(goal, x));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Recommend if user should S/U a module based on three criterion."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goal User\u0027s goal."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param x    Module to be checked."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return boolean True if all three conditions are satisfied, else false."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private boolean isRecommendSu(GoalTarget goal, Module x) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return isGraded(x) \u0026\u0026 isModSuAble(x) \u0026\u0026 isGradeBelowGoal(x, goal);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Compares module\u0027s grade with user\u0027s goal."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param x    Module to be compared."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goal Goal set by user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return boolean True if the module grade is under user\u0027s goal, else false."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private boolean isGradeBelowGoal(Module x, GoalTarget goal) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return x.getGrade().getGradePoint() \u003c GoalTarget.getUserGoalGrade(goal);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Checks if module\u0027s grade is valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param x    Module to be compared."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return boolean True if the module grade is a valid grade, ie not NA or SUed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private boolean isGraded(Module x) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return (x.getGrade().toString() !\u003d \"NA\" \u0026\u0026 x.getGrade().toString() !\u003d \"SU\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if module can be S/U from data."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param module Module to be checked."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return True if module can be S/U, false otherwise."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private boolean isModSuAble(Module module) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String status \u003d ModuleInfoRetriever.retrieve(module.getModuleName().fullModName).get(\"su\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return status.contains(\"true\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return other instanceof RecommendSuCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 17,
      "pongzers": 9,
      "augustinekau": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SET_GOAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Set the goal of the user for S/U recommendations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your goal has been set to: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \": Sets your goal.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"Parameters: \u0027\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + PREFIX_SET_GOAL + \"NUMBER\u0027 \" + \"or \u0027\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + PREFIX_LIST_GOAL + \"\u0027\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SET_GOAL + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final GoalTarget goalTarget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for SetCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goalTarget User goal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public SetCommand(GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(goalTarget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d goalTarget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (goalTarget.goalTarget \u003d\u003d GoalTarget.DEFAULT_GOAL) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return new CommandResult(GoalTarget.GOAL_LIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.setGoalTarget(goalTarget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, goalTarget));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                || (other instanceof SetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 goalTarget.equals(((SetCommand) other).goalTarget));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Starts the updating of the module list in a semester."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Enables the user to add,  or delete modules in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * a particular semester."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \": Starts adding or updating modules in the semester stated.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"Parameters: SEMESTER\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Y2S1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_START_SEMESTER_SUCCESS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            \"You are now updating: %1$s \\n The modules you are taking in %1$s:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final Semester toStart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Creates a StartCommand to add the specified {@code Semester}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public StartCommand(Semester semester) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!SemesterManager.isValidSemester(semester.toString())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        toStart \u003d semester;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Semester getStartSemester() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return toStart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semesterManager.setCurrentSemester(toStart);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_START_SEMESTER_SUCCESS, toStart));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                \u0026\u0026 toStart.equals(((StartCommand) other).toStart));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 53,
      "xyzhangg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * SUs the module indicated"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class SuCommand extends UpdateCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"su\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": SUs the module identified \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + \"by the module name displayed in the module list.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + \"MODULE_NAME \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + \" CS2103T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param moduleName              of the module in the filtered module list to update"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param updateModNameDescriptor details to update the module with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public SuCommand(ModuleName moduleName, UpdateModNameDescriptor updateModNameDescriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(moduleName, updateModNameDescriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "pongzers": 23,
      "augustinekau": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULE_CANNOT_BE_SU;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.commons.core.index.GetModuleIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModularCredit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.util.ModuleInfoRetriever;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Updates the details of an existing module in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the module identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"by the module name displayed in the module list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"Parameters:\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + PREFIX_MOD_NAME + \"MODULE_NAME \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            + \"[\" + PREFIX_GRADE + \"GRADE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"[\" + PREFIX_SEMESTER + \"SEM] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + PREFIX_MOD_NAME + \"CS2103T\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + PREFIX_GRADE + \"A\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_UPDATE_MODULE_SUCCESS \u003d \"Updated Module: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ModuleName moduleName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final UpdateModNameDescriptor updateModNameDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param moduleName              of the module in the filtered module list to update"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param updateModNameDescriptor details to update the module with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateCommand(ModuleName moduleName, UpdateModNameDescriptor updateModNameDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireNonNull(updateModNameDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.updateModNameDescriptor \u003d new UpdateModNameDescriptor(updateModNameDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester currentSemester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (currentSemester \u003d\u003d Semester.NA) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_SEQUENCE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            index \u003d GetModuleIndex.getIndex(model.getFilteredModuleList(), moduleName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module moduleToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d createUpdatedModule(moduleToUpdate, updateModNameDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Semester semesterOfModuleToUpdate \u003d moduleToUpdate.getSemester();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (semesterOfModuleToUpdate !\u003d currentSemester) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    Messages.MESSAGE_UPDATE_MODULE_IN_WRONG_SEMESTER + semesterOfModuleToUpdate + \".\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                            + Messages.MESSAGE_CURRENT_SEMESTER + currentSemester + \".\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                            + Messages.MESSAGE_DIRECT_TO_CORRECT_SEMESTER + semesterOfModuleToUpdate"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                            + Messages.MESSAGE_DIRECT_TO_CORRECT_SEMESTER_TO_UPDATE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (!moduleToUpdate.isSameModule(updatedModule) \u0026\u0026 model.hasModule(updatedModule)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if ((updateModNameDescriptor.grade !\u003d null)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \u0026\u0026 updateModNameDescriptor.grade.toString() \u003d\u003d \"SU\") {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            // checks if module can be SU from database"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (!UpdateCommand.isModSuAble(moduleName)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MODULE_CANNOT_BE_SU, moduleName.fullModName));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model.setModule(moduleToUpdate, updatedModule);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_MODULE_SUCCESS, updatedModule));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToUpdate}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * updated with {@code updatedModuleDescriptor}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static Module createUpdatedModule(Module moduleToUpdate, UpdateModNameDescriptor updateModNameDescriptor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assert moduleToUpdate !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName updatedModuleName \u003d updateModNameDescriptor.getName().orElse(moduleToUpdate.getModuleName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Grade updatedGrade \u003d updateModNameDescriptor.getGrade().orElse(moduleToUpdate.getGrade());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateModNameDescriptor.getTags().orElse(moduleToUpdate.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        // modularCredit is not edited"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModularCredit modularCredit \u003d moduleToUpdate.getModularCredit();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Semester semester \u003d updateModNameDescriptor.getSemester().orElse(moduleToUpdate.getSemester());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new Module(updatedModuleName, updatedGrade, updatedTags, modularCredit, semester);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return moduleName.equals(e.moduleName)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                \u0026\u0026 updateModNameDescriptor.equals(e.updateModNameDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Stores the details to update the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static class UpdateModNameDescriptor {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        private ModuleName moduleName;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        private Grade grade;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        private Semester semester;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        public UpdateModNameDescriptor() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public UpdateModNameDescriptor(UpdateModNameDescriptor toCopy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            setName(toCopy.moduleName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            setSemester(toCopy.semester);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public boolean isAnyFieldUpdated() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleName, grade, tags, semester);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Sets {@code moduleName} to this object\u0027s {@code moduleName}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * A defensive copy of {@code moduleName} is used internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void setName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Returns an unmodifiable moduleName set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code moduleName} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public Optional\u003cModuleName\u003e getName() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Sets {@code grade} to this object\u0027s {@code grade}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * A defensive copy of {@code grade} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Returns an unmodifiable grade set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code grade} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Sets {@code semester} to this object\u0027s {@code semester}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * A defensive copy of {@code semester} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        public void setSemester(Semester semester) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            this.semester \u003d semester;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Returns an unmodifiable semester set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code semester} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        public Optional\u003cSemester\u003e getSemester() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return Optional.ofNullable(semester);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (!(other instanceof UpdateModNameDescriptor)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            UpdateModNameDescriptor e \u003d (UpdateModNameDescriptor) other;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    \u0026\u0026 getGrade().equals(e.getGrade())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    \u0026\u0026 getSemester().equals((e.getSemester()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Returns true if module can be S/U from data."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param moduleName Module to be checked."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return True if module can be S/U, false otherwise."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static boolean isModSuAble(ModuleName moduleName) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String status \u003d ModuleInfoRetriever.retrieve(moduleName.fullModName).get(\"su\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return status.contains(\"true\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 60,
      "pongzers": 24,
      "xyzhangg": 53,
      "-": 118,
      "augustinekau": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "augustinekau": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModularCredit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MOD_NAME, PREFIX_GRADE, PREFIX_TAG, PREFIX_MODULAR_CREDIT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MOD_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_MOD_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ModularCredit modularCredit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULAR_CREDIT)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            modularCredit \u003d ParserUtil.parseModularCredit(argMultimap.getValue(PREFIX_MODULAR_CREDIT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            modularCredit \u003d new ModularCredit(moduleName.fullModName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_GRADE)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            module \u003d new Module(moduleName, grade, tagList, modularCredit, semester);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            module \u003d new Module(moduleName, tagList, modularCredit, semester);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new AddCommand(module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 18,
      "pongzers": 5,
      "-": 41,
      "augustinekau": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_MOD_NAME \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_MODULAR_CREDIT \u003d new Prefix(\"mc/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_SET_GOAL \u003d new Prefix(\"set \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_LIST_GOAL \u003d new Prefix(\"list\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_DOUBLE_DEGREE \u003d new Prefix(\"ddp\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            ModuleName moduleName \u003d ParserUtil.parseName(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new DeleteCommand(moduleName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DoneCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!trimmedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new DoneCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Parses input arguments and creates a new ExitCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ExitCommandParser implements Parser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExitCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and returns a ExitCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ExitCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!trimmedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new FindCommand(new ModuleNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 4,
      "-": 31,
      "augustinekau": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradeBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.ProgressCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.RecommendSuCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.logic.commands.SuCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class GradeBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case RecommendSuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new RecommendSuCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        case ProgressCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new ProgressCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        case SuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return new SuCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 11,
      "pongzers": 3,
      "xyzhangg": 9,
      "-": 71,
      "augustinekau": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public HelpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!trimmedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ListCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!trimmedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 16,
      "pongzers": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModularCredit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static ModuleName parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String trimmedName \u003d name.trim().toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!ModuleName.isValidModName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new ModuleName(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Parses a {@code String semester} into a {@code Semester}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws ParseException if the given {@code semester} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Semester parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String trimmedSemester \u003d semester.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!SemesterManager.isValidSemester(trimmedSemester)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return Semester.valueOf(trimmedSemester);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Parses a {@code String modularCredit} into a {@code ModularCredit}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid and not an integer."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static ModularCredit parseModularCredit(String modularCredit) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        requireNonNull(modularCredit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String trimmedModularCredit \u003d modularCredit.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            int integerModularCredit \u003d Integer.parseInt(trimmedModularCredit);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (!ModularCredit.isValidModularCredit(integerModularCredit)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                throw new ParseException(ModularCredit.MESSAGE_INVALID_MODULAR_CREDIT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return new ModularCredit(integerModularCredit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            throw new ParseException(ModularCredit.MESSAGE_INVALID_MODULAR_CREDIT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Parses a {@code String grade} into an {@code Grade}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static Grade parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String trimmedGrade \u003d grade.trim().toUpperCase();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new Grade(trimmedGrade);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Parses a {@code String goal} into a {@code Goal}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws ParseException if the given {@code goal} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static GoalTarget parseGoal(String goal) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String trimmedGoal \u003d goal.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        int intGoal \u003d Integer.parseInt(trimmedGoal);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!GoalTarget.isValidGoal(intGoal)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new ParseException(GoalTarget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new GoalTarget(intGoal);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 11,
      "kunnan97": 2,
      "pongzers": 14,
      "-": 91,
      "augustinekau": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ProgressCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOUBLE_DEGREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.ProgressCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class ProgressCommandParser implements Parser\u003cProgressCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final boolean isDdp \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public ProgressCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new ProgressCommand(!isDdp);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else if (trimmedArgs.equals(PREFIX_DOUBLE_DEGREE.getPrefix())) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new ProgressCommand(isDdp);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProgressCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecommendSuCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.RecommendSuCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Parses input arguments and creates a new RecommendSUCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class RecommendSuCommandParser implements Parser\u003cRecommendSuCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecommendSUCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and returns a RecommendSUCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public RecommendSuCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (!trimmedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RecommendSuCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new RecommendSuCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SET_GOAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Parses input arguments and creates a new SetCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * and returns a SetCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public SetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_SET_GOAL, PREFIX_LIST_GOAL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_SET_GOAL)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            // --set is inputted; any --list will be ignored"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            GoalTarget goalTarget \u003d ParserUtil.parseGoal(argMultimap.getValue(PREFIX_SET_GOAL).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return new SetCommand(goalTarget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_LIST_GOAL)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return new SetCommand(new GoalTarget());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            // both --set and --list is NOT inputted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and returns a StartCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public StartCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String capitalisedUserInput \u003d userInput.toUpperCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Semester semester \u003d ParserUtil.parseSemester(capitalisedUserInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new StartCommand(semester);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_SEMESTER), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.logic.commands.SuCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Parses input arguments and creates a new SuCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class SuCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * and returns an SuCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public SuCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (userInput.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        ModuleName moduleName \u003d new ModuleName(userInput.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor updateModNameDescriptor \u003d new UpdateCommand.UpdateModNameDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        updateModNameDescriptor.setName(moduleName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        updateModNameDescriptor.setGrade(new Grade(\"SU\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new SuCommand(moduleName, updateModNameDescriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 33,
      "augustinekau": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateModNameDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.Cap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MOD_NAME, PREFIX_GRADE, PREFIX_TAG, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MOD_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_MOD_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateModNameDescriptor updateModNameDescriptor \u003d new UpdateModNameDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updateModNameDescriptor.setName(moduleName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            updateModNameDescriptor.setGrade(ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            updateModNameDescriptor.setGrade(new Grade(Cap.NA.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        parseTagsForUpdate(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(updateModNameDescriptor::setTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (!updateModNameDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            updateModNameDescriptor.setSemester(ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new UpdateCommand(moduleName, updateModNameDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForUpdate(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 5,
      "xyzhangg": 24,
      "-": 44,
      "augustinekau": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GradeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class GradeBook implements ReadOnlyGradeBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBook() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Creates an GradeBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBook(ReadOnlyGradeBook toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Resets the existing data of this {@code GradeBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void resetData(ReadOnlyGradeBook newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Adds a module to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * The module must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void addModule(Module p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code updateModule}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * The module identity of {@code updateModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule(Module target, Module updateModule) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireNonNull(updateModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        modules.setModule(target, updateModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Removes {@code key} from this {@code GradeBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                || (other instanceof GradeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                \u0026\u0026 modules.equals(((GradeBook) other).modules));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 14,
      "-": 80,
      "augustinekau": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the user prefs\u0027 grade book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Path getGradeBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Sets the user prefs\u0027 grade book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void setGradeBookFilePath(Path gradeBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Replaces grade book data with the data in {@code gradeBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void setGradeBook(ReadOnlyGradeBook gradeBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the GradeBook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    ReadOnlyGradeBook getGradeBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the grade book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * The module must exist in the grade book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * {@code module} must not already exist in the grade book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Replaces the given module {@code target} with {@code updatedModule}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * The module identity of {@code updatedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void setModule(Module target, Module updatedModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Filters the module list by semester."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the filtered list of modules by semester."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    ObservableList\u003cModule\u003e filterModuleListBySem();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Filters the module list by read only semester."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return the filtered list of modules by read only semester."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    ObservableList\u003cModule\u003e filterModuleListByReadOnlySem();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    ObservableList\u003cModule\u003e sortModuleListBySem();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the current CAP as a string."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    String generateCapAsString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the current CAP as a double."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    double generateCap();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Returns the current sem as a String."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    String generateSem();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the total number of MCs as an integer ."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    int getCurrentMc();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    void setGoalTarget(GoalTarget goalTarget);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    GoalTarget getGoalTarget();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Resets the filtered list to contain all modules."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void resetFilteredList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 19,
      "pongzers": 11,
      "xyzhangg": 33,
      "-": 61,
      "augustinekau": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.util.CapCalculator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.util.McCalculator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.util.ModuleListFilter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.util.ModuleListSorter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Represents the in-memory model of the grade book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final GradeBook gradeBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private GoalTarget goalTarget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Initializes a ModelManager with the given gradeBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public ModelManager(ReadOnlyGradeBook gradeBook, ReadOnlyUserPrefs userPrefs, GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireAllNonNull(gradeBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        logger.fine(\"Initializing with grade book: \" + gradeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.gradeBook \u003d new GradeBook(gradeBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d goalTarget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.gradeBook.getModuleList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this(new GradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Path getGradeBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return userPrefs.getGradeBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setGradeBookFilePath(Path gradeBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireNonNull(gradeBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userPrefs.setGradeBookFilePath(gradeBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradeBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setGradeBook(ReadOnlyGradeBook gradeBook) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.gradeBook.resetData(gradeBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public ReadOnlyGradeBook getGradeBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBook.hasModule(module);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.removeModule(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.addModule(module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule(Module target, Module updatedModule) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireAllNonNull(target, updatedModule);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.setModule(target, updatedModule);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * {@code versionedGradeBook}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Filters the module list according to semester."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the filtered list of modules by semester."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public FilteredList\u003cModule\u003e filterModuleListBySem() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ModuleListFilter.filterModulesBySemester(filteredModules);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Filters the module list according to read only semester."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return the filtered list of modules by read only semester."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public FilteredList\u003cModule\u003e filterModuleListByReadOnlySem() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return ModuleListFilter.filterModulesByReadOnlySemester(filteredModules);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public FilteredList\u003cModule\u003e sortModuleListBySem() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ModuleListSorter.sortModuleList(filteredModules);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Resets the filtered list to contain all modules."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void resetFilteredList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBook.equals(other.gradeBook)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CAP Calculation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Calculates the CAP of the current list of modules and return it as a string."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return a string representation of the CAP to 2 significant figures."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public String generateCapAsString() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        double cap \u003d generateCap();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return String.format(\"%.2f\", cap);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Calculates the CAP of the current list of modules and returns it as a double."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return the CAP as a double value."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public double generateCap() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return CapCalculator.calculateCap(filteredModules);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MC Calculation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public int getCurrentMc() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return McCalculator.calculateMc(filteredModules);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Goal Setting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setGoalTarget(GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireAllNonNull(goalTarget);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d goalTarget;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public GoalTarget getGoalTarget() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return goalTarget;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String generateSem() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        SemesterManager semester \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return semester.getCurrentSemester().toString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 24,
      "pongzers": 17,
      "xyzhangg": 58,
      "-": 112,
      "augustinekau": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyGradeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Unmodifiable view of a grade book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public interface ReadOnlyGradeBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 2,
      "-": 11,
      "augustinekau": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Path getGradeBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Path gradeBookFilePath \u003d Paths.get(\"data\" , \"gradebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        setGradeBookFilePath(newUserPrefs.getGradeBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Path getGradeBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setGradeBookFilePath(Path gradeBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireNonNull(gradeBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.gradeBookFilePath \u003d gradeBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                \u0026\u0026 gradeBookFilePath.equals(o.gradeBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return Objects.hash(guiSettings, gradeBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + gradeBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Cap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Represents the 12 different types of grade"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * encapsulated with its corresponding grade point."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public enum Cap {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    A_PLUS(\"A+\", 5.0),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    A(\"A\", 5.0),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    A_MINUS(\"A-\", 4.5),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    B_PLUS(\"B+\", 4.0),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    B(\"B\", 3.5),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    B_MINUS(\"B-\", 3.0),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    C_PLUS(\"C+\", 2.5),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    C(\"C\", 2.0),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    D_PLUS(\"D+\", 1.5),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    D(\"D\", 1.0),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    F(\"F\", 0.0),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    NA(\"NA\", 0.0),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    SU(\"SU\", 0.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the string representation of the grade."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final String gradeString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Represents the corresponding grade point of the grade."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final double gradePoint;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a Cap object with a grade"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * string and its respective grade point."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param gradeString the string representation of the grade."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param gradePoint  the corresponding grade point of the grade."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Cap(String gradeString, double gradePoint) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.gradeString \u003d gradeString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.gradePoint \u003d gradePoint;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String getGradeString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return gradeString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return gradePoint;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static String getEmptyGrade() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return NA.getGradeString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 53,
      "pongzers": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/GoalTarget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Represents the user\u0027s goal following the Honours Classification in NUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class GoalTarget {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            \"Goal should be an integer from 1 to 6, and it should not be blank.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    + \"\\nUse command \u0027goal list\u0027 to see all goals!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String HIGHEST_DISTINCTION \u003d \"Highest Distinction (CAP 4.50 ~ 5.00)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String DISTINCTION \u003d \"Distinction (CAP 4.00 ~ 4.49)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MERIT \u003d \"Merit (CAP 3.50 ~ 3.99)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String HONOURS \u003d \"Honours (CAP 3.00 ~ 3.49)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String PASS \u003d \"Pass (CAP 2.00 ~ 2.99)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String FAIL \u003d \"Fail (CAP \u003c 2.00)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String GOAL_LIST \u003d \"\u0027goal set 1\u0027: \" + HIGHEST_DISTINCTION"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"\\n\u0027goal set 2\u0027: \" + DISTINCTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"\\n\u0027goal set 3\u0027: \" + MERIT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"\\n\u0027goal set 4\u0027: \" + HONOURS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"\\n\u0027goal set 5\u0027: \" + PASS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            + \"\\n\u0027goal set 6\u0027: \" + FAIL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final int DEFAULT_GOAL \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final double HIGHEST_DISTINCTION_CAP \u003d 4.5;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final double DISTINCTION_CAP \u003d 4.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final double MERIT_CAP \u003d 3.5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final double HONOURS_CAP \u003d 3.0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final double PASS_CAP \u003d 2.0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final double FAIL_CAP \u003d 0.0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public final int goalTarget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructor for GoalTarget class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goalTarget Sets the level of the goal based on Honour\u0027s Grading System."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public GoalTarget(int goalTarget) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        checkArgument(isValidGoal(goalTarget), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d goalTarget;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public GoalTarget() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d DEFAULT_GOAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public int getGoalTarget() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return goalTarget;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if a given int is a valid goal target."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static boolean isValidGoal(int goalTarget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return (goalTarget \u003e 0 \u0026\u0026 goalTarget \u003c 7) \u0026\u0026 Integer.toString(goalTarget).matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the minimum CAP for each honour\u0027s grading depending on user\u0027s goal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param userGoal Goal set by the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @return double of the minimum CAP of each honour\u0027s grading."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static double getUserGoalGrade(GoalTarget userGoal) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        int goalLevel \u003d userGoal.getGoalTarget();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assert (goalLevel \u003e\u003d 1 \u0026\u0026 goalLevel \u003c\u003d 6) : \"Invalid Goal Target\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        switch (goalLevel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.HIGHEST_DISTINCTION_CAP;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.DISTINCTION_CAP;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.MERIT_CAP;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.HONOURS_CAP;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.PASS_CAP;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.FAIL_CAP;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return GoalTarget.DEFAULT_GOAL;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if both GoalTarget have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This defines a stronger notion of equality between two GoalTarget."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!(other instanceof GoalTarget)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget otherGoal \u003d (GoalTarget) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return otherGoal.getGoalTarget() \u003d\u003d getGoalTarget();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        switch (goalTarget) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return HIGHEST_DISTINCTION;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return DISTINCTION;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return MERIT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return HONOURS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return PASS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return FAIL;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 7,
      "augustinekau": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Grade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Represents a Module\u0027s grade in the grade book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            \"Grades can be either A+, A, A-, B+, B, B-, C+, C, D+, D or F, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * The first character of the Grade must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final Cap cap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructs an {@code Grade}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param grade A valid grade."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        grade \u003d convertSymbolToString(grade);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        cap \u003d Cap.valueOf(grade);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Replaces the plus or minus sign in a grade"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * with the _PLUS or _MINUS syntax respectively"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * to convert the grade string into an enum value name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * as enum value names cannot take in symbols."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param grade the grade string to be converted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the equivalent string representation of the enum value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String convertSymbolToString(String grade) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int lengthOfGradeWithSymbol \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String plusSymbol \u003d \"+\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String minusSymbol \u003d \"-\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String enumNameForPlus \u003d \"_PLUS\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final String enumNameForMinus \u003d \"_MINUS\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (grade.length() \u003d\u003d lengthOfGradeWithSymbol) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (grade.endsWith(plusSymbol)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                grade \u003d grade.replace(plusSymbol, enumNameForPlus);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } else if (grade.endsWith(minusSymbol)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                grade \u003d grade.replace(minusSymbol, enumNameForMinus);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if a given string is a valid grade."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return (containsGrade(test) || test.equals(Cap.getEmptyGrade()))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Checks if the input grade string is"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * either \"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * \"C+\", \"C\", \"D+\", \"D\", or \u0027F\"."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param test the input grade string to be verified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return true if the grade is a valid grade,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * false if the grade is any letter other"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * than the alphabets listed above."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static boolean containsGrade(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (Cap c : Cap.values()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (c.getGradeString().equals(test)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return cap.getGradePoint();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return cap.getGradeString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                || (other instanceof Grade // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                \u0026\u0026 cap.equals(((Grade) other).cap)); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return cap.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 59,
      "xyzhangg": 1,
      "augustinekau": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModularCredit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.util.ModuleInfoRetriever;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represent a Module\u0027s modular credits in my mods."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModularCredit(int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class ModularCredit {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"The module you have entered is not within our database.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            + \"\\nPlease check the module name again or add the module again with the --mc parameter.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULAR_CREDIT \u003d \"Modular Credits (MCs) should only \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            + \"contain integers between 2 and 16.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private static final int MINIMUM_MODULE_MC \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private static final int MAXIMUM_MODULE_MC \u003d 16;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public final int modularCredit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Construct a {@code ModularCredit}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param modularCredit A valid modular credit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public ModularCredit(int modularCredit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        requireNonNull(modularCredit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * ModularCredit field was not inputted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Use the moduleName to retrieve relevant ModularCredit from JSON data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public ModularCredit(String moduleName) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String modularCredit \u003d ModuleInfoRetriever.retrieve(moduleName).get(\"moduleCredit\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (modularCredit.equals(\"N/A\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            throw new ParseException(ModularCredit.MESSAGE_INVALID_MODULE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        // Assumes modularCredit will be an integer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        int integerModularCredit \u003d Integer.parseInt(modularCredit);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assert(isValidModularCredit(integerModularCredit));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.modularCredit \u003d integerModularCredit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return true if a given int is a valid modular credit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static boolean isValidModularCredit(int test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        // Minimum and maximum modular credits a NUS module can have"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (test \u003e\u003d MINIMUM_MODULE_MC \u0026\u0026 test \u003c\u003d MAXIMUM_MODULE_MC) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 57,
      "augustinekau": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Represents a Module in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final ModuleName moduleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private ModularCredit modularCredit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private boolean hasGrade;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Module(ModuleName moduleName, Grade grade, Set\u003cTag\u003e tags, ModularCredit modularCredit, Semester semester) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireAllNonNull(moduleName, grade, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        hasGrade \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Only grade field can be empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Module(ModuleName moduleName, Set\u003cTag\u003e tags, ModularCredit modularCredit, Semester semester) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        hasGrade \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleName getModuleName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public ModularCredit getModularCredit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return modularCredit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (hasGrade) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return grade;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new Grade(Cap.getEmptyGrade());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean hasGrade() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return hasGrade \u0026\u0026 !grade.toString().equals(Cap.getEmptyGrade());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if both module of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 otherModule.getModuleName().equals(getModuleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return otherModule.getModuleName().equals(getModuleName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 otherModule.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 otherModule.getTags().equals(getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        // Use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return Objects.hash(moduleName, grade, tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        builder.append(getModuleName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .append(\" | Grade: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .append(getGrade())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .append(\" | Semester: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .append(getSemester());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 27,
      "pongzers": 9,
      "xyzhangg": 5,
      "-": 68,
      "augustinekau": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Represents a Module\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public final String fullModName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructs a {@code ModuleName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param modName A valid module name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleName(String modName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(modName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        checkArgument(isValidModName(modName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        fullModName \u003d modName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if a given string is a valid modName."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static boolean isValidModName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return fullModName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 fullModName.equals(((ModuleName) other).fullModName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return fullModName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "augustinekau": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code ModuleName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleNameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getModuleName().fullModName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                || (other instanceof ModuleNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "augustinekau": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * modules uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code updatedModule}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * The module identity of {@code updatedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule(Module target, Module updatedModule) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireAllNonNull(target, updatedModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (!target.isSameModule(updatedModule) \u0026\u0026 contains(updatedModule)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        internalList.set(index, updatedModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 6,
      "-": 92,
      "augustinekau": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/Semester.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public enum Semester {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y1S1(11),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y1S2(12),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y2S1(21),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y2S2(22),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y3S1(31),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y3S2(32),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y4S1(41),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y4S2(42),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y5S1(51),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Y5S2(52),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    NA(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final int semStringToInt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    Semester(int semStringToInt) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.semStringToInt \u003d semStringToInt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int getSemStringToInt() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return semStringToInt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/semester/SemesterManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Represents a Semester in MyMods."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemester(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class SemesterManager {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static SemesterManager semesterManager \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Semester currentSem \u003d Semester.NA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Semester readOnlySem \u003d Semester.NA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Constructs a {@code SemesterManager}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Set constructor to private to prevent other classes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * from instantiating a SemesterManager object at will."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private SemesterManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a single copy of the singleton SemesterManager class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * when it is executed for the first time. Returns the single"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * instance of the class for subsequent calls to this operation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a single copy of the SemesterManager class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static SemesterManager getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (semesterManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            semesterManager \u003d new SemesterManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return semesterManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sets the current semester to the semester entered by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param currentSemester the semester entered by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void setCurrentSemester(Semester currentSemester) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        currentSem \u003d currentSemester;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Sets the current read-only semester to the semester entered by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param readOnlySem the semester entered by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void setReadOnlySem(Semester readOnlySem) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.readOnlySem \u003d readOnlySem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Gets the current semester where modules are being added or modified."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the current semester."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Semester getCurrentSemester() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return currentSem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Gets the current read-only semester where modules are viewed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return the current semester to read only."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public Semester getReadOnlySem() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return readOnlySem;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns true if a given string is a valid Semester."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param sem the semester entered by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return true if a given string is a valid Semester,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * false if a given string is an invalid Semester."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static boolean isValidSemester(String sem) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (sem.equals(Semester.NA.toString())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (Semester s : Semester.values()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (s.name().equals(sem)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 72,
      "pongzers": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/CapCalculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Supports the function to calculate CAP"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * given a list of modules."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class CapCalculator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Calculates the CAP given a list of modules"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * by deriving the total sum of the grade points"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * of all the modules in the moduleList and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * subsequently dividing the sum by the number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * of modules in the moduleList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param moduleList the list of modules to calculate CAP for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the calculated CAP from the list of modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static double calculateCap(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        double totalPoints \u003d 0.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        int numOfModsWithGrades \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (Module m : moduleList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (m.hasGrade() \u0026\u0026 m.getGrade().toString() !\u003d \"SU\") {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Grade currentGrade \u003d m.getGrade();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                double currentGradePoint \u003d currentGrade.getGradePoint();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                totalPoints +\u003d currentGradePoint;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                numOfModsWithGrades++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        double cap \u003d totalPoints / numOfModsWithGrades;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (numOfModsWithGrades \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 37,
      "kunnan97": 5,
      "pongzers": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/McCalculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Supports the function to calculate the total number of MCs taken currently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class McCalculator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Calculates the total number of MCs from all modules in a module list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param moduleList list of modules"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @return sum of MCs of all modules in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static int calculateMc(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        int totalMc \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        for (Module m : moduleList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            totalMc +\u003d m.getModularCredit().modularCredit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return totalMc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ModuleComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ModuleComparator implements Comparator\u003cModule\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int compare(Module m1, Module m2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return m1.getSemester().getSemStringToInt() - m2.getSemester().getSemStringToInt();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ModuleInfoRetriever.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Retrieve information from moduleInfo.json about a specific module"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class ModuleInfoRetriever {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private static final int STRING_OFFSET \u003d 3; //An offset to cancel out unnecessary characters from JSON file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return module-related information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param moduleName Name of module to retrieve information about"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return A HashMap containing values for the module\u0027s title, moduleCredit, and SU status"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static HashMap\u003cString, String\u003e retrieve(String moduleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        InputStream stream \u003d MainWindow.class.getResourceAsStream(\"/\" + \"moduleInfo.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            String s \u003d streamToString(stream);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            stream.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            int moduleStartIndex \u003d s.lastIndexOf(\"\\\"moduleCode\\\": \\\"\" + moduleName.toUpperCase() + \"\\\",\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (moduleStartIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return getInvalidMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            int moduleEndIndex \u003d s.indexOf(\"\\\"moduleCode\\\"\", moduleStartIndex + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            String moduleString \u003d s.substring(moduleStartIndex, moduleEndIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            map.put(\"title\", getKeyValue(moduleString, \"title\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            map.put(\"moduleCredit\", getKeyValue(moduleString, \"moduleCredit\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            map.put(\"su\", getKeyValue(moduleString, \"su\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return map;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return getInvalidMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Search for relevant information inside the module"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param moduleString Contains all the information about the module"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param key Description of information being searched for"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return String of specific information within module, eg module\u0027s title"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static String getKeyValue(String moduleString, String key) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        key \u003d \"\\\"\" + key + \"\\\"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        int keyValueStartIndex \u003d moduleString.indexOf(key) + key.length() + STRING_OFFSET;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        int keyValueEndIndex \u003d moduleString.indexOf(\"\\\"\", keyValueStartIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (key.equals(\"\\\"su\\\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            keyValueStartIndex \u003d keyValueStartIndex - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            keyValueEndIndex \u003d moduleString.indexOf(\"}\", keyValueStartIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return moduleString.substring(keyValueStartIndex, keyValueEndIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return invalid map"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Return invalid map with all values being \"N/A\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static HashMap\u003cString, String\u003e getInvalidMap() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        map.put(\"title\", \"N/A\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        map.put(\"moduleCredit\", \"N/A\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        map.put(\"su\", \"N/A\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Reads an InputStream and converts it to a String"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param inputStream Stream to get input from"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return A String containing the contents of the inputStream"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static String streamToString(InputStream inputStream) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        ByteArrayOutputStream result \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        byte[] buffer \u003d new byte[1024];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        int length;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        while ((length \u003d inputStream.read(buffer)) !\u003d -1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            result.write(buffer, 0, length);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        result.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return result.toString(\"UTF-8\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ModuleListFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Supports the function to filter the modules by semester."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Displays the respective modules in a specific semester."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ModuleListFilter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Filters the module list according to semester."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param moduleList the list of modules to be filtered."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return the filtered list of modules by semester."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static FilteredList\u003cModule\u003e filterModulesBySemester(FilteredList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester currentSemester \u003d semesterManager.getCurrentSemester();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        Predicate\u003cModule\u003e predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (currentSemester.equals(Semester.NA)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            predicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            predicate \u003d module -\u003e module.getSemester().equals(currentSemester);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new FilteredList\u003c\u003e(moduleList, predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Filters the module list according to read only semester."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param moduleList the list of modules to be filtered."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return the filtered list of modules by semester."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static FilteredList\u003cModule\u003e filterModulesByReadOnlySemester(FilteredList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Semester currentSemester \u003d semesterManager.getReadOnlySem();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Predicate\u003cModule\u003e predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (currentSemester.equals(Semester.NA)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            predicate \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            predicate \u003d module -\u003e module.getSemester().equals(currentSemester);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new FilteredList\u003c\u003e(moduleList, predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 26,
      "kunnan97": 6,
      "pongzers": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ModuleListSorter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ModuleListSorter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sorts the list of modules according to semester."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param moduleList the list of modules to be sorted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a sorted list of modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static FilteredList\u003cModule\u003e sortModuleList(FilteredList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ModuleComparator moduleComparator \u003d new ModuleComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        PriorityQueue\u003cModule\u003e priorityQueue \u003d new PriorityQueue\u003c\u003e(moduleComparator);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        priorityQueue.addAll(moduleList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ObservableList\u003cModule\u003e observableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        while (!priorityQueue.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            observableList.add(priorityQueue.poll());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new FilteredList\u003c\u003e(observableList, mod -\u003e true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Contains utility methods for populating {@code GradeBook} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static Module[] getSampleModule() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static ReadOnlyGradeBook getSampleGradeBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook sampleAb \u003d new GradeBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (Module sampleModule : getSampleModule()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 1,
      "xyzhangg": 5,
      "-": 28,
      "augustinekau": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GradeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Represents a storage for {@link GradeBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public interface GradeBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Path getGradeBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    GoalTarget getGoalTarget() throws DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns GradeBook data as a {@link ReadOnlyGradeBook}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Optional\u003cReadOnlyGradeBook\u003e readGradeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @see #getGradeBookFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Optional\u003cReadOnlyGradeBook\u003e readGradeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Saves the given {@link ReadOnlyGradeBook} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param gradeBook cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param goalTarget"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void saveGradeBook(ReadOnlyGradeBook gradeBook, GoalTarget goalTarget) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @see #saveGradeBook(ReadOnlyGradeBook, GoalTarget)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void saveGradeBook(ReadOnlyGradeBook gradeBook, Path filePath, GoalTarget goalTarget) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModularCredit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final String modName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private final int modularCredit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"name\") String modName, @JsonProperty(\"address\") String grade,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                             @JsonProperty(\"modularCredit\") int modularCredit,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                             @JsonProperty(\"semester\") String semester) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.modName \u003d modName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modName \u003d source.getModuleName().fullModName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        grade \u003d source.getGrade().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        modularCredit \u003d source.getModularCredit().modularCredit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semester \u003d source.getSemester().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (modName \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                    ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!ModuleName.isValidModName(modName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        final ModuleName modelModuleName \u003d new ModuleName(modName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (grade \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        final Grade modelGrade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        final ModularCredit modelModularCredit \u003d new ModularCredit(modularCredit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final Semester modelSemester \u003d Semester.valueOf(semester);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new Module(modelModuleName, modelGrade, modelTags, modelModularCredit, modelSemester);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 11,
      "pongzers": 8,
      "-": 50,
      "augustinekau": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGradeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * A class to access GradeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class JsonGradeBookStorage implements GradeBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGradeBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public JsonGradeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Path getGradeBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public GoalTarget getGoalTarget() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Optional\u003cJsonSerializableGradeBook\u003e jsonGradeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                filePath, JsonSerializableGradeBook.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (jsonGradeBook.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return new GoalTarget();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return jsonGradeBook.get().getGoalTarget();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Optional\u003cReadOnlyGradeBook\u003e readGradeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return readGradeBook(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Similar to {@link #readGradeBook()}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Optional\u003cReadOnlyGradeBook\u003e readGradeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Optional\u003cJsonSerializableGradeBook\u003e jsonGradeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                filePath, JsonSerializableGradeBook.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        if (!jsonGradeBook.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return Optional.of(jsonGradeBook.get().toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void saveGradeBook(ReadOnlyGradeBook gradeBook, GoalTarget goalTarget) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        saveGradeBook(gradeBook, filePath, goalTarget);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Similar to {@link GradeBookStorage#saveGradeBook(ReadOnlyGradeBook, GoalTarget)}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goalTarget"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void saveGradeBook(ReadOnlyGradeBook gradeBook, Path filePath, GoalTarget goalTarget)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        requireNonNull(gradeBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        requireNonNull(goalTarget);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGradeBook(gradeBook, goalTarget), filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 24,
      "-": 60,
      "augustinekau": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableGradeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * An Immutable GradeBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "@JsonRootName(value \u003d \"gradebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "class JsonSerializableGradeBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final GoalTarget goalTarget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Constructs a {@code JsonSerializableGradeBook} with the given modules."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public JsonSerializableGradeBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                                     @JsonProperty(\"goalTarget\") GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d goalTarget;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Converts a given {@code ReadOnlyGradeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGradeBook}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * @param goalTarget"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public JsonSerializableGradeBook(ReadOnlyGradeBook source, GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.goalTarget \u003d goalTarget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Converts this address book into the model\u0027s {@code GradeBook} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook gradeBook \u003d new GradeBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            if (gradeBook.hasModule(module)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            gradeBook.addModule(module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @JsonProperty(value \u003d \"goalTarget\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public GoalTarget getGoalTarget() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return goalTarget;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 16,
      "-": 36,
      "augustinekau": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public interface Storage extends GradeBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Path getGradeBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    Optional\u003cReadOnlyGradeBook\u003e readGradeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    void saveGradeBook(ReadOnlyGradeBook gradeBook, GoalTarget goalTarget) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 5,
      "-": 27,
      "augustinekau": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Manages storage of GradeBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private GradeBookStorage gradeBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code GradeBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public StorageManager(GradeBookStorage gradeBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.gradeBookStorage \u003d gradeBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Path getGradeBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBookStorage.getGradeBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public GoalTarget getGoalTarget() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBookStorage.getGoalTarget();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Optional\u003cReadOnlyGradeBook\u003e readGradeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return readGradeBook(gradeBookStorage.getGradeBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public Optional\u003cReadOnlyGradeBook\u003e readGradeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBookStorage.readGradeBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void saveGradeBook(ReadOnlyGradeBook gradeBook, GoalTarget goalTarget) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        saveGradeBook(gradeBook, gradeBookStorage.getGradeBookFilePath(), goalTarget);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void saveGradeBook(ReadOnlyGradeBook gradeBook, Path filePath, GoalTarget goalTarget)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBookStorage.saveGradeBook(gradeBook, filePath, goalTarget);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 18,
      "-": 65,
      "augustinekau": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteTextField.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * This class is a TextField which implements an \"autocomplete\" functionality,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * based on a supplied list of entries."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * @author Caleb Brinkman"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * Reused from https://gist.github.com/floralvikings/10290131"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * with minor modifications by kunnan97, https://github.com/kunnan97"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /** The existing autocomplete entries. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private final SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /** The popup used to select an entry. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /** Construct a new AutoCompleteTextField. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //modification by kunnan97, use MaxSizedContextMenu instead of"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //contextMenu to allow setMaxHeight() on contextMenu."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        entriesPopup \u003d new MaxSizedContextMenu();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        textProperty().addListener((observableValue, s, s2) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            if (getText().length() \u003d\u003d 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                || Arrays.asList(getEntries().stream().map(String::trim).toArray()).contains(getText())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    || Arrays.asList(getEntries().stream().map(string -\u003e string.trim() + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                        .toArray()).contains(getText())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                final List\u003cString\u003e filteredEntries \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                        entries.stream().filter(e -\u003e e.toLowerCase()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                                        .contains(getText().toLowerCase())).collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                searchResult.addAll(filteredEntries);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                if (entries.size() \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    populatePopup(searchResult);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    if (!entriesPopup.isShowing()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                        entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        onTextFieldClicked();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        focusedProperty().addListener((observableValue, aBoolean, aBoolean2) -\u003e entriesPopup.hide());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Modification:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Event listener for when mouse is clicked, auto suggestion pops up."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * @author kunnan97"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private void onTextFieldClicked() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        this.setOnMouseClicked(arg -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            searchResult.addAll(entries);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            populatePopup(searchResult);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            if (!entriesPopup.isShowing()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                \u0026\u0026 arg.getButton().equals(MouseButton.PRIMARY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                \u0026\u0026 getText().isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Get the existing set of autocomplete entries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * @return The existing autocomplete entries."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public SortedSet\u003cString\u003e getEntries() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Populate the entry set with the given search results.  Display is limited to 10 entries, for performance."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * @param searchResult The set of matching strings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private void populatePopup(List\u003cString\u003e searchResult) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // If you\u0027d like more entries, modify this line."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        int maxEntries \u003d 20;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), maxEntries);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            Label entryLabel \u003d new Label(result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            entryLabel.setPrefWidth(150);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            item.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                int stringLength \u003d result.length();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                if (stringLength \u003d\u003d 14) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    setText(result.trim() + \" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    setText(result.substring(0, stringLength - 12));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                this.end();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //modification by kunnan97, create a new MaxSizedContextMenu every time it is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //repopulated so as to avoid contextMenu staying at bottom of scroll"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //from previous pop up scrolling."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        entriesPopup.getItems().clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        entriesPopup.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        entriesPopup.setMaxHeight(450);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "//@author Caleb Brinkman"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "//minor modifications by kunnan97"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "kunnan97": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CapBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * The UI component that is responsible for displaying CAP."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "public class CapBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String FXML \u003d \"CapBox.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Text currentCapDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Creates a {@code CapBox} with the given {@code currentCap}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public CapBox(String currentCap) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        setCapDisplay(currentCap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Set the display CAP\u0027s value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * @param currentCap CAP to be displayed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void setCapDisplay(String currentCap) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        requireNonNull(currentCap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        currentCapDisplay.setText(\"Current CAP: \" + currentCap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public Text getCurrentCapDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        return currentCapDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "kunnan97": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String[] autocompleteSuggestions \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        new String[]{\"start             \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"add             \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"update             \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"list             \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"su             \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"delete             \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"find             \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"help             \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"exit             \","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"goal             \","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"recommendSU   \","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"done             \","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \"progress             \"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //add all suggestions to the autocomplete"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        commandTextField.getEntries().addAll(Arrays.asList(autocompleteSuggestions));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 19,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DragResizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * {@link DragResizer} can be used to add mouse listeners to a {@link Region}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * and make it resizable by the user by clicking and dragging the border in the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * same way as a window."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * Only height resizing is currently implemented. Usage: \u003cpre\u003eDragResizer.makeResizable(myAnchorPane);\u003c/pre\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * @author atill"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * Reused from http://andrewtill.blogspot.com/2012/12/dragging-to-resize-javafx-region.html"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "public class DragResizer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * The margin around the control that a user can click in to start resizing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * the region."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final int RESIZE_MARGIN \u003d 50;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private final Region region;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private double y;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private boolean initMinHeight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private boolean dragging;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private DragResizer(Region aRegion) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region \u003d aRegion;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Allow a specific region/ui component to be resizeable."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * @param region region/ui component"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public static void makeResizable(Region region) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        final DragResizer resizer \u003d new DragResizer(region);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region.setOnMousePressed(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                resizer.mousePressed(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region.setOnMouseDragged(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                resizer.mouseDragged(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region.setOnMouseMoved(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                resizer.mouseOver(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region.setOnMouseReleased(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                resizer.mouseReleased(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    protected void mouseReleased(MouseEvent event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        dragging \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region.setCursor(Cursor.DEFAULT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    protected void mouseOver(MouseEvent event) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (isInDraggableZone(event) || dragging) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            region.setCursor(Cursor.S_RESIZE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            region.setCursor(Cursor.DEFAULT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    protected boolean isInDraggableZone(MouseEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        return event.getY() \u003e (region.getHeight() - RESIZE_MARGIN);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    protected void mouseDragged(MouseEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (!dragging) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        double mousey \u003d event.getY();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        double newHeight \u003d region.getMinHeight() + (mousey - y);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        region.setMinHeight(newHeight);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        y \u003d mousey;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    protected void mousePressed(MouseEvent event) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // ignore clicks outside of the draggable margin"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (!isInDraggableZone(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        dragging \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // make sure that the minimum height is set to the current height once,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // setting a min height that is smaller than the current height will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // have no effect"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (!initMinHeight) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            region.setMinHeight(region.getHeight());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            initMinHeight \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        y \u003d event.getY();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "//@author atill"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t17-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"OR, refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String startCommandFormat \u003d \"start SEMESTER\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String addCommandFormat \u003d \"add m/MODULE_CODE [g/GRADE mc/MODULAR CREDITS]\\n\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String updateCommandFormat \u003d \"update m/MODULE_CODE [g/GRADE]\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String listCommandFormat \u003d \"list\\n\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String goalCommandFormat \u003d \"goal set LEVEL OR goal list\\n\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String recommendSuCommandFormat \u003d \"recommendSU\\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String suCommandFormat \u003d \"su MODULE_CODE\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String deleteCommandFormat \u003d \"delete MODULE_CODE\\n\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String doneCommandFormat \u003d \"done\\n\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String findCommandFormat \u003d \"find KEYWORD\\n\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String progressCommandFormat \u003d \"progress [ddp]\\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String helpCommandFormat \u003d \"help\\n\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String exitCommandFormat \u003d \"exit\\n\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Label helpCommands;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //setHelpCommands();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        setHelpCommands();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        scrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private void setHelpCommands() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String helpCommandList \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                \"Command Formats:\\n\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + startCommandFormat"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + addCommandFormat"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + updateCommandFormat"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + listCommandFormat"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + goalCommandFormat"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + recommendSuCommandFormat"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + suCommandFormat"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + deleteCommandFormat"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + doneCommandFormat"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + findCommandFormat"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + progressCommandFormat"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + helpCommandFormat"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                + exitCommandFormat;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        helpCommands.setText(helpCommandList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 3,
      "kunnan97": 42,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private CapBox capBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private SemBox semBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private StackPane capBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private StackPane semBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //Set default theme"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        setDefaultStyleSheet();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Sets the default stylesheet for main window when launched, default is"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * \"LightTheme.css\" in the day(7am - 7pm),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * \"DarkTheme.css\" at night(7pm - 7am)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private void setDefaultStyleSheet() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        LocalTime morning \u003d LocalTime.of(7, 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        LocalTime night \u003d LocalTime.of(19, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        if (localTime.isAfter(morning) \u0026\u0026 localTime.isBefore(night)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            setStyleSheet(\"LightTheme\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            setStyleSheet(\"DarkTheme\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Sets the stylesheet for MainWindow. Scene object is accessed from the Stage object,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * manipulating the stylesheet property of the Scene object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * @param cssFileName css file name of the theme to be set"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private void setStyleSheet(String cssFileName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assert cssFileName.equals(\"DarkTheme\") || cssFileName.equals(\"LightTheme\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        Scene scene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String cssFile \u003d MainWindow.class.getResource(\"/view/\" + cssFileName + \".css\").toExternalForm();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        scene.getStylesheets().clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        scene.getStylesheets().add(cssFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.sortModuleListBySem());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //make result display draggable, applicable to height only"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        DragResizer.makeResizable(resultDisplayPlaceholder);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getGradeBookFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        capBox \u003d new CapBox(logic.generateCap());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        capBoxPlaceholder.getChildren().add(capBox.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        semBox \u003d new SemBox(logic.generateSem());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        semBoxPlaceholder.getChildren().add(semBox.getRoot());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Set MainWindow to Dark theme when selected through menu."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void handleDarkThemeSelection() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        setStyleSheet(\"DarkTheme\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Set MainWindow to Light theme when selected through menu."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void handleLightThemeSelection() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        setStyleSheet(\"LightTheme\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            logic.resetFilteredList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            semBox.setSemDisplay(logic.generateSem());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (!commandResult.isRecommendSuOrFind()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                capBox.setCapDisplay(logic.generateCap());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (commandResult.isList()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                moduleListPanel \u003d new ModuleListPanel(logic.filterModuleListByReadOnlySem());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else if (commandResult.isRecommendSuOrFind()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                moduleListPanel \u003d new ModuleListPanel(logic.filterModuleListBySem());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 5,
      "kunnan97": 60,
      "pongzers": 16,
      "xyzhangg": 6,
      "-": 189,
      "augustinekau": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MaxSizedContextMenu.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.control.Menu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * A class that extends ContextMenu which allows resizing of height programmatically."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * @author kleopatra"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * Reused from https://stackoverflow.com/questions/51272738/javafx-contextmenu-max-size-has-no-effect"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "public class MaxSizedContextMenu extends ContextMenu {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * Current implementation of javafx ContextMenu\u0027s height does not allow us"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * to limiting the size of popup is not supported: the Region that\u0027s responsible"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * for showing the MenuItems is ContextMenuContent and implements its"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * computeMaxHeight to return the screenHeight. That container is created by"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * ContextMenuSkin and stored into a private final field, so there\u0027s no way to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * replace it with a custom implementation with a more intelligent implementation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * This implementation below access that region and set its maxHeight to the same"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     * value as the ContextMenu."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public MaxSizedContextMenu() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        addEventHandler(Menu.ON_SHOWING, e -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            Node content \u003d getSkin().getNode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            if (content instanceof Region) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                Region region \u003d (Region) content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                region.setMaxHeight(getMaxHeight());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "//@author kleopatra"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GradeBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Creates a {@code ModuleCode} with the given {@code Module} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        moduleName.setText("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                \"[\" + module.getSemester().name() + \"] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + module.getModuleName().fullModName"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + \" (\" + module.getModularCredit().modularCredit + \"MCs)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        grade.setText(module.getGrade().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        module.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "pongzers": 1,
      "xyzhangg": 5,
      "-": 54,
      "augustinekau": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Creates a {@code ModuleListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "augustinekau": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SemBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * The UI component that is responsible for displaying CAP."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class SemBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private static final String FXML \u003d \"SemBox.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Text currentSemDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Creates a {@code SemBox} with the given {@code currentSem}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public SemBox(String currentSem) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        setSemDisplay(currentSem);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Set the display CAP\u0027s value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param currentCap CAP to be displayed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void setSemDisplay(String currentCap) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        requireNonNull(currentCap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        currentSemDisplay.setText(\"Currently editing: \" + currentCap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public Text getCurrentSemDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return currentSemDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/hundred-points.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CapBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cStackPane HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    \u003cText fx:id\u003d\"currentCapDisplay\" styleClass\u003d\"cap-text\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?import seedu.address.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kunnan97": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".rounded-box {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".cap-text {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: grey grey #ffffff grey;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-prompt-text-fill: grey;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent, #545454, transparent, #545454;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/* Extension */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 33,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cfx:root title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpCommands\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 13,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 80%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    background-color: #ffdab9; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".rounded-box {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".cap-text {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-base: #ffdab9;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-control-inner-background: #ffdab9;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffc8b9;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffe9b9;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     -fx-border-color: #ffdab9;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 30%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: derive(#ffdab9, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: derive(#ffdab9, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 50%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kunnan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "  -fx-text-fill: #ffdab9;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 25%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 20%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: derive(#ffdab9, 50%);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-prompt-text-fill: gray;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #ffdab9;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "/* Extension */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background: #ffe5cf;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 385
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "         title\u003d\"MyMods\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    \u003cImage url\u003d\"@/images/hundred-points.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Theme\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"darkTheme\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDarkThemeSelection\" text\u003d\"Dark\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"lightTheme\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLightThemeSelection\" text\u003d\"Light\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "          \u003cStackPane HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "          \u003cStackPane HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"capBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "              \u003cInsets top\u003d\"15\" right\u003d\"30\" bottom\u003d\"15\" left\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "          \u003cStackPane HBox.hgrow\u003d\"ALWAYS\" fx:id\u003d\"semBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "              \u003cInsets top\u003d\"15\" right\u003d\"30\" bottom\u003d\"15\" left\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        \u003cVBox fx:id\u003d\"moduleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "          \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 15,
      "pongzers": 8,
      "-": 50,
      "augustinekau": 1
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        \u003cLabel fx:id\u003d\"moduleName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "      \u003cFlowPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cLabel text\u003d\"Grade: \" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cLabel fx:id\u003d\"grade\" styleClass\u003d\"cell_small_label\" text\u003d\"Grade: \\$grade\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pongzers": 4,
      "-": 32,
      "augustinekau": 1
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pongzers": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"rounded-box\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/SemBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003cStackPane HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003cText fx:id\u003d\"currentSemDisplay\" styleClass\u003d\"cap-text\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pongzers": 8
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  \"gradeBookFilePath\" : \"gradebook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "  \"gradeBookFilePath\" : \"gradebook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/hundred-points.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 34,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MOD_NAME_DESC_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MOD_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.storage.JsonGradeBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        JsonGradeBookStorage gradeBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new JsonGradeBookStorage(temporaryFolder.resolve(\"gradeBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        StorageManager storage \u003d new StorageManager(gradeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String deleteCommand \u003d \"delete some mod\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        // Setup LogicManager with JsonGradeBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        JsonGradeBookStorage gradeBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new JsonGradeBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        StorageManager storage \u003d new StorageManager(gradeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + MOD_NAME_DESC_A"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + GRADE_DESC_A;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(MOD_A)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withTags().withGrade(\"A\").withSemester(Semester.Y1S1.toString()).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static class JsonGradeBookIoExceptionThrowingStub extends JsonGradeBookStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        private JsonGradeBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public void saveGradeBook(ReadOnlyGradeBook gradeBook, Path filePath, GoalTarget goalTarget)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 13,
      "xyzhangg": 16,
      "-": 133,
      "augustinekau": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_newModule_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().withName(\"IS1103\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertCommandSuccess(new AddCommand(validModule), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module moduleInList \u003d model.getGradeBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertCommandFailure(new AddCommand(moduleInList), model, AddCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 4,
      "xyzhangg": 4,
      "-": 32,
      "augustinekau": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setInvalidSemester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validModule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_MODULE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module softwareEngineering \u003d new ModuleBuilder().withName(\"CS2103T Software Engineering\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module computerOrganisation \u003d new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        AddCommand addSoftwareEngineeringCommand \u003d new AddCommand(softwareEngineering);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        AddCommand addComputerOrganisationCommand \u003d new AddCommand(computerOrganisation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(addSoftwareEngineeringCommand.equals(addSoftwareEngineeringCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(softwareEngineering);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(addSoftwareEngineeringCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(addSoftwareEngineeringCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(addSoftwareEngineeringCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(addSoftwareEngineeringCommand.equals(addComputerOrganisationCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public Path getGradeBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public void setGradeBookFilePath(Path gradeBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public void setGradeBook(ReadOnlyGradeBook newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public ReadOnlyGradeBook getGradeBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public void setModule(Module target, Module updatedModule) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        public ObservableList\u003cModule\u003e filterModuleListBySem() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        public ObservableList\u003cModule\u003e filterModuleListByReadOnlySem() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public String generateCapAsString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public double generateCap() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public int getCurrentMc() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void setGoalTarget(GoalTarget goalTarget) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public GoalTarget getGoalTarget() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        public ObservableList\u003cModule\u003e sortModuleListBySem() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public void resetFilteredList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        public String generateSem() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        public ReadOnlyGradeBook getGradeBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            return new GradeBook();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_invalidSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setInvalidSemester();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validModule);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_COMMAND_SEQUENCE, () -\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 22,
      "pongzers": 4,
      "xyzhangg": 17,
      "-": 167,
      "augustinekau": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_emptyGradeBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_nonEmptyGradeBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedModel.setGradeBook(new GradeBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 7,
      "-": 25,
      "augustinekau": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // different isRecommendSU value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // different isDoneWithSemester value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                new CommandResult(\"feedback\", true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                new CommandResult(\"feedback\", false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        // different isRecommendSU value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                new CommandResult(\"feedback\", false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // different isDoneWithSemester value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                new CommandResult(\"feedback\", false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 6,
      "kunnan97": 7,
      "pongzers": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST_GOAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SET_GOAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.testutil.UpdateModNameDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String VALID_MOD_NAME_A \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String VALID_MOD_NAME_B \u003d \"CS2100\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALID_GRADE_A \u003d \"A\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALID_GRADE_B \u003d \"B-\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALID_GRADE_C \u003d \"A-\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALID_TAG_CODE \u003d \"CS2100\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final int VALID_MODULAR_CREDIT \u003d 4;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final int VALID_GOAL_TARGET_A \u003d 4;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final int VALID_GOAL_TARGET_B \u003d 3;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final int VALID_GOAL_TARGET_C \u003d 6;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String VALID_GOAL_TARGET_INPUT \u003d \"4\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Semester VALID_CORRECT_SEMESTER_OF_MOD_NAME_B \u003d Semester.Y2S1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Semester VALID_WRONG_SEMESTER_OF_MOD_NAME_B \u003d Semester.Y4S1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final double VALID_CAP_A \u003d 3.50;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final double VALID_CAP_B \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String VALID_INPUT_FOR_ONE_WORD_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MOD_NAME_DESC_A \u003d \" \" + PREFIX_MOD_NAME + VALID_MOD_NAME_A;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String MOD_NAME_DESC_B \u003d \" \" + PREFIX_MOD_NAME + VALID_MOD_NAME_B;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final String NO_GRADE \u003d \"NA\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String GRADE_DESC_A \u003d \" \" + PREFIX_GRADE + VALID_GRADE_A;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String GRADE_DESC_B \u003d \" \" + PREFIX_GRADE + VALID_GRADE_B;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final String MODULAR_CREDIT_DESC \u003d \" \" + PREFIX_MODULAR_CREDIT + VALID_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String SET_GOAL_DESC_A \u003d \" \" + PREFIX_SET_GOAL + VALID_GOAL_TARGET_A;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String SET_GOAL_DESC_B \u003d \" \" + PREFIX_SET_GOAL + VALID_GOAL_TARGET_B;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String LIST_GOAL_DESC \u003d \" \" + PREFIX_LIST_GOAL;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String SEMESTER_DESC \u003d \" \" + PREFIX_SEMESTER + VALID_CORRECT_SEMESTER_OF_MOD_NAME_B.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String INVALID_MOD_NAME_DESC \u003d \" \" + PREFIX_MOD_NAME + \"C\u00262100\"; // \u0027\u0026\u0027 not allowed in mod names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE; // empty string not allowed for GRADES"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final int INVALID_GOAL_TARGET \u003d -1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Semester INVALID_SEMESTER \u003d Semester.NA;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final String INVALID_INPUT_FOR_ONE_WORD_COMMAND \u003d \"hi\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final UpdateCommand.UpdateModNameDescriptor DESC_A;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static final UpdateCommand.UpdateModNameDescriptor DESC_B;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DESC_A \u003d new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_A)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                .withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DESC_B \u003d new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_B)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                .withGrade(VALID_GRADE_B)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            assertEquals(expectedCommandResult.getFeedbackToUser(), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * - the address book, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook expectedGradeBook \u003d new GradeBook(actualModel.getGradeBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(expectedGradeBook, actualModel.getGradeBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        final String[] splitName \u003d module.getModuleName().fullModName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.updateFilteredModuleList(new ModuleNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sets Y2S1 as the current semester as it is the semester which"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * CS2100 belongs to."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static void setValidCorrectSemester() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semesterManager.setCurrentSemester(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sets NA as the current semester as it is an invalid semester."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static void setInvalidSemester() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semesterManager.setCurrentSemester(INVALID_SEMESTER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sets Y4S1 as the current semester for test cases which check if the module"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * which is currently being edited is in the same semester as the semester which"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * is currently being edited. Since CS2100 is in Y2S1, Y4S1 is the wrong semester."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static void setValidWrongSemester() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semesterManager.setCurrentSemester(VALID_WRONG_SEMESTER_OF_MOD_NAME_B);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 34,
      "pongzers": 6,
      "xyzhangg": 13,
      "-": 84,
      "augustinekau": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setInvalidSemester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidWrongSemester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.EFF_COM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.commons.core.index.GetModuleIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ModuleName nameFirstModule \u003d COM_ORG.getModuleName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ModuleName nameSecondModule \u003d EFF_COM.getModuleName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Index indexFirstModule \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            GetModuleIndex.getIndex(model.getFilteredModuleList(), nameFirstModule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Index indexSecondModule \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            GetModuleIndex.getIndex(model.getFilteredModuleList(), nameSecondModule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void constructor_nullModuleName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteCommand(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_validModuleNameUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(indexFirstModule.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(nameFirstModule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_invalidModuleNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ModuleName invalidModuleName \u003d new ModuleName(\"invalid mod\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(invalidModuleName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        showModuleAtIndex(model, indexFirstModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(indexFirstModule.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(nameFirstModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        showModuleAtIndex(model, indexFirstModule);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Index outOfBoundIndex \u003d indexSecondModule;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGradeBook().getModuleList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(nameSecondModule);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(COM_ORG.getModuleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(EFF_COM.getModuleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(COM_ORG.getModuleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_invalidSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setInvalidSemester();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(nameFirstModule);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_COMMAND_SEQUENCE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_wrongSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidWrongSemester();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(nameFirstModule);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semesterOfFirstModule \u003d COM_ORG.getSemester();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_DELETE_MODULE_IN_WRONG_SEMESTER + semesterOfFirstModule + \".\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + Messages.MESSAGE_CURRENT_SEMESTER + semesterManager.getCurrentSemester() + \".\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + Messages.MESSAGE_DIRECT_TO_CORRECT_SEMESTER + semesterOfFirstModule"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + Messages.MESSAGE_DIRECT_TO_CORRECT_SEMESTER_TO_DELETE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 39,
      "xyzhangg": 33,
      "-": 80,
      "augustinekau": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setInvalidSemester;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_invalidSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setInvalidSemester();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_DONE_COMMAND, () -\u003e doneCommand.execute(model));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_validSemester_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(DoneCommand.MESSAGE_DONE_SEMESTER_SUCCESS, semesterManager.getCurrentSemester()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertCommandSuccess(new DoneCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 35,
      "pongzers": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "pongzers": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_MODULES_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.SWE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_zeroKeywords_noModuleFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NO_MODULES_FOUND, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_singleKeyword_singleModuleFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ModuleNameContainsKeywordsPredicate predicate \u003d preparePredicate(VALID_MOD_NAME_A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(Collections.singletonList(SWE), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private ModuleNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new ModuleNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 2,
      "pongzers": 2,
      "xyzhangg": 3,
      "-": 58,
      "augustinekau": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 1,
      "pongzers": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_list_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, false, false, false, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 3,
      "xyzhangg": 4,
      "-": 26,
      "augustinekau": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ProgressCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CAP_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CAP_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_TARGET_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_TARGET_C;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.ProgressCommand.MESSAGE_REQUIRED_CAP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.ProgressCommand.MESSAGE_TARGET_CAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.ProgressCommand.MESSAGE_UNACHIEVABLE_CAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class ProgressCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final boolean isDdp \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_progressWithoutDdp_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model.setGoalTarget(new GoalTarget(VALID_GOAL_TARGET_B));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String.format(MESSAGE_TARGET_CAP, VALID_CAP_A)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        + String.format(MESSAGE_REQUIRED_CAP, VALID_CAP_A));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                getTypicalGradeBook(), new UserPrefs(), new GoalTarget(VALID_GOAL_TARGET_B));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ProgressCommand progressCommand \u003d new ProgressCommand(!isDdp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(progressCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_progressWithDdp_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model.setGoalTarget(new GoalTarget(VALID_GOAL_TARGET_B));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String.format(MESSAGE_TARGET_CAP, VALID_CAP_A)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        + String.format(MESSAGE_REQUIRED_CAP, VALID_CAP_A));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                getTypicalGradeBook(), new UserPrefs(), new GoalTarget(VALID_GOAL_TARGET_B));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ProgressCommand progressCommand \u003d new ProgressCommand(isDdp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(progressCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_progressWithUnachievableGoal_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model.setGoalTarget(new GoalTarget(VALID_GOAL_TARGET_C));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                String.format(MESSAGE_TARGET_CAP, VALID_CAP_B)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        + MESSAGE_UNACHIEVABLE_CAP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                getTypicalGradeBook(), new UserPrefs(), new GoalTarget(VALID_GOAL_TARGET_C));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ProgressCommand progressCommand \u003d new ProgressCommand(isDdp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(progressCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RecommendSuCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static seedu.address.logic.commands.RecommendSuCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static seedu.address.logic.commands.RecommendSuCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static seedu.address.logic.commands.RecommendSuCommand.MESSAGE_SUCCESS_NO_RECOMMENDATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RecommendSuCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class RecommendSuCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Model modelNoGoal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Model modelWithModule;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Model modelWithModuleA;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Model modelWithModuleB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    private Model expectedModelWithModuleA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        model \u003d new ModelManager(new GradeBook(), new UserPrefs(), new GoalTarget(4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        modelNoGoal \u003d new ModelManager(new GradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        Module module1 \u003d new ModuleBuilder().withName(\"CS1231\").withGrade(\"C\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        Module module2 \u003d new ModuleBuilder().withName(\"MA1521\").withGrade(\"C\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        Module module2a \u003d new ModuleBuilder().withName(\"MA1521\").withGrade(\"A\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        List\u003cModule\u003e moduleListTest1 \u003d Arrays.asList(module1, module2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        List\u003cModule\u003e moduleListTest2 \u003d Arrays.asList(module1, module2a);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        List\u003cModule\u003e moduleListTest3 \u003d Arrays.asList(module1, module2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        List\u003cModule\u003e expectedModuleListTest2 \u003d Collections.singletonList(module1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook gradeBookWithModulesA \u003d new GradeBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook gradeBookWithModulesB \u003d new GradeBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook expectedGradeBookWithModulesA \u003d new GradeBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBookWithModulesA.setModules(moduleListTest2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBookWithModulesB.setModules(moduleListTest3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedGradeBookWithModulesA.setModules(expectedModuleListTest2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        modelWithModuleA \u003d new ModelManager(gradeBookWithModulesA, new UserPrefs(), new GoalTarget(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        modelWithModuleB \u003d new ModelManager(gradeBookWithModulesB, new UserPrefs(), new GoalTarget(2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        expectedModelWithModuleA \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            new ModelManager(expectedGradeBookWithModulesA, new UserPrefs(), new GoalTarget(2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget(4));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void execute_recommendSu_noGoal() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            new CommandResult(MESSAGE_FAILURE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertCommandSuccess(new RecommendSuCommand(), modelNoGoal, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void execute_recommendSu_modelSizeZero() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            new CommandResult(MESSAGE_SUCCESS_NO_RECOMMENDATION,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertCommandSuccess(new RecommendSuCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void execute_recommendSu_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        RecommendSuCommand recommendSuCommand \u003d new RecommendSuCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            new CommandResult(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                false, false, true, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //one modules in list of 2 above goal(2, Distinction (CAP 4.00 ~ 4.49)), 1 module to SU"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            commandResult \u003d recommendSuCommand.execute(modelWithModuleA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertEquals(expectedCommandResult, commandResult);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertEquals(modelWithModuleA.getFilteredModuleList(), expectedModelWithModuleA.getFilteredModuleList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //all modules in list of 2 can be SU-ed,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            commandResult \u003d recommendSuCommand.execute(modelWithModuleB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertEquals(expectedCommandResult, commandResult);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertEquals(modelWithModuleB.getFilteredModuleList(), modelWithModuleB.getFilteredModuleList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 75,
      "pongzers": 3,
      "xyzhangg": 13,
      "augustinekau": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * {@code SetCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class SetCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model model \u003d new ModelManager(new GradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SetCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_validGoalTarget_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalTarget \u003d new GoalTarget(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(goalTarget);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(SetCommand.MESSAGE_SUCCESS, goalTarget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void execute_listGoalTarget_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalTarget \u003d new GoalTarget();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        SetCommand setCommand \u003d new SetCommand(goalTarget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d GoalTarget.GOAL_LIST;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertCommandSuccess(setCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalOne \u003d new GoalTarget(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalTwo \u003d new GoalTarget(2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        SetCommand setGoalOne \u003d new SetCommand(goalOne);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        SetCommand setGoalTwo \u003d new SetCommand(goalTwo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(setGoalOne.equals(setGoalOne));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        SetCommand setGoalOneCopy \u003d new SetCommand(goalOne);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(setGoalOne.equals(setGoalOneCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(setGoalOne.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(setGoalOne.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(setGoalOne.equals(setGoalTwo));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 4,
      "augustinekau": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StartCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StartCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester y1s1 \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester y1s2 \u003d Semester.Y1S2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StartCommand startY1s1 \u003d new StartCommand(y1s1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StartCommand startY1s2 \u003d new StartCommand(y1s2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(startY1s1.equals(startY1s1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StartCommand startY1s1Copy \u003d new StartCommand(y1s1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(startY1s1.equals(startY1s1Copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertFalse(startY1s1.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertFalse(startY1s1.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // different sem -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertFalse(startY1s1.equals(startY1s2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_validSemester_success() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semesterToStart \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(semesterToStart);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String expectedMessage \u003d String.format(StartCommand.MESSAGE_START_SEMESTER_SUCCESS, semesterToStart);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 58,
      "xyzhangg": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setInvalidSemester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidWrongSemester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.EFF_COM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.commons.core.index.GetModuleIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateModNameDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.testutil.UpdateModNameDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * UpdateCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradeBook(), new UserPrefs(), new GoalTarget());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ModuleName nameFirstModule \u003d COM_ORG.getModuleName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final ModuleName nameSecondModule \u003d EFF_COM.getModuleName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Index indexFirstModule \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            GetModuleIndex.getIndex(model.getFilteredModuleList(), nameFirstModule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final Index indexSecondModule \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            GetModuleIndex.getIndex(model.getFilteredModuleList(), nameSecondModule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder().withName(nameFirstModule.fullModName)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .withGrade(VALID_GRADE_A).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateModNameDescriptor descriptor \u003d new UpdateModNameDescriptorBuilder(updatedModule).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(nameFirstModule, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MODULE_SUCCESS, updatedModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradeBook(model.getGradeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new GoalTarget());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), updatedModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName firstModuleName \u003d COM_ORG.getModuleName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Index indexLastModule \u003d GetModuleIndex.getIndex(model.getFilteredModuleList(), firstModuleName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(indexLastModule.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleBuilder moduleInList \u003d new ModuleBuilder(firstModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d moduleInList.withName(VALID_MOD_NAME_B).withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateModNameDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_B).withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(firstModuleName, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MODULE_SUCCESS, updatedModule);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradeBook(model.getGradeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new GoalTarget());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedModel.setModule(firstModule, updatedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(nameFirstModule, new UpdateModNameDescriptor());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d model.getFilteredModuleList().get(indexFirstModule.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MODULE_SUCCESS, updatedModule);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradeBook(model.getGradeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new GoalTarget());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        showModuleAtIndex(model, indexFirstModule);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module moduleInFilteredList \u003d model.getFilteredModuleList().get(indexFirstModule.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder(moduleInFilteredList).withName(VALID_MOD_NAME_B).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(nameFirstModule,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_B).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_MODULE_SUCCESS, updatedModule);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradeBook(model.getGradeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new GoalTarget());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), updatedModule);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_invalidModuleNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName invalidModuleName \u003d new ModuleName(\"No such module\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_B).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(invalidModuleName, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandFailure(updateCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * update filtered list where module name is not in filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * but still in address book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void execute_invalidModuleNameFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        showModuleAtIndex(model, indexFirstModule);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Index outOfBoundIndex \u003d indexSecondModule;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(model.getGradeBook().getModuleList().get(indexSecondModule.getZeroBased()).getModuleName()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .equals(nameSecondModule));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(nameSecondModule,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_B).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandFailure(updateCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_NAME);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(nameFirstModule, DESC_A);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateModNameDescriptor copyDescriptor \u003d new UpdateModNameDescriptor(DESC_A);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(nameFirstModule, copyDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(nameSecondModule, DESC_A)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(nameFirstModule, DESC_B)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_invalidSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setInvalidSemester();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder().withName(nameFirstModule.fullModName)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withGrade(VALID_GRADE_A).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d new UpdateModNameDescriptorBuilder(updatedModule).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(nameFirstModule, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandFailure(updateCommand, model, Messages.MESSAGE_INVALID_COMMAND_SEQUENCE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void execute_wrongSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        SemesterManager semesterManager \u003d SemesterManager.getInstance();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidWrongSemester();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder().withName(nameFirstModule.fullModName)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withGrade(VALID_GRADE_A).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d new UpdateModNameDescriptorBuilder(updatedModule).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(nameFirstModule, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester semesterOfFirstModule \u003d COM_ORG.getSemester();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_UPDATE_MODULE_IN_WRONG_SEMESTER + semesterOfFirstModule + \".\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + Messages.MESSAGE_CURRENT_SEMESTER + semesterManager.getCurrentSemester() + \".\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + Messages.MESSAGE_DIRECT_TO_CORRECT_SEMESTER + semesterOfFirstModule"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + Messages.MESSAGE_DIRECT_TO_CORRECT_SEMESTER_TO_UPDATE;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertCommandFailure(updateCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 39,
      "xyzhangg": 95,
      "-": 75,
      "augustinekau": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateModNameDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateModNameDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.testutil.UpdateModNameDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class UpdateModNameDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateCommand.UpdateModNameDescriptor(DESC_A);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(DESC_A.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(DESC_A.equals(DESC_A));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(DESC_A.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(DESC_A.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(DESC_A.equals(DESC_B));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateModNameDescriptor updatedMod \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateModNameDescriptorBuilder(DESC_A).withName(VALID_MOD_NAME_B).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(DESC_A.equals(updatedMod));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updatedMod \u003d new UpdateModNameDescriptorBuilder(DESC_A).withGrade(VALID_GRADE_B).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(DESC_A.equals(updatedMod));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updatedMod \u003d new UpdateModNameDescriptorBuilder(DESC_A).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(DESC_A.equals(updatedMod));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 12,
      "augustinekau": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MOD_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULAR_CREDIT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MOD_NAME_DESC_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MOD_NAME_DESC_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CORRECT_SEMESTER_OF_MOD_NAME_B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_B;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MOD_A;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MOD_B;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(MOD_B)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withModularCredit(VALID_MODULAR_CREDIT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withSemester(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B.toString()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MOD_NAME_DESC_B"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + GRADE_DESC_B + TAG_DESC_FRIEND + MODULAR_CREDIT_DESC, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, MOD_NAME_DESC_A + MOD_NAME_DESC_B"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + GRADE_DESC_B + TAG_DESC_FRIEND + MODULAR_CREDIT_DESC, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, MOD_NAME_DESC_B + GRADE_DESC_A"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + GRADE_DESC_B + TAG_DESC_FRIEND + MODULAR_CREDIT_DESC, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module expectedModuleMultipleTags \u003d new ModuleBuilder(MOD_B).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, MOD_NAME_DESC_B + GRADE_DESC_B"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + MODULAR_CREDIT_DESC, new AddCommand(expectedModuleMultipleTags));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(MOD_A)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withTags()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withModularCredit(VALID_MODULAR_CREDIT)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withSemester(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B.toString()).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, MOD_NAME_DESC_A + GRADE_DESC_A + MODULAR_CREDIT_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, VALID_MOD_NAME_B + GRADE_DESC_B,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, INVALID_MOD_NAME_DESC + GRADE_DESC_B"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, MOD_NAME_DESC_B + INVALID_GRADE_DESC"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, MOD_NAME_DESC_B + GRADE_DESC_B"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, INVALID_MOD_NAME_DESC + INVALID_GRADE_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MOD_NAME_DESC_B"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                        + GRADE_DESC_B + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 23,
      "-": 62,
      "augustinekau": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CORRECT_SEMESTER_OF_MOD_NAME_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.semester.SemesterManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            SemesterManager.getInstance().setCurrentSemester(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 2,
      "-": 38,
      "augustinekau": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final ModuleName moduleName \u003d COM_ORG.getModuleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private final String userInputModuleName \u003d \"CS2100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        System.out.println(new DeleteCommand(moduleName));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, userInputModuleName, new DeleteCommand(moduleName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 5,
      "xyzhangg": 1,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, VALID_INPUT_FOR_ONE_WORD_COMMAND, doneCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ExitCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private ExitCommandParser parser \u003d new ExitCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, VALID_INPUT_FOR_ONE_WORD_COMMAND, exitCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                new FindCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                        new ModuleNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                                Arrays.asList(VALID_MOD_NAME_A, VALID_MOD_NAME_B)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, \"CS2103T CS2100\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2103T \\n \\t CS2100  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 7,
      "-": 28,
      "augustinekau": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradeBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NO_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CORRECT_SEMESTER_OF_MOD_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.testutil.UpdateModNameDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class GradeBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final GradeBookParser parser \u003d new GradeBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ModuleUtil.getAddCommand(module));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(new AddCommand(module), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + COM_ORG.getModuleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(new DeleteCommand(COM_ORG.getModuleName()), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d new UpdateModNameDescriptorBuilder(module)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withName(COM_ORG.getModuleName().fullModName)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withGrade(NO_GRADE)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withSemester(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + COM_ORG.getModuleName().fullModName"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + \" \" + PREFIX_SEMESTER"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + VALID_CORRECT_SEMESTER_OF_MOD_NAME_B + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                + ModuleUtil.getUpdateModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(new UpdateCommand(COM_ORG.getModuleName(), descriptor), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StartCommand command \u003d (StartCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                StartCommand.COMMAND_WORD + \" \" + VALID_CORRECT_SEMESTER_OF_MOD_NAME_B);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(new StartCommand(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD) instanceof DoneCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(parser.parseCommand(DoneCommand.COMMAND_WORD + \"\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(new FindCommand(new ModuleNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \"\") instanceof ListCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 40,
      "xyzhangg": 12,
      "-": 74,
      "augustinekau": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.setValidCorrectSemester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        setValidCorrectSemester();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, VALID_INPUT_FOR_ONE_WORD_COMMAND, helpCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, VALID_INPUT_FOR_ONE_WORD_COMMAND, listCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String INVALID_MOD_NAME \u003d \"C@2103T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String INVALID_GRADE \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String INVALID_SEMESTER \u003d Semester.NA.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private static final String VALID_MOD_NAME \u003d \"CS2100\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String VALID_GRADE \u003d \"A+\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String VALID_SEMESTER \u003d Semester.Y2S1.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(Long.toString"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                (Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_MOD_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MOD_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseName(VALID_MOD_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_MOD_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MOD_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parseGrade_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGrade((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parseGrade_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGrade(INVALID_GRADE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parseGrade_validValueWithoutWhitespace_returnsGrade() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Grade expectedGrade \u003d new Grade(VALID_GRADE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedGrade, ParserUtil.parseGrade(VALID_GRADE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parseGrade_validValueWithWhitespace_returnsTrimmedGrade() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String gradesWithWhitespace \u003d WHITESPACE + VALID_GRADE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Grade expectedGrade \u003d new Grade(VALID_GRADE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedGrade, ParserUtil.parseGrade(gradesWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parseSemester_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSemester((String) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parseSemester_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSemester(INVALID_SEMESTER));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parseSemester_validValueWithoutWhitespace_returnsSemester() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester expectedSemester \u003d Semester.valueOf(VALID_SEMESTER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(VALID_SEMESTER));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parseSemester_validValueWithWhitespace_returnsTrimmedSemester() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String semesterWithWhitespace \u003d WHITESPACE + VALID_SEMESTER + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester expectedSemester \u003d Semester.valueOf(VALID_SEMESTER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(semesterWithWhitespace));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 29,
      "pongzers": 1,
      "-": 116,
      "augustinekau": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ProgressCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOUBLE_DEGREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.ProgressCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class ProgressCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final boolean IS_DDP \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private ProgressCommandParser parser \u003d new ProgressCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void parse_noInput_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseSuccess(parser, \"\", new ProgressCommand(!IS_DDP));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void parse_inputDdp_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseSuccess(parser, PREFIX_DOUBLE_DEGREE.getPrefix(), new ProgressCommand(IS_DDP));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND, String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ProgressCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void parse_ddpWithInvalidInput_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String userInput \u003d PREFIX_DOUBLE_DEGREE + \" \" + INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, userInput, String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ProgressCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 3,
      "xyzhangg": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RecommendSuCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.RecommendSuCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class RecommendSuCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private RecommendSuCommandParser parser \u003d new RecommendSuCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RecommendSuCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        RecommendSuCommand recommendSuCommand \u003d new RecommendSuCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, VALID_INPUT_FOR_ONE_WORD_COMMAND, recommendSuCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOAL_TARGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LIST_GOAL_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SET_GOAL_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SET_GOAL_DESC_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_TARGET_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_TARGET_INPUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SET_GOAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * Parses input arguments and creates a SetCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class SetCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private SetCommandParser parser \u003d new SetCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget expectedGoal \u003d new GoalTarget(VALID_GOAL_TARGET_A);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget expectedList \u003d new GoalTarget();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, SET_GOAL_DESC_B + SET_GOAL_DESC_A, new SetCommand(expectedGoal));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // for list command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, LIST_GOAL_DESC, new SetCommand(expectedList));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // multiple command types (both --list and --set) - list is ignored"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseSuccess(parser, LIST_GOAL_DESC + SET_GOAL_DESC_A, new SetCommand(expectedGoal));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, VALID_GOAL_TARGET_INPUT, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void parse_invalidGoalTarget_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // out of range"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertParseFailure(parser, SetCommand.COMMAND_WORD + WHITESPACE + PREFIX_SET_GOAL"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + INVALID_GOAL_TARGET, GoalTarget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StartCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_FOR_ONE_WORD_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CORRECT_SEMESTER_OF_MOD_NAME_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class StartCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private StartCommandParser parser \u003d new StartCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_FOR_ONE_WORD_COMMAND, Messages.MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_invalidSemester_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester invalidSemester \u003d INVALID_SEMESTER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseFailure(parser, invalidSemester.toString(), Messages.MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void parse_validSemester_success() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Semester validSemester \u003d VALID_CORRECT_SEMESTER_OF_MOD_NAME_B;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(validSemester);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertParseSuccess(parser, validSemester.toString(), startCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MOD_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MOD_NAME_DESC_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NO_GRADE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CORRECT_SEMESTER_OF_MOD_NAME_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_A;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.SWE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.testutil.UpdateModNameDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String moduleName \u003d COM_ORG.getModuleName().fullModName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, INVALID_MOD_NAME_DESC, ModuleName.MESSAGE_CONSTRAINTS); // invalid module name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MOD_NAME + moduleName + INVALID_GRADE_DESC,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                Grade.MESSAGE_CONSTRAINTS); // invalid grade"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MOD_NAME + moduleName + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Module} being updated,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MOD_NAME + moduleName + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MOD_NAME + moduleName + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_MOD_NAME + moduleName + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseFailure(parser, INVALID_MOD_NAME_DESC + INVALID_GRADE_DESC, ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName nameThirdModule \u003d SWE.getModuleName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String userInput \u003d PREFIX_MOD_NAME + nameThirdModule.fullModName + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + GRADE_DESC_A + MOD_NAME_DESC_A + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d new UpdateModNameDescriptorBuilder()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .withName(VALID_MOD_NAME_A)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                .withGrade(VALID_GRADE_A)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(nameThirdModule, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //commented away since this is testing on email entry"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //.build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    //UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName nameThirdModule \u003d SWE.getModuleName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String userInput \u003d MOD_NAME_DESC_A;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_A).withGrade(NO_GRADE).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(nameThirdModule, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        // grade"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userInput \u003d MOD_NAME_DESC_A + GRADE_DESC_A;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor \u003d new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_A).withGrade(VALID_GRADE_A).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(nameThirdModule, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userInput \u003d MOD_NAME_DESC_A + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor \u003d new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_A)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .withGrade(NO_GRADE).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(nameThirdModule, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        // semester"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        userInput \u003d MOD_NAME_DESC_A + SEMESTER_DESC;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor \u003d new UpdateModNameDescriptorBuilder().withName(VALID_MOD_NAME_A)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                .withGrade(NO_GRADE).withSemester(VALID_CORRECT_SEMESTER_OF_MOD_NAME_B).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(nameThirdModule, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName nameFirstModule \u003d COM_ORG.getModuleName();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_MOD_NAME + nameFirstModule.fullModName + GRADE_DESC_A"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + TAG_DESC_FRIEND + GRADE_DESC_A + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                + GRADE_DESC_B + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor \u003d new UpdateModNameDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .withName(nameFirstModule.fullModName)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                .withGrade(VALID_GRADE_B).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(nameFirstModule, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //Original first assert has only phone in userInput, now deleted - kunnan 5/10/2020"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModuleName nameFirstModule \u003d COM_ORG.getModuleName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand.UpdateModNameDescriptor descriptor;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        UpdateCommand expectedCommand;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userInput \u003d \" \" + PREFIX_MOD_NAME + nameFirstModule.fullModName + GRADE_DESC_B;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor \u003d new UpdateModNameDescriptorBuilder()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                .withName(nameFirstModule.fullModName).withGrade(VALID_GRADE_B).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(nameFirstModule, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 6,
      "kunnan97": 14,
      "xyzhangg": 57,
      "-": 72,
      "augustinekau": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/GradeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class GradeBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private final GradeBook gradeBook \u003d new GradeBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(Collections.emptyList(), gradeBook.getModuleList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e gradeBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void resetData_withValidReadOnlyGradeBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook newData \u003d getTypicalGradeBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(newData, gradeBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder(COM_ORG).withGrade(VALID_GRADE_B).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(COM_ORG, updatedModule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBookStub newData \u003d new GradeBookStub(newModules);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e gradeBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e gradeBook.hasModule(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void hasModule_moduleNotInGradeBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(gradeBook.hasModule(COM_ORG));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void hasModule_moduleInGradeBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.addModule(COM_ORG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(gradeBook.hasModule(COM_ORG));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInGradeBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.addModule(COM_ORG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder(COM_ORG).withGrade(VALID_GRADE_B).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(gradeBook.hasModule(updatedModule));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e gradeBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * A stub ReadOnlyGradeBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static class GradeBookStub implements ReadOnlyGradeBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 26,
      "-": 63,
      "augustinekau": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.EFF_COM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.testutil.GradeBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(new GradeBook(), new GradeBook(modelManager.getGradeBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userPrefs.setGradeBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userPrefs.setGradeBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setGradeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGradeBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setGradeBookFilePath_validPath_setsGradeBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        modelManager.setGradeBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(path, modelManager.getGradeBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void hasModule_moduleNotInGradeBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(modelManager.hasModule(COM_ORG));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void hasModule_moduleInGradeBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modelManager.addModule(COM_ORG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(modelManager.hasModule(COM_ORG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook gradeBook \u003d new GradeBookBuilder().withModule(COM_ORG).withModule(EFF_COM).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook differentGradeBook \u003d new GradeBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalTarget \u003d new GoalTarget();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        modelManager \u003d new ModelManager(gradeBook, userPrefs, goalTarget);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(gradeBook, userPrefs, goalTarget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        // different gradeBook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentGradeBook, userPrefs, goalTarget)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String[] keywords \u003d COM_ORG.getModuleName().fullModName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modelManager.updateFilteredModuleList(new ModuleNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(gradeBook, userPrefs, goalTarget)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        differentUserPrefs.setGradeBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(gradeBook, differentUserPrefs, goalTarget)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 20,
      "-": 98,
      "augustinekau": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setGradeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setGradeBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/GoalTargetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class GoalTargetTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void isValidGoal() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // between 1 to 6 (inclusive) -\u003e return true"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(GoalTarget.isValidGoal(1));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(GoalTarget.isValidGoal(6));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(GoalTarget.isValidGoal(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(GoalTarget.isValidGoal(-1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(GoalTarget.isValidGoal(7));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalTarget \u003d new GoalTarget(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(goalTarget.equals(new GoalTarget(1)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(goalTarget.equals(goalTarget));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(goalTarget.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(goalTarget.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different GoalTarget -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(goalTarget.equals(new GoalTarget(2)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/GradeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class GradeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Grade(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void constructor_invalidGrade_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String invalidGrade \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidGrade));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void isValidGrade() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Grade.isValidGrade(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(Grade.isValidGrade(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A-\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // Not relevant for grade"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // assertTrue(Grade.isValidGrade(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleModuleNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleModuleNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        predicate \u003d new ModuleNameContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"Computer\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        predicate \u003d new ModuleNameContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"Computing\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        predicate \u003d new ModuleNameContainsKeywordsPredicate(Arrays.asList(\"cS2100\", \"cOmPutEr\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        ModuleNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                new ModuleNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        predicate \u003d new ModuleNameContainsKeywordsPredicate(Arrays.asList(\"Computing\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"CS2100 Computer Organisation\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // Keywords match grade, but does not match module name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        predicate \u003d new ModuleNameContainsKeywordsPredicate(Arrays.asList(\"CS2103\", \"A+\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"CS2100\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "                 .withGrade(\"A+\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "augustinekau": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidModName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(ModuleName.isValidModName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(ModuleName.isValidModName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(ModuleName.isValidModName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(ModuleName.isValidModName(\"software*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(ModuleName.isValidModName(\"software engineering\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(ModuleName.isValidModName(\"2103\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(ModuleName.isValidModName(\"programming methodology 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(ModuleName.isValidModName(\"Programming Methodology\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(ModuleName.isValidModName(\"CP2106 Independent Software Development Project\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "augustinekau": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MOD_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(COM_ORG.isSameModule(COM_ORG));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(COM_ORG.isSameModule(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different module name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updatedModule \u003d new ModuleBuilder(COM_ORG).withName(VALID_MOD_NAME_A).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(COM_ORG.isSameModule(updatedModule));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same module name, different attributes (Grade) -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updatedModule \u003d new ModuleBuilder(COM_ORG).withGrade(\"A+\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "               .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(COM_ORG.isSameModule(updatedModule));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // same module name, same grade, different attributes (number of MCs) -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updatedModule \u003d new ModuleBuilder(COM_ORG).withGrade(\"A-\").withModularCredit(2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(COM_ORG.isSameModule(updatedModule));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        Module moduleCopy \u003d new ModuleBuilder(COM_ORG).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(COM_ORG.equals(moduleCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(COM_ORG.equals(COM_ORG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(COM_ORG.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(COM_ORG.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(COM_ORG.equals(MOD_A));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different module name -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder(COM_ORG).withName(VALID_MOD_NAME_A).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(COM_ORG.equals(updatedModule));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        // different grade -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        updatedModule \u003d new ModuleBuilder(COM_ORG).withGrade(\"A+\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(COM_ORG.equals(updatedModule));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 11,
      "-": 35,
      "augustinekau": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MOD_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertFalse(uniqueModuleList.contains(COM_ORG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertTrue(uniqueModuleList.contains(COM_ORG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void contains_moduleWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedModule \u003d new ModuleBuilder(COM_ORG).withGrade(VALID_GRADE_B).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertTrue(uniqueModuleList.contains(updatedModule));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(COM_ORG));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, COM_ORG));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule_nullUpdatedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(COM_ORG, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(COM_ORG, COM_ORG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule_updatedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.setModule(COM_ORG, COM_ORG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedUniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule_updatedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Module updatedAlice \u003d new ModuleBuilder(COM_ORG).withGrade(VALID_GRADE_B).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        uniqueModuleList.setModule(COM_ORG, updatedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        expectedUniqueModuleList.add(updatedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void setModule_updatedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.setModule(COM_ORG, MOD_B);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedUniqueModuleList.add(MOD_B);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(COM_ORG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.remove(COM_ORG);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedUniqueModuleList.add(MOD_B);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.add(COM_ORG);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(MOD_B);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        expectedUniqueModuleList.add(MOD_B);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(COM_ORG, COM_ORG);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 9,
      "-": 83,
      "augustinekau": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.EFF_COM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String INVALID_MODULE_NAME \u003d \"S@ftware\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String INVALID_GRADE \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private static final int VALID_MODULAR_CREDIT \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private static final String VALID_SEMESTER \u003d EFF_COM.getSemester().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String VALID_MODULE_NAME \u003d EFF_COM.getModuleName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final String VALID_GRADE \u003d EFF_COM.getGrade().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d EFF_COM.getTags().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(EFF_COM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertEquals(EFF_COM, module.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                new JsonAdaptedModule("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                        INVALID_MODULE_NAME, VALID_GRADE, VALID_TAGS, VALID_MODULAR_CREDIT, VALID_SEMESTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d ModuleName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                null, VALID_GRADE, VALID_TAGS, VALID_MODULAR_CREDIT, VALID_SEMESTER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleName.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void toModelType_invalidGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                VALID_MODULE_NAME, INVALID_GRADE, VALID_TAGS, VALID_MODULAR_CREDIT, VALID_SEMESTER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d Grade.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public void toModelType_nullGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                VALID_MODULE_NAME, null, VALID_TAGS, VALID_MODULAR_CREDIT, VALID_SEMESTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                VALID_MODULE_NAME, VALID_GRADE, invalidTags, VALID_MODULAR_CREDIT, VALID_SEMESTER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        assertThrows(IllegalValueException.class, module::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 11,
      "pongzers": 1,
      "-": 42,
      "augustinekau": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonGradeBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.COM_ORG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.GEH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.testutil.TypicalModules.GER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class JsonGradeBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonGradeBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void readGradeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readGradeBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGradeBook\u003e readGradeBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return new JsonGradeBookStorage(Paths.get(filePath)).readGradeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertFalse(readGradeBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradeBook(\"notJsonFormatGradeBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void readGradeBook_invalidModuleGradeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradeBook(\"invalidModuleGradeBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void readAndSaveGradeBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook original \u003d getTypicalGradeBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        JsonGradeBookStorage jsonGradeBookStorage \u003d new JsonGradeBookStorage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        GoalTarget goalTarget \u003d new GoalTarget(2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        jsonGradeBookStorage.saveGradeBook(original, filePath, goalTarget);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ReadOnlyGradeBook readBack \u003d jsonGradeBookStorage.readGradeBook(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(original, new GradeBook(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        original.addModule(GEH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        original.removeModule(COM_ORG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        jsonGradeBookStorage.saveGradeBook(original, filePath, goalTarget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        readBack \u003d jsonGradeBookStorage.readGradeBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(original, new GradeBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        original.addModule(GER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        jsonGradeBookStorage.saveGradeBook(original, goalTarget); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        readBack \u003d jsonGradeBookStorage.readGradeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(original, new GradeBook(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void saveGradeBook_nullGradeBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGradeBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Saves {@code gradeBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private void saveGradeBook(ReadOnlyGradeBook gradeBook, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "            new JsonGradeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "                    .saveGradeBook(gradeBook, addToTestDataPathIfNotNull(filePath), new GoalTarget());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void saveGradeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGradeBook(new GradeBook(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 32,
      "-": 66,
      "augustinekau": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        userPrefs.setGradeBookFilePath(Paths.get(\"gradebook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.ReadOnlyGradeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.GoalTarget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        JsonGradeBookStorage gradeBookStorage \u003d new JsonGradeBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storageManager \u003d new StorageManager(gradeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void gradeBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "         * {@link JsonGradeBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook original \u003d getTypicalGradeBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        storageManager.saveGradeBook(original, new GoalTarget());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        ReadOnlyGradeBook retrieved \u003d storageManager.readGradeBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertEquals(original, new GradeBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public void getGradeBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        assertNotNull(storageManager.getGradeBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 13,
      "-": 55,
      "augustinekau": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GradeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * A utility class to help with building Gradebook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " *     {@code GradeBook ab \u003d new GradeBookBuilder().withModule(\"CS2103\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class GradeBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private GradeBook gradeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook \u003d new GradeBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBookBuilder(GradeBook gradeBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.gradeBook \u003d gradeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Adds a new {@code Module} to the {@code GradeBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBookBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        gradeBook.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public GradeBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return gradeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import seedu.address.model.module.ModularCredit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"A+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final int DEFAULT_MODULAR_CREDIT \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static final Semester DEFAULT_SEMESTER \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private ModularCredit modularCredit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Creates a {@code ModuleBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        moduleName \u003d new ModuleName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        grade \u003d new Grade(DEFAULT_GRADE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        modularCredit \u003d new ModularCredit(DEFAULT_MODULAR_CREDIT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semester \u003d DEFAULT_SEMESTER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        moduleName \u003d moduleToCopy.getModuleName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        grade \u003d moduleToCopy.getGrade();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(moduleToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        modularCredit \u003d moduleToCopy.getModularCredit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        semester \u003d moduleToCopy.getSemester();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Sets the {@code Name} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.moduleName \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public ModuleBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        this.grade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Sets the {@code ModularCredit} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public ModuleBuilder withModularCredit(int modularCredit) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.modularCredit \u003d new ModularCredit(modularCredit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    // not sure if parameter is a string or semester"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ModuleBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.semester \u003d Semester.valueOf(semester);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new Module(moduleName, grade, tags, modularCredit, semester);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 15,
      "kunnan97": 1,
      "pongzers": 13,
      "-": 42,
      "augustinekau": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULAR_CREDIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOD_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static String getAddCommand(Module module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        sb.append(PREFIX_MOD_NAME + module.getModuleName().fullModName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        sb.append(PREFIX_GRADE + module.getGrade().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        module.getTags().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        sb.append(\"\" + PREFIX_MODULAR_CREDIT + module.getModularCredit().modularCredit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns the part of command string for the given {@code UpdateModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static String getUpdateModuleDescriptorDetails(UpdateCommand.UpdateModNameDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_MOD_NAME).append(name.fullModName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        descriptor.getGrade().ifPresent(grade -\u003e sb.append(PREFIX_GRADE).append(grade.toString()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 2,
      "pongzers": 2,
      "xyzhangg": 3,
      "-": 38,
      "augustinekau": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "augustinekau": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final Index INDEX_FIRST_MODULE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final Index INDEX_SECOND_MODULE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final Index INDEX_THIRD_MODULE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "augustinekau": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MOD_NAME_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.GradeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "augustinekau"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module COM_ORG \u003d new ModuleBuilder().withName(\"CS2100\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .withGrade(\"A-\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withTags(\"CS2100\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withSemester(Semester.Y2S1.toString()).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module EFF_COM \u003d new ModuleBuilder().withName(\"CS2101\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .withGrade(\"B-\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withTags(\"CS2101\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withSemester(Semester.Y2S1.toString()).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module SWE \u003d new ModuleBuilder().withName(\"CS2103T\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .withGrade(\"A+\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module COM_INFO \u003d new ModuleBuilder().withName(\"ES2660\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .withGrade(\"C\").withTags(\"ES2660\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module ASK_QN \u003d new ModuleBuilder().withName(\"GEQ1000\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withGrade(\"C+\").withTags(\"GEQ1000\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module STATS \u003d new ModuleBuilder().withName(\"ST2334\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withGrade(\"B\").withTags(\"ST2334\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module ALGO \u003d new ModuleBuilder().withName(\"CS2040S\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withGrade(\"B+\").withTags(\"CS2040S\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module GEH \u003d new ModuleBuilder().withName(\"GEH1036\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withGrade(\"A\").withTags(\"GEH\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static final Module GER \u003d new ModuleBuilder().withName(\"GER1000\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            .withGrade(\"A\").withTags(\"GER\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    // Manually added - Module\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final Module MOD_A \u003d new ModuleBuilder().withName(VALID_MOD_NAME_A)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .withGrade(VALID_GRADE_A).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final Module MOD_B \u003d new ModuleBuilder().withName(VALID_MOD_NAME_B)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .withGrade(VALID_GRADE_B).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns an {@code GradeBook} with all the typical modules."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public static GradeBook getTypicalGradeBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        GradeBook ab \u003d new GradeBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "augustinekau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(COM_ORG, EFF_COM, SWE, COM_INFO, ASK_QN, STATS, ALGO));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 12,
      "pongzers": 9,
      "xyzhangg": 4,
      "augustinekau": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UpdateModNameDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateModNameDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.module.ModuleName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.semester.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " * A utility class to help with building UpdatePersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "public class UpdateModNameDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    private UpdateModNameDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor \u003d new UpdateCommand.UpdateModNameDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder(UpdateModNameDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        this.descriptor \u003d new UpdateModNameDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Returns an {@code UpdateModNameDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor \u003d new UpdateModNameDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setName(module.getModuleName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setGrade(module.getGrade());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setTags(module.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setSemester(module.getSemester());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Sets the {@code module name} of the {@code UpdateModNameDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setName(new ModuleName(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Sets the {@code Grade} of the {@code UpdateModNameDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setGrade(new Grade(grade));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code UpdateModNameDescriptor}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     * Sets the {@code semester} of the {@code EditModNameDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptorBuilder withSemester(Semester semester) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        descriptor.setSemester(semester);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    public UpdateModNameDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xyzhangg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xyzhangg": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CapBoxTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "public class CapBoxTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void setCapDisplayMethodTestSuccess() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        CapBox capBox \u003d new CapBox(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String expectedDisplaySuccess \u003d \"Current CAP: 5\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        capBox.setCapDisplay(\"5\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String testDisplay \u003d capBox.getCurrentCapDisplay().getText();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertEquals(testDisplay, expectedDisplaySuccess);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    public void setCapDisplayMethodTestRemainSameFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        CapBox capBox \u003d new CapBox(\"0\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String expectedDisplayFail \u003d \"Current CAP: 0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        capBox.setCapDisplay(\"5\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        String testDisplay \u003d capBox.getCurrentCapDisplay().getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kunnan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "        assertFalse(testDisplay.equals(expectedDisplayFail));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kunnan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kunnan97": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    // Can\u0027t make it to pass"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "    */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "augustinekau": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003c?import seedu.grade.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "augustinekau": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "augustinekau"
        },
        "content": "\u003cfx:root type\u003d\"seedu.grade.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "augustinekau": 1
    }
  }
]
