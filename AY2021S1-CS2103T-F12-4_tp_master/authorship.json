[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## Lifebook [![CI Status](https://github.com/AY2021S1-CS2103T-F12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Introduction**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* Lifebook is a project developed for an introductory Software Engineering (SE) module (CS2103T) at the National University of Singapore."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * Lifebook is a desktop application intended for University students to  manage contact details, assignments, projects, module details, etc."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It is morphed from AddressBook Level 3 (AB3)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* For the detailed user documentation of this project, see [here](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/docs/UserGuide.md)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* For contributing to the ongoing development of the Lifebook, do check out the [Developer Guide](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/docs/DeveloperGuide.md)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "This project is developed from an se-education.org initiative. If you would like to contribute code to the initiative, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Libraries used: JavaFX, Jackson, JUnit5"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "lerxcl": 21,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "You can reach us at the email `urieltan[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Tan Hong Jie Uriel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/urieltan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](https://github.com/urieltan)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: About Us expert, Developer Guide"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Chua Chen Ler"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/lerxcl.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/lerxcl)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: Team Lead, Deliverables and deadlines, Scheduling and tracking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Lin Yuan Xun, Caleb"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cimg src\u003d\"images/caleblyx.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/caleblyx)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: User guide, Intellij expert, Merge conflict solver"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Lucia Tirtia Gunawan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/luciatirta.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/luciatirta)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: Testing, Ui Expert"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "### Kevin William"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cimg src\u003d\"images/kevnw.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "[[github](http://github.com/kevnw)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* Role: Integration, Code quality, Github Expert"
      }
    ],
    "authorContributionMap": {
      "urieltan": 17,
      "kevnw": 4,
      "lerxcl": 1,
      "-": 30
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Add tasks (`todo` and `event`) feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskParserClassDiagram](images/addTask/AddTaskParserClassDiagram.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* `AddCommandParser` implements `Parser\u003cAddCommand\u003e`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* It parses the user input to determine if the user intends to add a `todo`, `event`, or `person`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* It parses the input after the prefixes required to create the intended `todo`, `event`, or `person`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* If the user input has all all required prefixes and matches the required syntax and format, it creates the new intended Task or `person` and passes it to its respective AddCommand constructor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskCommandClassDiagram](images/addTask/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The abstract class `AddCommand` extends `Command`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The concrete classes `AddTodoCommand` and `AddEventCommand` extends `AddCommand`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The command will be executed by the Model, which will update the FilteredTaskList based on the added task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* If it is successful, it will return a CommandResult with a successful message to the UI."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The following sequence diagrams displays a `Todo` being added to the Task List. Adding an `Event` follows a similar sequence."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddSequenceDiagram](images/addTask/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The following sequence diagram exhibits the behavior of logic."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskSequenceDiagram](images/addTask/AddTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "The following activity diagram shows what happens when the user enters an add task command:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "![AddTaskActivityDiagram](images/addTask/AddTaskActivityDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "#### How command works:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* An alternative approach would be to have a single `AddTaskCommand` which extends `AddCommand`. The `AddCommandParser` could pass either `todo` or `event` to this class\u0027 constructor."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* This could reduce the replication of code, since both `AddTodoCommand` and `AddEventCommand` are almost identical."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* However, by having two distinct commands, different and more specific success or error messages can be produced by the execution of respective commands."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Filter tasks (`dueBy` and `dueBefore`) feature"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![ParserClassDiagram](images/filterFunction/ParserClassDiagram.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueBeforeCommandParser` implements `Parser\u003cDueBeforeCommand\u003e`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It checks for the phrase `itemsDueBefore` and parses the input after the prefixes: date `date/` and time `time/`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * If the input are in the correct date and time format, a new DueBeforePredicate object is created and passed"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    to a new DueBeforeCommand constructor."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueByCommandParser` implements `Parser\u003cDueByCommand\u003e`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * It checks for the phrase `itemsDueBy` and parses the content after the prefixes: date `date/` and time `time/`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * If the input are in the correct date and time format, a new DueByPredicate object is created and passed to a new DueByCommand constructor."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Predicate:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![PredicateClassDiagram](images/filterFunction/PredicateClassDiagram.png)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The way dueBy and dueBefore works is very similar, the difference only being the dueBefore and dueBy predicate."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "`DueBeforePredicate` and `DueByPredicate` extends `DuePredicate`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueBeforePredicate` compares the LocalDateTime input and every task\u0027s LocalDateTime, and returns true if the task\u0027s LocalDateTime *is before* the input\u0027s LocalDateTime."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueByPredicate` compares the LocalDateTime input and every task\u0027s LocalDateTime, and returns true if the task\u0027s LocalDateTime *equals* the input\u0027s LocalDateTime."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The class diagram"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![CommandClassDiagram](images/filterFunction/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `DueBeforeCommand` and `DueByCommand` extends `Command`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* The command will be executed with the `Model`, which will update the `FilteredTaskList` based on the `DueByPredicate`/`DueBeforePredicate`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* If it is successful, it will return a `CommandResult` with a successful message to the UI."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The following sequence diagram shows how the dueBy filtering works:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![FilterSequenceDiagram](images/filterFunction/FilterSequenceDiagram.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "The following activity diagram shows what happens when the user enters the filter command:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "![FilterActivityDiagram](images/filterFunction/FilterActivityDiagram.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "##### Aspect: How dueBy and dueBefore executes"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "After implementing the task operations, there is `FilteredTaskList` which we can utilise to filter tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "By using the same function, we can prevent duplication of code."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Furthermore, we have adhered a similar design to the task\u0027s operations (Using of Command, Parser classes) to maintain code consistency."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Add link to tasks (`link meeting` and `link doc`) feature"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### Parser:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![ParserClassDiagram](images/linkFunction/ParserClassDiagram.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `LinkCommandParser` implements `Parser\u003cLinkCommand\u003e`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It checks for the phrase `link meeting` for LinkMeetingCommand and parses the input"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    after the prefixes: desc `desc/`, url `url/`, index `i/`, date `date/DD-MM-YYYY`, and time `time/HHmm`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It checks for the phrase `link doc` for LinkCollaborativeCommand and parses the input"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    after the prefixes: desc `desc/`, url `url/`, and index `i/`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * If the inputs are all in the correct format, a new Link object is created and added to an existing task."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": " The class diagram"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![CommandClassDiagram](images/linkFunction/CommandClassDiagram.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "-----"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The following sequence diagram shows how the LinkCommand works:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `LinkCollaborativeCommand` and `LinkMeetingCommand` extends `Command`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The command will be parsed by `AddressBookParser` and further parsed by `LinkCommandParser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The `LinkCommandParser` will determine whether the command is a `LinkMeetingCommand` or a `LinkCollaborativeCommand`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* After returning the suitable Link Command, the command will be executed, calling the `setTask()` method of `Model`,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "which will update the `TaskList`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* After updating the task, the `LogicManager` will call `saveLifeBook()` method of `Storage` class to store the update."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* If all are successful, `LinkCommand` will return a `CommandResult` with a successful message to the UI."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![FilterSequenceDiagram](images/linkFunction/LinkSequenceDiagram.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "The following activity diagram shows what happens when the user enters the link command:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "![FilterActivityDiagram](images/linkFunction/LinkActivityDiagram.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Show tag (`show contact`, `show todo`, and `show event`) feature"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#### Parser:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![ParserClassDiagram](images/showTagFunction/ShowTagCommandParserClassDiagram.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `ShowTagCommandParser` implements `Parser\u003cShowTagCommand\u003e`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * It checks for the phrase `show contact` for ShowTagContactCommand and parses the input"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    after the prefixes: `t/`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * It checks for the phrase `show event` for ShowTagEventCommand and parses the input"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    after the prefixes: `t/`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * It checks for the phrase `show todo` for ShowTagTodoCommand and parses the input"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    after the prefixes: `t/`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * If the input is correct, a new Predicate object is created and passed to a new ShowTagCommand constructor."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### Predicate:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![PredicateClassDiagram](images/showTagFunction/ContactTagMatchesKeywordPredicate.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![PredicateClassDiagram](images/showTagFunction/TaskTagMatchesKeywordPredicate.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The way these predicate works is very similar, where the `ContactTagMatchesKeywordPredicate` handles the Person object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "and the `TaskTagMatchesKeywordPredicate` handles the Task object."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "`ContactTagMatchesKeywordPredicate` implements `Predicate\u003cPerson\u003e`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "`TaskTagMatchesKeywordPredicate` implements `Predicate\u003cTask\u003e`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `ContactTagMatchesKeywordPredicate` returns true if the tag input matches one of the contact\u0027s tags."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `TaskTagMatchesKeywordPredicate` returns true if the tag input matches one of the task\u0027s (event\u0027s or todo\u0027s) tags."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "##### Command:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " The class diagram"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![CommandClassDiagram](images/showTagFunction/ShowTagCommandClassDiagram.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "-----"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The sequence diagram:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `ShowTagContactCommand`, `ShowTagEventCommand` and `ShowTagTodoCommand` extends `ShowTagCommand`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The command will be parsed by `AddressBookParser` and further parsed by `ShowTagCommandParser`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The `ShowTagCommandParser` will determine whether the command is a `ShowTagContactCommand`, `ShowTagEventCommand` or a `ShowTagTodoCommand`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* After returning the suitable ShowTagCommand, the command will be executed,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "calling the `updateFiltertedPersonList()` method of `Model` and update the `AddressBook` if it is a `ShowTagContactCommand`, or"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "the `updateFiltertedTaskList()` method of `Model` and update the `TaskList` if it is a `ShowTagEventCommand` or `ShowTagTodoCommand`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* After updating the model, the `LogicManager` will call the sorage to save the file."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* If all are successful, `ShowTagCommand` will return a `CommandResult` with a successful message to the UI."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The following sequence diagram shows how the `ShowTagContactCommand` works."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The sequence diagrams for `ShowTagEventCommand` and `ShowTagTodoCommand` are very similar to the diagram below"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "with minor differences in the type of ShowTagCommand returned and function called to update the model."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![FilterSequenceDiagram](images/showTagFunction/ShowTagCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![SaveFileDiagram](images/showTagFunction/SaveLifebook.png)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The following activity diagram shows what happens when the user enters the show contact command:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "![FilterActivityDiagram](images/showTagFunction/ShowTagCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "The activity diagram when user enters the show event or show todo command is similar to the diagram above."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Students can keep track of tasks from all modules they take efficiently."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Manage contacts faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Increase school productivity."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* An all in one app that makes student\u0027s life easier."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user                                       | add a new person               |                                                                        |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | forgetful student                          | add todos and events        | remember to complete important tasks for projects and  attend important events|"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | forgetful student                          | remove todos and events        | remove tasks that I no longer need |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | user                                       | find todos by description          | locate details of todos without having to go through the entire list |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | user                                       | find events by description          | locate details of events without having to go through the entire list |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* * *`  | student                                    | mark todos and events as done  | remember the tasks or assignments that I have completed          |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| ` * * ` | forgetful student                           | search for contacts under a particular tag  | find people I am working with easily"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| ` * * ` | forgetful student                           | search for todos and events under a particular tag  | find the task that I am working on"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* *`    | disorganised student                       | add and remove collaborative links (Google Drive, and many more) to a todo   | find the collaborative link for the project easily |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "| `* *`      | disorganised student                       | add, remove, and view zoom links for meetings to an event         | remember my Zoom Links                                      |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kevnw"
        },
        "content": "| `* *`    | forgetful/disorganised student | search what tasks/meetings are due soon or by a specific date/time (filter) | remember to finish before the deadline|"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kevnw"
        },
        "content": "| `*`      | user with many contacts in the Lifebook | sort persons by name           | locate a person easily                                                 |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "| `*`      | student with weekly lectures and tutorials | add recurring tasks         | save time by not adding the same task every week, which is time-consuming|"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "(For all use cases below, the **System** is the `Lifebook` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: Delete a person**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "2.  Lifebook shows a list of persons"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "4.  Lifebook deletes the person"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Use case: Show contacts with a specific tag**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "2.  Lifebook shows a list of persons"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "3.  User requests to show all persons with a specific tag in the list"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "4.  Lifebook shows all the persons whose tag matching the tag searched"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 3a. The given tag is empty or invalid."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Use case: Show Todos with a specific tag**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "1.  User requests to list todos"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "2.  Lifebook shows a list of todos"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "3.  User requests to show all todos with a specific tag in the list"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "4.  Lifebook shows all the todos whose tag matching the tag searched"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 3a. The given tag is empty or invalid."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Use case: Show Events with a specific tag**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "1.  User requests to list events"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "2.  Lifebook shows a list of events"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "3.  User requests to show all events with a specific tag in the list"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "4.  Lifebook shows all the events whose tag matching the tag searched"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* 3a. The given tag is empty or invalid."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Use case: Add a To Do to the To Do List**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1. User requests to add a To Do and its details (i.e. description, date, and time) to the To Do list."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2. Lifebook acknowledges the request by adding the To Do to the To Do list."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 1a. User inputs the date or time of the To Do in the incorrect format."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 1a1. Lifebook shows an error message"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Use case restarts at step 1."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 1b. User chooses to input the task as a recurring one"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 1b1. Lifebook will add the task as a recurring one instead."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Use case: Perform an action (remove, show, mark as done) on a To Do from the To Do list**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "1.  User requests to list all To Do\u0027s"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "2.  Lifebook shows a list of To Do\u0027s"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "3.  User requests to perform an action on a specific To Do from the list"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "4.  Lifebook performs action on To Do."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 3a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* 3b. The given action does not exist."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    * 3b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 3c. The user marks a recurring task as done."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 3c1. Lifebook will automatically add a new task with the same details, with a new deadline given by the recurrence."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Use case: Filter items due on a specific date/time**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1.  User requests to filter items due by/before a specified date/time"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "2.  Lifebook shows a list of items that fulfil the requirement."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 1b. The given date/time format is invalid."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    * 1b1. Lifebook shows an error message."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Use case restarts at step 1."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Use case: Add or remove a collaborative link**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kevnw"
        },
        "content": "1. User requests a task to be given a link (GitHub Repo, Google Drive, etc)."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kevnw"
        },
        "content": "2. Lifebook acknowledges the request by showing the requested task."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kevnw"
        },
        "content": "3. User requests to bind the link with the task."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kevnw"
        },
        "content": "4. Lifebook performs action on the task."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 3a. The task already has a link."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * 3a1. Lifebook requests permission to override the existing link."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "urieltan"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "urieltan"
        },
        "content": "**Use case: Store and retrieve a meeting link**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "urieltan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "urieltan"
        },
        "content": "1. User requests a task to be given a meeting link (Teams, Zoom, etc)."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "urieltan"
        },
        "content": "2. Lifebook acknowledges the request by attaching a link to the task."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "urieltan"
        },
        "content": "3. User later requests to view meeting links associated with the task."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "urieltan"
        },
        "content": "4. Lifebook shows the links associated with the task."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "urieltan"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "urieltan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 1a. The given index is invalid."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    * 1a1. Lifebook shows an error message."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "urieltan"
        },
        "content": "      Use case restarts at step 1."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "urieltan"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* 3a. The task already has a link."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * 3a1. Lifebook requests permission to override the existing link."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "4.  Commands should be intuitive so that users can quickly remember the commands."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "urieltan": 26,
      "kevnw": 66,
      "luciatirta": 120,
      "lerxcl": 67,
      "caleblyx": 54,
      "-": 259
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Lifebook is a **desktop application intended for University students to  manage contact details, assignments, projects,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "and module details.** Lifebook supports Command Line Interface (CLI) for efficient contacts and tasks management while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "1. Download the latest `lifebook.jar` from [here](https://github.com/AY2021S1-CS2103T-F12-4/tp/releases/tag/v1.3a)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Lifebook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`list contact`** : Lists all contacts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`add contact`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the contact list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "   * **`add todo`**`desc/homework date/12-12-2020 time/2359`: Adds a todo with a description `homework` that is due by `12 December 2020, 2359`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "   * **`link meeting`**`desc/Annual meeting url/https://nus-sg.zoom.us/j/98401234359?pwd\u003deG9HU1FJRDdsVHRaYkFUTC95L0abcedf todo i/2 date/20/1/2020 time/2359` : Add a zoom meeting titled \u0027annual meeting\u0027 at 2359, 20 Jan 2020 to the app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`delete contact`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "   * **`clear contact`** : Deletes all contacts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* Parameters for contacts can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003ch2\u003e Contact\u003c/h2\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Adding a person: `add contact`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Adds a person to the contact list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `add  contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add contact n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add contact n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Listing all persons : `list contact`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Shows a list of all persons in the contact list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list contact`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Editing a person : `edit contact`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Edits an existing person in the contact list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `edit contact INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit contact 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "*  `edit contact 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Showing persons with a specific tag: `show contact`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Shows persons whose tags match the tag being searched."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `show contact t/TAG`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive. e.g `friends` will match `Friends`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched. e.g. `friend` will not match `friends`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Persons whose one of the tag(s) matches the tag searched will be returned."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. Hans with tag `friends` and `colleagues` will be returned when tag `friends` is searched."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `show contact t/colleagues`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `show contact t/friends`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Locating persons by name: `find contact`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `find contact KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `find contact John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `find contact alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Deleting a person : `delete contact`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Deletes the specified person from the contact list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `delete contact INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `list contact` followed by `delete contact 2` deletes the 2nd person in the contact list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `find contact Betsy` followed by `delete contact 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Clearing all entries : `clear contact`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Clears all entries from the contact list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `clear contact`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003ch2\u003e Todo \u003c/h2\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Adding To Dos : `add todo`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Adds a To Do to the TodoList of LifeBook."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `add todo desc/DESCRIPTION date/DATE time/TIME [recurring/VALUE UNIT]`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `DATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `TIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `VALUE` must be \u003e 0"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `UNIT` must be \"day\", \"week\", \"month\" or \"year\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Recurrence"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "If a task is recurring, it will be displayed in the GUI."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cimg src\u003d\"https://github.com/lerxcl/tp/blob/recurringTask/docs/images/ExampleOfARecurringTask.png\" height\u003d\"150\" width\u003d\"280\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add todo desc/cs2101 Oral Presentation reflection date/08-08-2020 time/2359`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add todo desc/user guide draft date/09-08-2020 time/2300`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `add todo desc/tutorial date/10-10-2020 time/1130 recurring/1 week`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### View all To Dos : `list todo`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Shows a list of all To Do\u0027s in the TodoList."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Format: `list todo`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Showing todos with a specific tag: `show todo`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Shows todos whose tags match the tag being searched."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `show todo t/TAG`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive. e.g `cs2100` will match `CS2100`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched. e.g. `cs210` will not match `cs2100`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Todos whose one of the tag(s) matches the tag searched will be returned."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. Finish assignment with tag `CS2100` and `Graded` will be returned when tag `CS2100` is searched."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `show todo t/CS2100`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `show todo t/CS3243`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Locating todos by description: `find todo`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Finds todos whose description contain any of the given keywords."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `find todo KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive. e.g `assignment` will match `Assignment`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The order of the keywords does not matter. e.g. `Finish assignment` will match `assignment Finish`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched e.g. `Assign` will not match `Assignment`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Todos matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  e.g. `Do assignment` will return `Do chores`, `Finish assignment`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find todo assignment` returns `Essay assignment` and `Quiz assignment`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find todo Do assignment` returns `Do chores`, `Finish assignment`\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Removing To Dos : `delete task`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Removes a To Do from the TodoList of LifeBook."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `delete task INDEX`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Removes the To Do at the specified `INDEX`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The index refers to the index number shown in the displayed TodoList."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `list todo` followed by `delete task 3`  removes the 3rd To Do from the To Do list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### View details of a specific To Do: `show todo`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Shows all details of a specific To Do on the TodoList."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Format: `show todo i/INDEX`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Shows all details of the To Do at the specified `INDEX`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The index refers to the index number shown in the displayed TodoList."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* `list todo` followed by `show todo i/3`  shows all details of the 3rd To Do on the To Do list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Mark To Do as complete: `done`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Marks a To Do on the TodoList as complete."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Marks the To Do at the specified `INDEX` as done."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The index refers to the index number shown in the displayed TodoList."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* If it is a recurring todo, it will proceed to add a new Todo based on the new deadline given by the recurrence."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `list todo` followed by `done 3` marks the 3rd todo on the Todo List as complete."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003ch2\u003e Event \u003c/h2\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Adding Events : `add event`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds an Event o to the EventList of LifeBook."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `add event desc/DESCRIPTION startdate/DATE starttime/TIME enddate/DATE endtime/TIME [recurring/VALUE UNIT]`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `DATE` must be specified in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `TIME` must be specified in the format of HHmm using 24 hour time"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `VALUE` must be \u003e 0"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `UNIT` must be \"day\", \"week\", \"month\" or \"year\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `add event desc/Party with friends startdate/08-08-2020 starttime/2359 enddate/10-08-2020 endtime/2359 recurring/1 year`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `add event desc/Singapore Fintech Festival startdate/09-08-2020 starttime/1000 enddate/12-08-2020 endtime/2359`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### View all Events : `list event`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Shows a list of all Events in the EventList."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list event`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Showing events with a specific tag: `show events`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Shows events whose tags match the tag being searched."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `show event t/TAG`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive. e.g `cs2100` will match `CS2100`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched. e.g. `cs210` will not match `cs2100`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Events whose one of the tag(s) matches the tag searched will be returned."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "e.g. Attend meeting with tag `CS2100` and `TeamProject` will be returned when tag `CS2100` is searched."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `show event t/TeamProject`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `show event t/CS3243`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Locating todos by description: `find event`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Finds events whose description contain any of the given keywords."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Format: `find event KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The search is case-insensitive. e.g `meeting` will match `Meeting`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* The order of the keywords does not matter. e.g. `Attend meeting` will match `meeting Attend`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Only full words will be matched e.g. `Meet` will not match `Meeting`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* Events matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  e.g. `Attend meeting` will return `Attend workshop`, `Arrange meeting`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find event meeting` returns `CCA meeting` and `Team meeting`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "* `find event Attend meeting` returns `Attend workshop`, `Arrange meeting`\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Removing Events : `delete task`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Removes an Event from the EventList of LifeBook."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `delete task INDEX`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Removes the Event at the specified `INDEX`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index refers to the index number shown in the displayed EventList."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `list event` followed by `delete task 3`  removes the 3rd Event from the Event list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### View details of a specific Event: `show event`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Shows all details of a specific Event on the EventList."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `show event INDEX`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Shows all details of the Event at the specified `INDEX`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index refers to the index number shown in the displayed EventList."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `list event` followed by `show event 3`  shows all details of the 3rd Event on the Event list."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "### Mark Event as complete: `done`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Marks an Event on the EventList as complete."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Marks the Event at the specified `INDEX` as done."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* The index refers to the index number shown in the displayed Event list."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* If it is a recurring event, it will proceed to add a new Event based on the new deadline given by the recurrence."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `list event` followed by `done 3` marks the 3rd Event on the Event list as complete."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003ch2\u003e Others \u003c/h2\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "### Listing all tasks : `list all`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Shows a list of all events and to-dos in the Lifebook."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format: `list all`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Adding a zoom meeting: `link meeting`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds a zoom link for a task."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link meeting desc/DESCRIPTION url/MEETING LINK i/INDEX_OF_TODO date/DD-MM-YYYY time/HHmm`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "* `link meeting desc/Job interview url/https://nus-sg.zoom.us/j/98221234359?pwd\u003deG9HU1FJRDdsVHRaYk2UTC95L0abcedf i/2 date/22-09-2020 time/1400`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Adding a collaborative folder link: `link doc`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Adds a collaborative link (Google Drive, GitHub, Trello, and others)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link doc desc/DESCRIPTION url/LINK i/INDEX_OF_TODO`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* `link doc desc/CS2103T Team Project url/https://drive.google.com/drive/folders/1zoUz1JpAgynIkfacr0asqV9A4kh i/2`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Filter deadlines : `itemsDue`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kevnw"
        },
        "content": "User can search todos/meetings due by/before a certain date/time."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Outputs a list of results."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Due by"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `itemsDueBy date/DD-MM-YYYY time/HHmm`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `DD-MM-YYYY`: States the Day, Month, Year."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `HHmm`: States the time in 24 hours."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Example: `itemsDueBy date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    It will output a list of todos/meetings that are due specifically **on** 12th December 2020, 2359."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Due before"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `itemsDueBefore date/DD-MM-YYYY time/HHmm`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `DD-MM-YYYY`: States the Day, Month, Year."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    `HHmm`: States the time in 24 hours."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Example: `itemsDueBefore date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    It will output a list of todos/meetings that are due specifically **before** 12th December 2020, 2359."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "### Sorting contacts and tasks: `sort`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Sorts tasks or contacts according to date or name, respectively. Sorting may also be cleared, such that the natural order of lists are restored."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Format: `sort OPTION`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Contact, task, and clear are the available options for sort and should be used individually."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "* Using the clear option restores all lists (i.e. both contact list and task list) to their natural order."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Lifebook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kevnw"
        },
        "content": "### Archiving data files"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kevnw"
        },
        "content": "This feature will be implemented in the next iteration (v1.2)."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Lifebook home folder."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Add Contact** | `add contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add contact n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Clear Contacts** | `clear contact`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Delete Contact** | `delete contact INDEX`\u003cbr\u003e e.g., `delete contact 3`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Edit Contact** | `edit contact INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`\u003cbr\u003e e.g.,`edit contact 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Find Contact** | `find contact KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find contact James Jake`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Find To Do** | `find todo KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find todo Finish assignment`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Find Event** | `find event KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find event Attend meeting`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Show Contact** | `show contact t/TAG` \u003cbr\u003e e.g., `show contact t/friends`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Show To Do** | `show todo t/TAG` \u003cbr\u003e e.g., `show todo t/CS2100`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**Show Event** | `show event t/TAG` \u003cbr\u003e e.g., `show event t/CCAMeeting`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "**List Tasks** | `list all`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List Contacts** | `list contact`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Add To Do** | `add todo desc/DESCRIPTION date/DATE time/TIME [recurring/VALUE UNIT]` \u003cbr\u003e e.g., `add todo desc/update user guide date/09-08-2020 time/2300 recurring/1 week`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List To Dos** | `list todo`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Remove Task (Todo and Event)** | `delete task INDEX` \u003cbr\u003e e.g., `delete task 3`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Show To Do** | `show todo INDEX` \u003cbr\u003e e.g., `show todo 3`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Add Event** | `add event desc/DESCRIPTION startdate/DATE starttime/TIME enddate/DATE endtime/TIME [recurring/VALUE UNIT]` \u003cbr\u003e e.g., `add event desc/meeting startdate/12-12-2020 starttime/1000 enddate/12-12-2020 endtime/1130 recurring/1 week`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**List Events** | `list event`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Show Event** | `show event INDEX` \u003cbr\u003e e.g., `show event 3`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Mark To Do/Event as Complete** | `done INDEX` \u003cbr\u003e e.g., `done 5`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Find tasks due by** | `itemsDueBy date/DD-MM-YYYY time/HHmm` \u003cbr\u003e e.g. `itemsDueBy date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Find tasks due before** |  `itemsDueBefore date/DD-MM-YYYY time/HHmm` \u003cbr\u003e e.g. `itemsDueBefore date/12-12-2020 time/2359`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "**Sort** | `sort OPTION` \u003cbr\u003e `OPTION` refers to `contact`, `task`, or `clear`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Link meeting** | `link meeting desc/DESCRIPTION url/LINK i/INDEX_OF_TASK` \u003cbr\u003e e.g.,`link meeting desc/Job interview url/https://nus-sg.zoom.us/j/98221234359?pwd\u003deG9HU1FJRDdsVHRaYk2UTC95L0abcedf i/2 date/22-09-2020 time/1400`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "**Link doc** | `link doc desc/DESCRIPTION url/LINK i/INDEX_OF_TASK` \u003cbr\u003e e.g.,`link doc desc/CS2103T Team Project url/https://drive.google.com/drive/folders/1zoIkfacr0asqV9A4kh i/2`"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "kevnw": 130,
      "luciatirta": 90,
      "lerxcl": 55,
      "caleblyx": 48,
      "-": 140
    }
  },
  {
    "path": "docs/diagrams/addTask/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"add todo desc/Complete homework date/12-12-2020 time/2359\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"add todo desc/Complete homework date/12-12-2020 time/2359\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "logic -[LOGIC_COLOR]\u003emodel : new Todo(\"Complete homework date\", \"12-12-2020 2359\" )"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic: todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addTodo(todo)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 33
    }
  },
  {
    "path": "docs/diagrams/addTask/AddTaskActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ":User executes an add task command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "if () then ([task is in the Task List])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    :Task will not be added;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    : Task will be added to Task List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    : Task List is updated;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 15
    }
  },
  {
    "path": "docs/diagrams/addTask/AddTaskParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class AddCommandParser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Parser \u003c|.. AddCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 13
    }
  },
  {
    "path": "docs/diagrams/addTask/AddTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \"d:AddTodoCommand\" as AddTodoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "participant \"t:Todo\" as Todo MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "[-\u003e LogicManager : execute(\"add todo desc/Complete homework date/12-12-2020 time/2359\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"add todo desc/Complete homework date/12-12-2020 time/2359\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBookParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create Todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser -\u003e Todo : new Todo(\"Complete homework date\", \"12-12-2020 2359\" )"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate Todo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Todo --\u003e AddCommandParser : t"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate Todo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create AddTodoCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser -\u003e AddTodoCommand : new AddTodoCommand(t)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddTodoCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand --\u003e AddCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddTodoCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "LogicManager -\u003e AddTodoCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate AddTodoCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand -\u003e Model : addTodo(t)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "Model --\u003e AddTodoCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "CommandResult --\u003e AddTodoCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "AddTodoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate AddTodoCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 72
    }
  },
  {
    "path": "docs/diagrams/addTask/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nAddCommand\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class AddTodoCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class AddEventCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nCommand\" \u003c|-- \"{abstract}\\nAddCommand\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nAddCommand\" \u003c|-- AddTodoCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nAddCommand\" \u003c|-- AddEventCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 20
    }
  },
  {
    "path": "docs/diagrams/addTask/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 75
    }
  },
  {
    "path": "docs/diagrams/deleteTask/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define ABSTRACT \u0026#123;abstract\u0026#125;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "abstract class \"{abstract}\\nDeleteCommand\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class DeleteTodoCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "class DeleteEventCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nCommand\" \u003c|-- \"{abstract}\\nDeleteCommand\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nDeleteCommand\" \u003c|-- DeleteTodoCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\"{abstract}\\nDeleteCommand\" \u003c|-- DeleteEventCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 20
    }
  },
  {
    "path": "docs/diagrams/deleteTask/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 75
    }
  },
  {
    "path": "docs/diagrams/filterFunction/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueBeforeCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueByCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Command \u003c|-- DueBeforeCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Command \u003c|-- DueByCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 14
    }
  },
  {
    "path": "docs/diagrams/filterFunction/FIlterActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ":User executes itemsDueBy / itemsDueBefore command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "if () then ([task matches predicate])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    :Task will be displayed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : Task will not be displayed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 15
    }
  },
  {
    "path": "docs/diagrams/filterFunction/FilterSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"itemsDueBefore date/12-12-2020 time/2359\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"itemsDueBefore date/12-12-2020 time/2359\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : updateFilteredTaskList(predicate)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 27
    }
  },
  {
    "path": "docs/diagrams/filterFunction/ParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueBeforeCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueByCommandParser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Parser \u003c|.. DueBeforeCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "Parser \u003c|.. DueByCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 14
    }
  },
  {
    "path": "docs/diagrams/filterFunction/PredicateClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "abstract class \"{abstract}\\nDuePredicate\" as DuePredicate"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueBeforePredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "class DueByPredicate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "DuePredicate \u003c|-- DueBeforePredicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "DuePredicate \u003c|-- DueByPredicate"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 14
    }
  },
  {
    "path": "docs/diagrams/filterFunction/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 75
    }
  },
  {
    "path": "docs/diagrams/linkFunction/CommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class LinkCollaborativeCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class LinkMeetingCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "abstract class \"{abstract}\\nLinkCommand\" as LinkCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Command \u003c|-- LinkCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCommand \u003c|-- LinkCollaborativeCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCommand \u003c|-- LinkMeetingCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 16
    }
  },
  {
    "path": "docs/diagrams/linkFunction/LinkActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ":User executes `link meeting` / `link doc` command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    if () then([command is link meeting])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        : Add or edit the link to event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        : Add or edit the link to todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    : Error message displayed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 19
    }
  },
  {
    "path": "docs/diagrams/linkFunction/LinkSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":LinkCommandParser\" as LinkCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"l:LinkCollaborativeCommand\" as LinkCollaborativeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \"l:LinkMeetingCommand\" as LinkMeetingCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[-\u003e LogicManager : execute(\"link doc desc/CS2103T url/www.github.com i/1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"link ...\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create LinkCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser -\u003e LinkCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LinkCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LinkCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "alt is a collaborative link"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    AddressBookParser -\u003e LinkCommandParser : parse(\"doc desc/CS2103T url/www.github.com i/1\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    create LinkCollaborativeCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -\u003e LinkCollaborativeCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCollaborativeCommand --\u003e LinkCommandParser : l"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser --\u003e AddressBookParser : l"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    destroy LinkCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "else is a meeting link"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    AddressBookParser -\u003e LinkCommandParser : parse(\"meeting desc/CS2103T Lecture url/www.zoom.com i/1 ...\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    create LinkMeetingCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -\u003e LinkMeetingCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    activate LinkMeetingCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkMeetingCommand --\u003e LinkCommandParser : l"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkMeetingCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser --\u003e AddressBookParser : l"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    deactivate LinkCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LinkCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    destroy LinkCommandParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "end"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "AddressBookParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -\u003e LinkCollaborativeCommand : execute()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCollaborativeCommand -\u003e Model : setTask(taskToEdit, editedTask)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Model --\u003e LinkCollaborativeCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveLifeBook(LifeBook)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Storage -[STORAGE_COLOR]\u003e Storage : Save\\nto file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e Storage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCollaborativeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "CommandResult --\u003e LinkCollaborativeCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "LinkCollaborativeCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LinkCollaborativeCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 106
    }
  },
  {
    "path": "docs/diagrams/linkFunction/ParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class LinkCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Parser \u003c|.. LinkCommandParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kevnw": 12
    }
  },
  {
    "path": "docs/diagrams/linkFunction/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "kevnw": 75
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/ContactTagMatchesKeywordPredicate.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "interface \"Predicate\u003cPerson\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class ContactTagMatchesKeywordPredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\"Predicate\u003cPerson\u003e\" \u003c|.. ContactTagMatchesKeywordPredicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/SaveLifebook.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "group sd save file"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Model : getAddressBook()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Model --[MODEL_COLOR]\u003e LogicManager : ReadOnlyAddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Model : getTaskList()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Model --[MODEL_COLOR]\u003e LogicManager : ReadOnlyTaskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e Storage : saveTaskList(ReadOnlyTaskList)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Storage --[STORAGE_COLOR]\u003e LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end group"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 29
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/ShowTagCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ":User executes show contact command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "if () then ([contact matches predicate])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    :Contact will be displayed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    : Contact will not be displayed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    : Results shown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 15
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/ShowTagCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "abstract class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "abstract class \"{abstract}\\nShowTagCommand\" as ShowTagCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class ShowTagContactCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class ShowTagEventCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class ShowTagTodoCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Command \u003c|-- ShowTagCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommand \u003c|-- ShowTagContactCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommand \u003c|-- ShowTagEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommand \u003c|-- ShowTagTodoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 18
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/ShowTagCommandParserClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "interface \"Parser\u003cShowTagCommand\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class ShowTagCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\"Parser\u003cShowTagCommand\u003e\" \u003c|.. ShowTagCommandParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/ShowTagCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":ShowTagCommandParser\" as ShowTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \"s:ShowTagContactCommand\" as ShowTagContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Participant \":Storage\" as Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end box"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"show contact t/CS2100Teammate\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ui -[UI_COLOR]\u003e LogicManager : execute(\"show ...\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e AddressBookParser : parseCommand(\"show ...\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "create ShowTagCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "AddressBookParser -[LOGIC_COLOR]\u003e ShowTagCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate ShowTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommandParser -[LOGIC_COLOR]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate ShowTagCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "AddressBookParser -[LOGIC_COLOR]\u003e ShowTagCommandParser : parse(\"contact t/CS2100Teammate\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate ShowTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "create ShowTagContactCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommandParser -[LOGIC_COLOR]\u003e ShowTagContactCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate ShowTagContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagContactCommand -[LOGIC_COLOR]-\u003e ShowTagCommandParser : s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate ShowTagContactCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommandParser -[LOGIC_COLOR]-\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate ShowTagCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "destroy ShowTagCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "AddressBookParser -[LOGIC_COLOR]-\u003e LogicManager : s"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[LOGIC_COLOR]\u003e ShowTagContactCommand : execute()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate ShowTagContactCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagContactCommand -[LOGIC_COLOR]\u003e Model : updateFilteredPersonList(predicate)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate Model MODEL_COLOR"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "Model -[MODEL_COLOR]-\u003e ShowTagContactCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "group ref save file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "LogicManager -[hidden]-\u003e Storage"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "end group"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagContactCommand -[LOGIC_COLOR]\u003e CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "activate CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "CommandResult -[LOGIC_COLOR]-\u003e ShowTagContactCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "CommandResult -[hidden]-\u003e ShowTagContactCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "destroy CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagContactCommand -[LOGIC_COLOR]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate ShowTagContactCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ShowTagContactCommand -[hidden]-\u003e ShowTagCommandParser"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "destroy ShowTagContactCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "ui \u003c-[LOGIC_COLOR]-LogicManager : result"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "user \u003c-[UI_COLOR]-ui : result"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 95
    }
  },
  {
    "path": "docs/diagrams/showTagFunction/TaskTagMatchesKeywordPredicate.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "interface \"Predicate\u003cTask\u003e\" \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "class TaskTagMatchesKeywordPredicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\"Predicate\u003cTask\u003e\" \u003c|.. TaskTagMatchesKeywordPredicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "## Lifebook [![CI Status](https://github.com/AY2021S1-CS2103T-F12-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "**Introduction**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* Lifebook is a project developed for an introductory Software Engineering (SE) module (CS2103T) at the National University of Singapore."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * Lifebook is a desktop application intended for University students to  manage contact details, assignments, projects, module details, etc."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It is morphed from AddressBook Level 3 (AB3)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    * It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* For the detailed user documentation of this project, see [here](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/docs/UserGuide.md)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "* For contributing to the ongoing development of the Lifebook, do check out the [Developer Guide](https://github.com/AY2021S1-CS2103T-F12-4/tp/blob/master/docs/DeveloperGuide.md)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "This project is developed from an se-education.org initiative. If you would like to contribute code to the initiative, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "Libraries used: JavaFX, Jackson, JUnit5"
      }
    ],
    "authorContributionMap": {
      "kevnw": 14,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.storage.TaskListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskListStorage taskListStorage \u003d new JsonTaskListStorage(userPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Optional\u003cReadOnlyTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ReadOnlyTaskList initialTaskData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                logger.info(\"Address Book data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            taskListOptional \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (!taskListOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                logger.info(\"Task List data file not found. Will be starting with a sample TaskList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialTaskData \u003d taskListOptional.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialTaskData \u003d new TaskList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            initialTaskData \u003d new TaskList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new ModelManager(initialAddressData, userPrefs, initialTaskData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            logger.info(\"UserPrefs successfully saved. \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            logger.info(\"UserPrefs successfully saved. \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 2,
      "lerxcl": 1,
      "caleblyx": 28,
      "-": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_EDIT_COMMAND \u003d \"Only edit contact, todo, and event are available\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_FIND_COMMAND \u003d \"Only find contact, todo, and event are available\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_ADD_COMMAND \u003d \"Only add contact, todo, and event are available\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String UNKNOWN_SHOW_TAG_COMMAND \u003d \"Only show contact, todo, and event are available\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String UNKNOWN_DELETE_COMMAND \u003d \"Only delete contact, todo, and event are available\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_TASK_IS_NOT_EVENT \u003d \"Task provided is not an event!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 1,
      "kevnw": 4,
      "luciatirta": 2,
      "caleblyx": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    ObservableList\u003cTask\u003e getDueSoonTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 2,
      "caleblyx": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 5,
      "caleblyx": 7,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an item to lifebook.\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: todo|event|contact\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"add [todo|event|contact] /h to see more.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** The category the command belongs to */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String category) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult(String feedbackToUser, String category) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this(feedbackToUser, false, false, category);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u0026\u0026 category \u003d\u003d otherCommandResult.category;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, category);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 14,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_MARK_TASK_AS_DONE_SUCCESS \u003d \"Task marked as done: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \": Marks the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Task taskToMark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddCommand recurrenceAddCommand \u003d model.markAsDone(taskToMark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (recurrenceAddCommand !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            recurrenceAddCommand.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_TASK_AS_DONE_SUCCESS, taskToMark), \"TASK\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 13,
      "caleblyx": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, \"EXIT\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, \"HELP\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public abstract class LinkCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"link\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a link to your todo or event\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: [meet|doc]\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"link [meet|doc] /h to see more.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all items in events, todos or contacts\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: todo|event|contact|all\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" todo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Show all items whose tag matches the tag keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public abstract class ShowTagCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort items of lifebook.\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"Parameters: contact|task|clear\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + \"sort [contact|task|clear] /h to see more.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommand extends AddCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public AddContactCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), \"CONTACT\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 66,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Adds a event to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a event to the TaskList. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_STARTDATE + \"START DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_STARTTIME + \"START TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_ENDDATE + \"END DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_ENDTIME + \"END TIME\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \" [\" + PREFIX_RECURRING + \"RECURRING]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Attend meeting \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_STARTDATE + \"10-11-2020 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_STARTTIME + \"1200 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_ENDDATE + \"10-11-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_ENDTIME + \"1400 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TAG + \"CS2103T\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String DATE_TIME_USAGE \u003d \"Date and time format should be: startdate/DD-MM-YYYY \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"starttime/HHmm (24-hour) enddate/DD-MM-YYYY endtime/HHmm (24-hour)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDescriptionDateTime()), \"EVENT\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 36,
      "luciatirta": 16,
      "lerxcl": 12,
      "caleblyx": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Adds a todo to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a todo to the TodoList. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \" [\" + PREFIX_RECURRING + \"RECURRING]\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Finish assignment \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_DATE + \"23-11-2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TIME + \"2359 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + PREFIX_TAG + \"CS2100\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String DATE_TIME_USAGE \u003d \"Date and time format should be: date/DD-MM-YYYY time/HHmm (24-hour)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This todo already exists in the TodoList\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Todo toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Todo}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public AddTodoCommand(Todo todo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        toAdd \u003d todo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.addTodo(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.getDueSoonTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getDescriptionDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof AddTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTodoCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 36,
      "luciatirta": 16,
      "lerxcl": 6,
      "caleblyx": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DeleteContactCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public DeleteContactCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete), \"CONTACT\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof DeleteContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteContactCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 52,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed TaskList.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" task 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.deleteTodo(taskToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete), \"TASK\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 36,
      "lerxcl": 8,
      "caleblyx": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/due/DueBeforeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands.due;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Finds all tasks (Todos and Events) that are due before a given date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemsDueBefore\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \": Shows Todos/Events due before a certain date and time.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"DD-MM-YYYY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"HHmm \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"12-12-2020 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"2359\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the list of Todos/Events due before: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueBeforePredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueBeforeCommand(DueBeforePredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, predicate.getDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueBeforeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 predicate.equals(((DueBeforeCommand) other).predicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/due/DueByCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands.due;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueByPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Finds all tasks (Todos and Events) that are due by a given date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueByCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itemsDueBy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \": Shows Todos/Events due by a certain date and time.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"DD-MM-YYYY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"HHmm \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_DATE + \"12-12-2020 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            + PREFIX_TIME + \"2359\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the list of Todos/Events due by: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueByPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueByCommand(DueByPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, predicate.getDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueByCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 predicate.equals(((DueByCommand) other).predicate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Edits the details of an existing person in the Lifebook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditContactCommand extends EditCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EditContactCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), \"CONTACT\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!(other instanceof EditContactCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand e \u003d (EditContactCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 225,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Edits the details of an existing event in the Lifebook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditEventCommand extends EditCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This event already exists in the Lifebook.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final EditEventCommand.EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EditEventCommand(Index index, EditEventCommand.EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventCommand.EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), \"TASK\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                                             EditEventCommand.EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Name updatedName \u003d editEventDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Phone updatedPhone \u003d editEventDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Email updatedEmail \u003d editEventDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Address updatedAddress \u003d editEventDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditEventDescriptor(EditEventCommand.EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!(other instanceof EditEventCommand.EditEventDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditEventCommand.EditEventDescriptor e \u003d (EditEventCommand.EditEventDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 226,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Edits the details of an existing todo in the Lifebook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditTodoCommand extends EditCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Todo: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This todo already exists in the Lifebook.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final EditTodoCommand.EditTodoDescriptor editTodoDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param editTodoDescriptor details to edit the todo with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public EditTodoCommand(Index index, EditTodoCommand.EditTodoDescriptor editTodoDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(editTodoDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.editTodoDescriptor \u003d new EditTodoCommand.EditTodoDescriptor(editTodoDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editTodoDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), \"TASK\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                                             EditTodoCommand.EditTodoDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!(other instanceof EditTodoCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditTodoCommand e \u003d (EditTodoCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 editTodoDescriptor.equals(e.editTodoDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static class EditTodoDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditTodoDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public EditTodoDescriptor(EditTodoCommand.EditTodoDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!(other instanceof EditTodoCommand.EditTodoDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditTodoCommand.EditTodoDescriptor e \u003d (EditTodoCommand.EditTodoDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 226,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindContactCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" contact\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" contact alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public FindContactCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \"CONTACT\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof FindContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 39,
      "luciatirta": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Finds and lists all events in lifebook whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindEventCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" event\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \": Finds all event whose descriptions contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" event meeting\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public FindEventCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()), \"TASK\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 34,
      "luciatirta": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Finds and lists all todos in address book whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindTodoCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" todo\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \": Finds all todos whose descriptions contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" todo assignment\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public FindTodoCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()), \"TASK\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof FindTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTodoCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 34,
      "luciatirta": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/link/LinkCollaborativeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.link;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Add a Collaborative link to a todo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class LinkCollaborativeCommand extends LinkCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add collaborative link to todo. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_URL + \"URL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New collaborative folder link added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final CollaborativeLink collaborativeLink;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public LinkCollaborativeCommand(Index index, CollaborativeLink collaborativeLink) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(collaborativeLink);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d collaborativeLink;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Todo todoToEdit \u003d (Todo) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Todo editedTodo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (todoToEdit.getRecurrence() !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                editedTodo \u003d new Todo(todoToEdit.getDescription(), todoToEdit.getDeadline(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        todoToEdit.getRecurrence(), collaborativeLink, todoToEdit.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                editedTodo \u003d new Todo(todoToEdit.getDescription(), todoToEdit.getDeadline(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    collaborativeLink, todoToEdit.getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            model.setTask(todoToEdit, editedTodo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_IS_NOT_EVENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, collaborativeLink.getDescription()), \"TASK\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                || (other instanceof LinkCollaborativeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 collaborativeLink.equals(((LinkCollaborativeCommand) other).collaborativeLink));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 70,
      "luciatirta": 3,
      "lerxcl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/link/LinkMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.commands.link;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Add a meeting link to an event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class LinkMeetingCommand extends LinkCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add meeting link to event. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_URL + \"URL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + PREFIX_TIME + \"TIME\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final MeetingLink meetingLink;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public LinkMeetingCommand(Index index, MeetingLink meetingLink) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        requireNonNull(meetingLink);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingLink \u003d meetingLink;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Event eventToEdit \u003d (Event) lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Event editedEvent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (eventToEdit.getRecurrence() !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editedEvent \u003d new Event(eventToEdit.getDescription(), eventToEdit.getStartTime(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        eventToEdit.getEndTime(), eventToEdit.getRecurrence(), meetingLink, eventToEdit.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editedEvent \u003d new Event(eventToEdit.getDescription(), eventToEdit.getStartTime(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        eventToEdit.getEndTime(), meetingLink, eventToEdit.getTags());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            model.setTask(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_IS_NOT_EVENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, meetingLink.getDescriptionDateTime()), \"TASK\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                || (other instanceof LinkMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                \u0026\u0026 meetingLink.equals(((LinkMeetingCommand) other).meetingLink));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 71,
      "kevnw": 9,
      "luciatirta": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class ListAllCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed everything\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 24,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListContactCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 22,
      "luciatirta": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskTypeMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListEventCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String EVENT_KEYWORD \u003d \"Event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cString\u003e keyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        keyword.add(EVENT_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredTaskList(new TaskTypeMatchesKeywordsPredicate(keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 21,
      "luciatirta": 1,
      "caleblyx": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskTypeMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListTodoCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String TODO_KEYWORD \u003d \"Todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        List\u003cString\u003e keyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        keyword.add(TODO_KEYWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateFilteredTaskList(new TaskTypeMatchesKeywordsPredicate(keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 20,
      "luciatirta": 1,
      "caleblyx": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/showtag/ShowTagContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands.showtag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ShowTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Show all contacts whose tag matches the tag keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagContactCommand extends ShowTagCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" contact\" + \": Shows contacts whose tags match \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"the specified tag keyword (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Parameters: t/TAG\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" contact t/friends\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final ContactTagMatchesKeywordPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ShowTagContactCommand(ContactTagMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()), \"CONTACT\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof ShowTagContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 predicate.equals(((ShowTagContactCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luciatirta": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/showtag/ShowTagEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands.showtag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ShowTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Show all events whose tag matches the tag keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagEventCommand extends ShowTagCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" event\" + \": Shows events whose tags match \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"the specified tag keyword (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Parameters: t/TAG\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" event t/CS2100\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final TaskTagMatchesKeywordPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ShowTagEventCommand(TaskTagMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()), \"TASK\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof ShowTagEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 predicate.equals(((ShowTagEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luciatirta": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/showtag/ShowTagTodoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands.showtag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ShowTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Show all todos whose tag matches the tag keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagTodoCommand extends ShowTagCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" todo\" + \": Shows todos whose tags match \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"the specified tag keyword (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Parameters: t/TAG\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" todo t/CS2100\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final TaskTagMatchesKeywordPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ShowTagTodoCommand(TaskTagMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()), \"TASK\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof ShowTagTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 predicate.equals(((ShowTagTodoCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luciatirta": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortClearCommand extends SortCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all sorting \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All sorting cleared\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.PersonNameComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortContactCommand extends SortCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts contacts by name \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted contacts by name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Comparator\u003cPerson\u003e comparator \u003d new PersonNameComparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedPersonList(comparator);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"CONTACT\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.TaskDateComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortTaskCommand extends SortCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts tasks by date \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted tasks by date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Comparator\u003cTask\u003e comparator \u003d new TaskDateComparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model.updateSortedTaskList(comparator);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, \"TASK\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_ADD_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.DAY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.MONTH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.WEEK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.model.task.Recurrence.YEAR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (splitArgs[0].trim().split(\" \")[0].trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddContactCommand(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            PREFIX_DATE, PREFIX_TIME, PREFIX_RECURRING, PREFIX_TAG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String date \u003d argMultimap.getValue(PREFIX_DATE).get().trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String time \u003d argMultimap.getValue(PREFIX_TIME).get().trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!checkDateValidity(date) || !checkTimeValidity(time)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        AddTodoCommand.DATE_TIME_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String deadline \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Todo todo;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_RECURRING)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String recurrenceInput \u003d argMultimap.getValue(PREFIX_RECURRING).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (checkChronoUnitValidity(recurrenceTimePeriod)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            \u0026\u0026 checkRecurrenceValueValidity(recurrenceValue)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        Recurrence recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        todo \u003d new Todo(description, deadline, recurrence, tagList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                todo \u003d new Todo(description, deadline, tagList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddTodoCommand(todo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (splitArgs[0].trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_STARTDATE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME, PREFIX_RECURRING, PREFIX_TAG);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_STARTDATE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String stDate \u003d argMultimap.getValue(PREFIX_STARTDATE).get().trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String stTime \u003d argMultimap.getValue(PREFIX_STARTTIME).get().trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String endDate \u003d argMultimap.getValue(PREFIX_ENDDATE).get().trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String endTime \u003d argMultimap.getValue(PREFIX_ENDTIME).get().trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!checkDateValidity(stDate) || !checkTimeValidity(stTime)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    || !checkDateValidity(endDate) || !checkTimeValidity(endTime)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        AddEventCommand.DATE_TIME_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String stDateTime \u003d stDate + \" \" + stTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            String endDateTime \u003d endDate + \" \" + endTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            MeetingLink meetingLink \u003d new MeetingLink();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_RECURRING)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String recurrenceInput \u003d argMultimap.getValue(PREFIX_RECURRING).get();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (checkChronoUnitValidity(recurrenceTimePeriod)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            \u0026\u0026 checkRecurrenceValueValidity(recurrenceValue)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        Recurrence recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        event \u003d new Event(description, stDateTime, endDateTime, recurrence, tagList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                event \u003d new Event(description, stDateTime, endDateTime, meetingLink, tagList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new AddEventCommand(event);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException(UNKNOWN_ADD_COMMAND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns true if the recurrence unit is day/week/month/year."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrenceTimePeriod input by user"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static boolean checkChronoUnitValidity(String recurrenceTimePeriod) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return recurrenceTimePeriod.equals(DAY) || recurrenceTimePeriod.equals(WEEK)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || recurrenceTimePeriod.equals(MONTH) || recurrenceTimePeriod.equals(YEAR);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns true if the recurrence value is \u003e 0."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param value input by user"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static boolean checkRecurrenceValueValidity(Integer value) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return value \u003e 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns true if date is valid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param date input by user"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static boolean checkDateValidity(String date) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String strDay \u003d dateSplit[0];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String strMonth \u003d dateSplit[1];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String strYear \u003d dateSplit[2];"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer day \u003d Integer.parseInt(strDay);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer month \u003d Integer.parseInt(strMonth);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer year \u003d Integer.parseInt(strYear);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean checkLength \u003d strDay.length() \u003d\u003d 2 \u0026\u0026 strMonth.length() \u003d\u003d 2 \u0026\u0026 strYear.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean checkDay \u003d day \u003c\u003d 31 \u0026\u0026 day \u003e 0;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean checkMonth \u003d month \u003e 0 \u0026\u0026 month \u003c\u003d 12;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean checkYear \u003d year \u003e 1970;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return checkLength \u0026\u0026 checkDay \u0026\u0026 checkMonth \u0026\u0026 checkYear;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Returns true if time is valid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param time input by user"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static boolean checkTimeValidity(String time) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean checkLength \u003d time.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (checkLength) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Integer hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Integer minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            boolean checkHour \u003d hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 23;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            boolean checkMinute \u003d minute \u003e\u003d 0 \u0026\u0026 minute \u003c\u003d 59;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return checkHour \u0026\u0026 checkMinute;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 4,
      "kevnw": 15,
      "luciatirta": 8,
      "lerxcl": 117,
      "caleblyx": 36,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.ShowTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueByCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        case EditContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        case DeleteContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        case FindContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        case LinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return new LinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        case DueBeforeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new DueBeforeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        case DueByCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new DueByCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        case ShowTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new ShowTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 4,
      "kevnw": 7,
      "luciatirta": 2,
      "lerxcl": 7,
      "caleblyx": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static final Prefix PREFIX_URL \u003d new Prefix(\"url/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"startdate/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"starttime/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"enddate/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"endtime/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Prefix PREFIX_RECURRING \u003d new Prefix(\"recurring/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "lerxcl": 1,
      "caleblyx": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_DELETE_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(splitArgs[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (splitArgs[0].trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new DeleteContactCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (splitArgs[0].trim().equals(\"task\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(UNKNOWN_DELETE_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (args.contains(\"task\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 10,
      "lerxcl": 8,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DueBeforeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Parses input arguments and creates a new DueBeforeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeCommandParser implements Parser\u003cDueBeforeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DueBeforeCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * and returns a DueBeforeCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueBeforeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String date \u003d splitArgs[0].split(\"/\")[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // if date not in DD-MM-YYYY format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (date.length() \u003c 10) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String time \u003d splitArgs[1].split(\"/\")[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // if time not in HHmm format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (time.length() \u003c 4) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String deadline \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new DueBeforeCommand(new DueBeforePredicate(deadline));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DueByCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueByCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueByPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Parses input arguments and creates a new DueByCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueByCommandParser implements Parser\u003cDueByCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DueByCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * and returns a DueByCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueByCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String date \u003d splitArgs[0].split(\"/\")[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // if date not in DD-MM-YYYY format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (date.length() \u003c 10) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String time \u003d splitArgs[1].split(\"/\")[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // if time not in HHmm format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (time.length() \u003c 4) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String deadline \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new DueByCommand(new DueByPredicate(deadline));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_EDIT_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditTodoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditTodoCommand.EditTodoDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (splitArgs[0].equals(\"contact\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        EditContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_NAME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new EditContactCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_NAME,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditTodoDescriptor editTodoDescriptor \u003d new EditTodoDescriptor();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editTodoDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTodoDescriptor::setTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!editTodoDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new EditTodoCommand(index, editTodoDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_NAME,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        EditContactCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                editEventDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException(UNKNOWN_EDIT_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 89,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_FIND_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (splitArgs[0].equals(\"contact\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String trimmedArgs \u003d splitArgs[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new FindContactCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String trimmedArgs \u003d splitArgs[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new FindTodoCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String trimmedArgs \u003d splitArgs[1].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new FindEventCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException(UNKNOWN_FIND_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 32,
      "luciatirta": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LinkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.link.LinkCollaborativeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.link.LinkMeetingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class LinkCommandParser implements Parser\u003cLinkCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LinkCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * and returns an LinkCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public LinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (splitArgs[0].trim().split(\" \")[0].trim().equals(\"meeting\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                            PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        LinkMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String date \u003d argMultimap.getValue(PREFIX_DATE).get().trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String time \u003d argMultimap.getValue(PREFIX_TIME).get().trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String url \u003d argMultimap.getValue(PREFIX_URL).get().trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String meetingTime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get().trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ParserUtil.validateLink(url);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            MeetingLink meetingLink \u003d ParserUtil.parseMeetingLink(description, url, meetingTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return new LinkMeetingCommand(index, meetingLink);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (splitArgs[0].trim().split(\" \")[0].trim().equals(\"doc\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_URL, PREFIX_INDEX)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        LinkCollaborativeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String url \u003d argMultimap.getValue(PREFIX_URL).get().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get().trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ParserUtil.validateLink(url);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CollaborativeLink collaborativeLink \u003d ParserUtil.parseCollaborativeLink(description, url);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new LinkCollaborativeCommand(index, collaborativeLink);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException(LinkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 62,
      "kevnw": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.logic.commands.list.ListAllCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (args.trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListContactCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (args.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListTodoCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (args.trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (args.trim().equals(\"all\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return new ListAllCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 9,
      "kevnw": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.Link;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Validates a {@code String url} an returns a {@Code Boolean}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @throws ParseException if the given {@code String url} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static boolean validateLink(String url) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        boolean isValid \u003d Link.isValidUrl(trimmedUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new ParseException((Link.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a Collaborative Link that is guaranteed to have a valid URL."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description The description of the Collaborative Link"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url The url to the Collaborative Folder"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return A Collaborative Link object with description and url"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static CollaborativeLink parseCollaborativeLink(String description, String url) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new CollaborativeLink(description, trimmedUrl);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a Meeting Link that is guaranteed to have a valid URL."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description The description of the Meeting Link"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url The url to the Meeting"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param meetingTime The meeting time"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return A Meeting Link object with description, url, and meeting time"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static MeetingLink parseMeetingLink(String description, String url, String meetingTime) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        requireNonNull(description, meetingTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new MeetingLink(description, trimmedUrl, meetingTime);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 46,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.UNKNOWN_SHOW_TAG_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.ShowTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.showtag.ShowTagContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.showtag.ShowTagEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.showtag.ShowTagTodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Parses input arguments and creates a new ShowTagCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagCommandParser implements Parser\u003cShowTagCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowTagCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * and returns a ShowTagCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ShowTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert args !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] splitArgs \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (splitArgs[0].equals(\"contact\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (keywords.length !\u003d 1 || keywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new ShowTagContactCommand(new ContactTagMatchesKeywordPredicate(keywords[0]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else if (splitArgs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (keywords.length !\u003d 1 || keywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new ShowTagTodoCommand(new TaskTagMatchesKeywordPredicate(keywords[0]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else if (splitArgs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (splitArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + splitArgs[1], PREFIX_TAG);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (keywords.length !\u003d 1 || keywords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    ShowTagEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return new ShowTagEventCommand(new TaskTagMatchesKeywordPredicate(keywords[0]));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new ParseException(UNKNOWN_SHOW_TAG_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.commands.sort.SortTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (args.trim().equals(\"task\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortTaskCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (args.trim().equals(\"contact\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortContactCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (args.trim().equals(\"clear\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return new SortClearCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 3,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void addTodo(Todo todo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Replaces the given Task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing Task in the life book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void deleteTodo(Task task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void deleteEvent(Task task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    ObservableList\u003cTask\u003e getDueSoonTaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    AddCommand markAsDone(Task target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 7,
      "lerxcl": 6,
      "caleblyx": 24,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.time.temporal.ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final SortedList\u003cPerson\u003e sortedPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final SortedList\u003cTask\u003e sortedTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final FilteredList\u003cTask\u003e dueSoonTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedPersons \u003d new SortedList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(sortedPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedTasks \u003d new SortedList\u003c\u003e(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(sortedTasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dueSoonTasks \u003d new FilteredList\u003c\u003e(sortedTasks, task -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDateTime currentDateTimePlusOneWeek \u003d LocalDateTime.now().plus(1, WEEKS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDateTime deadline \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                deadline \u003d task.getEnd();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            assert deadline !\u003d null : \"Task\u0027s deadline is not defined properly!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return deadline.isBefore(currentDateTimePlusOneWeek);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedPersons.setComparator(personComparator);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.addTask(event);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.removeTask(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskList.removeTask(task);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.taskList.hasTask(task);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public AddCommand markAsDone(Task target) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return taskList.markAsDone(target);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return dueSoonTasks;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        sortedTasks.setComparator(taskComparator);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 24,
      "caleblyx": 69,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public interface ReadOnlyTaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskList implements ReadOnlyTaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskList(ReadOnlyTaskList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void resetData(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 tasks.equals(((TaskList) other).tasks));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public AddCommand markAsDone(Task target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.tasks.markAsDone(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 3,
      "caleblyx": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Path taskListFilePath \u003d Paths.get(\"data\", \"tasklist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskListFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTaskListFilePath (Path taskListFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskListFilePath \u003d taskListFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 8,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactTagMatchesKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the tag keyword given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ContactTagMatchesKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword tag to contact\u0027s tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keyword the keyword for the tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ContactTagMatchesKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // make sure keyword is only one word"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert !keyword.contains(\"\\\\s+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return person.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .anyMatch(keyword -\u003e this.keyword.trim().toLowerCase().equals(keyword.tagName.trim().toLowerCase()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof ContactTagMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 keyword.equals(((ContactTagMatchesKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonNameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class PersonNameComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int compare(Person o1, Person o2) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return o1.getName().fullName.compareTo(o2.getName().fullName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/CollaborativeLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class CollaborativeLink extends Link {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CollaborativeLink() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this(\"No collaborative link\", \"-\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public CollaborativeLink(String description, String url) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, url);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a String representation of the Collaborative Link."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * This representation includes the description and url in the format of outputFormatter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return a String representation of the Collaborative Link."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return getDescription() + \" \" + getUrl();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a boolean value indicating if the Collaborative Link is equal to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * another object by determining if descriptions and url parameters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param o an object that is compared to the Collaborative Link to determine if both are equal"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return true or false if the Collaborative Link is equal or not equal to the object respectively."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (o instanceof CollaborativeLink) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            CollaborativeLink link \u003d (CollaborativeLink) o;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            boolean isEqual \u003d this.getDescription().equals(link.getDescription())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 this.getUrl().equals(link.getUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return isEqual;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueBeforePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Checks for every task (To-do and event) that is due before the given date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforePredicate extends DuePredicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueBeforePredicate(String strDeadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(strDeadline);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return task.getLocalDateTime().isBefore(deadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueBeforePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 deadline.equals(((DueBeforePredicate) other).deadline)); // state check"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueByPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Checks for every task (To-do and event) that is due by the given date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueByPredicate extends DuePredicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DueByPredicate(String strDeadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(strDeadline);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return task.getLocalDateTime().isEqual(deadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueByPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 deadline.equals(((DueByPredicate) other).deadline)); // state check"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DuePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public abstract class DuePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected final LocalDateTime deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final String strDeadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts deadline into a LocalDateTime type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param strDeadline string format of date + time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DuePredicate(String strDeadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.strDeadline \u003d strDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        LocalDateTime deadline \u003d LocalDateTime.parse(strDeadline, dateTimeFormat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.strDeadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public abstract boolean test(Task task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                || (other instanceof DueBeforePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u0026\u0026 deadline.equals(((DueBeforePredicate) other).deadline)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Encapsulates a task to be completed over a span of time (i.e period)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The format of inputted dates and times that the class can accept. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The format of outputted dates and times by the class. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**Index of the end of the first provided date and time.*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final int END_OF_FIRST_DATE_TIME_INDEX \u003d 15;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**Index of the start of the second provided date and time.*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final int START_OF_SECOND_DATE_TIME_INDEX \u003d 19;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The date and time at which the event begins. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**The date and time at which the event ends. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**The meeting link url. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private MeetingLink meetingLink;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The recurrence (if any)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event (String description, String start, String end, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Constructs an event that has not been completed with a brief"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * description and period of time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param meetingLink the meeting link of event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event (String description, String start, String end, MeetingLink meetingLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingLink \u003d meetingLink;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Constructs an event that may or may not be completed with a brief"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * description and period of time and a meeting link."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param meetingLink the meeting link of event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event (boolean isDone, String description, LocalDateTime start,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                  LocalDateTime end, MeetingLink meetingLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingLink \u003d meetingLink;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(boolean isDone, String description, String start, String end, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime start, LocalDateTime end, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime start,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                 LocalDateTime end, Recurrence recurrence, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Event(String description, LocalDateTime start,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                 LocalDateTime end, Recurrence recurrence, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param link        the Meeting Link of event."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, String start, String end, Recurrence recurrence, MeetingLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.meetingLink \u003d link;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, period of time, and a meeting link"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the event has been completed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param start       the starting date and time of event."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param end         the ending date and time of event."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime start,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                 LocalDateTime end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param start       the starting date and time of event (String)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param end         the ending date and time of event (String)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, String start, String end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs an event which may or may not be completed"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and period of time."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the event."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param start       the starting date and time of event (LocalDateTime)."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param end         the ending date and time of event (LocalDateTime)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence  the recurrence of event."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the event."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, LocalDateTime start, LocalDateTime end, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert start !\u003d null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert end !\u003d null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the String representation of the period of time which the event occurred over. in the"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * form of -start- to -end-."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Dates and times are in the format of outputFormatter."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the String representation of the period of which the event occurred over."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.start.format(OUTPUT_DATE_TIME_FORMAT).toString() + \" to \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                + this.end.format(OUTPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns the String representation of the start time which the event occurred over. In the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * form of -start-."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Dates and times are in the format of inputFormatter."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return the String representation of the period of which the event starts."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.start.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns the String representation of the start time which the event occurred over. In the"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * form of -end-."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Dates and times are in the format of inputFormatter."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return the String representation of the period of which the event ends."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.end.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Reschedules the period of an event to be of a provided period."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param newPeriod the period that the event should be rescheduled to."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void reschedule(String newPeriod) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d LocalDateTime.parse(newPeriod.substring(0, END_OF_FIRST_DATE_TIME_INDEX), INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d LocalDateTime.parse(newPeriod.substring(START_OF_SECOND_DATE_TIME_INDEX), INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public AddCommand markAsDone() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (this.recurrence !\u003d null) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDateTime newStartDateTime \u003d this.getStart()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    .plus(this.recurrence.getValue(), this.recurrence.getChronoUnit());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDateTime newEndDateTime \u003d this.getEnd()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    .plus(this.recurrence.getValue(), this.recurrence.getChronoUnit());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            AddCommand command;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (this.meetingLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                command \u003d new AddEventCommand("
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        new Event(description, newStartDateTime, newEndDateTime, recurrence, tags));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                MeetingLink currentMeeting \u003d this.getMeetingLink();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                LocalDateTime newTiming \u003d currentMeeting.getLocalDateTime()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        .plus(this.recurrence.getValue(), this.recurrence.getChronoUnit());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String description \u003d currentMeeting.getDescription();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                int positionOfOldTiming \u003d description.indexOf(\"(on: \");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                description \u003d description.substring(0, positionOfOldTiming - 1);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                MeetingLink newMeeting \u003d new MeetingLink(description, currentMeeting.getUrl(), newTiming);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                command \u003d new AddEventCommand("
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        new Event(description, newStartDateTime, newEndDateTime,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            recurrence, newMeeting, tags));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the event, which includes the status icon, description, and period."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the event."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription() + \" (at: \" + getPeriod() + \") \" + getTagsToString();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescriptionDateTime() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description + \" (at: \" + getPeriod() + \")\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a boolean value indicating if the event is equal to another object by"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * determining if isDone, start, end, and description parameters are equal."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true or false if the event is equal or not equal to the object."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Event) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Event task \u003d (Event) o;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            boolean isEqualEvents \u003d this.description.equals(task.description) \u0026\u0026 this.start.equals(task.start)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    \u0026\u0026 this.end.equals(task.end) \u0026\u0026 this.isDone \u003d\u003d task.isDone;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return isEqualEvents;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"E | 1 | \" + this.getDescription() + \" | \" + this.start.format(INPUT_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    + \" to \" + this.end.format(INPUT_DATE_TIME_FORMAT) + \" | \" + this.getTagsToString();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return \"E | 0 | \" + this.getDescription() + \" | \" + this.start.format(INPUT_DATE_TIME_FORMAT)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    + \" to \" + this.end.format(INPUT_DATE_TIME_FORMAT) + \" | \" + this.getTagsToString();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.getPeriod();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public MeetingLink getMeetingLink() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.meetingLink;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isTodo() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEvent() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.start;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Optional\u003cLink\u003e getLink() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return Optional.ofNullable(this.meetingLink);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return start.format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return end.format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return \"Event\";"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence getRecurrence() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.recurrence;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "urieltan": 60,
      "kevnw": 54,
      "luciatirta": 41,
      "lerxcl": 102,
      "caleblyx": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Link.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class Link {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Link must be in URL Format.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            \"^(https?|ftp|file)://[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /** A brief description of the link. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /** The url for the link */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a link with description and url."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the link"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url the url of the link"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Link(String description, String url) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        checkArgument(isValidUrl(url), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static boolean isValidUrl(String url) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return url.matches(VALIDATION_REGEX) || url.equals(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns the description of the link as a string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return the description of the link."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns the url of the link as a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return the url of the link."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.url;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a boolean value indicating if the link is equal to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * another object by determining if descriptions and url"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param o an object that is compared to the link to determine if both are equal"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return true or false if the object is equal or not equal to the link respectively."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (o instanceof Link) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Link link \u003d (Link) o;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            boolean isEqualLink \u003d this.description.equals(link.description) \u0026\u0026 this.url \u003d\u003d link.url;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return isEqualLink;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 2,
      "kevnw": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/MeetingLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class MeetingLink extends Link {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * The deadline of the task to be completed by."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private LocalDateTime meetingTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLink() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this(\"No meeting link\", \"-\", \"10-10-2020 2000\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a Meeting Link"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description, url, and meeting time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the meeting link."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param url    a String in a URL format which specifies the link."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param meetingTime a String which describes the meeting time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public MeetingLink(String description, String url, String meetingTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, url);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingTime \u003d LocalDateTime.parse(meetingTime, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a updated Meeting Link for recurring events"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with the description, url, and new meeting time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the meeting link."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param url    a String in a URL format which specifies the link."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param newTiming a LocalDateTime of the new meeting time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public MeetingLink(String description, String url, LocalDateTime newTiming) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(description, url);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.meetingTime \u003d newTiming;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Changes meeting time of this meeting."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param meetingTime the meeting Time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void snooze(String meetingTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.meetingTime \u003d LocalDateTime.parse(meetingTime, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns a String representation of the meeting time with the format of outputFormatter."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return a String representation of the meeting time with the format of outputFormatter."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getMeetingTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.meetingTime.format(OUTPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Returns a String representation of the Meeting link."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * This representation includes the description, meeting time, and url in the format of outputFormatter."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return a String representation of the Meeting Link."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return getDescription() + \" \" + getMeetingTime() + \"\\n\" + getUrl();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns a boolean value indicating if the task is equal to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * another object by determining if descriptions, deadline, and isDone parameters"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return true or false if the task is equal or not equal to the object respectively."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else if (o instanceof MeetingLink) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            MeetingLink link \u003d (MeetingLink) o;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            boolean isEqual \u003d this.getDescription().equals(link.getDescription())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    \u0026\u0026 this.meetingTime.equals(link.meetingTime) \u0026\u0026 this.getUrl().equals(link.getUrl());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return isEqual;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String saveTimeFormat() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.meetingTime.format(INPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return this.meetingTime;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (super.getDescription().equals(\"No meeting link\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return super.getDescription();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return this.getDescriptionDateTime();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getDescriptionDateTime() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return super.getDescription() + \" (on: \" + getMeetingTime() + \")\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 89,
      "kevnw": 25,
      "lerxcl": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Recurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Contains recurring properties of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Recurrence {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String DAY \u003d \"day\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final String YEAR \u003d \"year\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final ChronoUnit chronoUnit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts the unit from a String to a ChronoUnit type, which is used later"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * for LocalDateTime operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param value magnitude of the recurrence"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param timePeriod unit of the magnitude (day/week/month/year)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence(Integer value, String timePeriod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assert this.value \u003e 0 : \"recurrence should not be 0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (timePeriod.equals(DAY)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (timePeriod.equals(WEEK)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.WEEKS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (timePeriod.equals(MONTH)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (timePeriod.equals(YEAR)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d ChronoUnit.YEARS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.chronoUnit \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Integer getValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ChronoUnit getChronoUnit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.chronoUnit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String rawChronoUnitToString \u003d this.chronoUnit.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String unit \u003d rawChronoUnitToString.substring(0, rawChronoUnitToString.length() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        unit +\u003d \"(s)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /** A brief description of the task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /** Tracks the completion of the task */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /** Optional link for documents and online meetings */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    protected Link link;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** Optional tag of the task**/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected Recurrence recurrence;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task that has not been completed with a description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task(String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task, which may or may not have been completed, with a description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone indicates if the task has been completed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task(boolean isDone, String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the status icon of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns tick symbol when task is indicated as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns X symbol when task is not indicated as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the status icon of the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the description of the task as a string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Indicates that the task has been completed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return AddCommand if the task is recurring."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public AddCommand markAsDone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getTagsToString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a boolean value indicating if the task is equal to"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * another object by determining if descriptions and isDone parameters"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true or false if the object is equal or not equal to the task respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Task) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            boolean isEqualTask \u003d this.description.equals(task.description) \u0026\u0026 this.isDone \u003d\u003d task.isDone;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return isEqualTask;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isSameTask(Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.equals(task);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /** Tracks if there is a link present in this task */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public boolean hasLink() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (this.link !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of task, which includes the status icon"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * and description."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + getDescription() + \" \" + getTagsToString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"T | 1 | \" + this.getDescription() + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"T | 0 | \" + this.getDescription() + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract LocalDateTime getDeadline();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract LocalDateTime getStart();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract LocalDateTime getEnd();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract String getDateTime();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public abstract Optional\u003cLink\u003e getLink();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public abstract LocalDateTime getLocalDateTime();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract boolean isTodo();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract boolean isEvent();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public abstract Recurrence getRecurrence();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 13,
      "kevnw": 2,
      "luciatirta": 29,
      "lerxcl": 12,
      "caleblyx": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskDateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (o1.equals(o2)) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o1.getStart().compareTo(o2.getStart()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return o1.getStart().compareTo(o2.getStart());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskTagMatchesKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Tag} matches the tag keyword given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class TaskTagMatchesKeywordPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Construct a predicate to match keyword tag to task\u0027s tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param keyword the keyword for the tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TaskTagMatchesKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // make sure keyword is only one word"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assert !keyword.contains(\"\\\\s+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return task.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .anyMatch(keyword -\u003e this.keyword.trim().toLowerCase().equals(keyword.tagName.trim().toLowerCase()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            || (other instanceof TaskTagMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u0026\u0026 keyword.equals(((TaskTagMatchesKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskTypeMatchesKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskTypeMatchesKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskTypeMatchesKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getType(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof TaskTypeMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskTypeMatchesKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Todo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The deadline of the task to be completed by."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**The collaborative link url. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private CollaborativeLink collaborativeLink;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The recurrence (if any)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, String deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param collaborativeLink the collaborative link of todo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, String deadline, CollaborativeLink collaborativeLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d collaborativeLink;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param collaborativeLink the collaborative link of todo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, LocalDateTime deadline, CollaborativeLink collaborativeLink, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d collaborativeLink;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, String deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a LocalDateTime in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, LocalDateTime deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task that has not been completed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a LocalDateTime in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param link        the Collaborative Link of todo."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                Recurrence recurrence, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, String deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a String in a specific format (inputFormatter) which specifies a date."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline, Recurrence recurrence, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param deadline    a date and time specifies a deadline."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone      indicates if the deadline has been completed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deadline    a date and time specifies a deadline."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param link        a Collaborative Link for the todo."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(boolean isDone, String description, LocalDateTime deadline, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(isDone, description, tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a task, which may or may not have been completed,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * with a brief description and deadline for the task to be completed by."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description a brief description of the deadline."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param deadline    a date and time specifies a deadline."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param recurrence the recurrence of todo."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param link        a Collaborative Link for the todo."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tags        a set of tags attached to the todo."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, LocalDateTime deadline,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                Recurrence recurrence, CollaborativeLink link, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, tags);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assert deadline !\u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.collaborativeLink \u003d link;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Changes the deadline of the task to a provided new deadline."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param newDeadline the deadline of the task to be changed to"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void snooze(String newDeadline) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(newDeadline, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a String representation of the deadline with the format of outputFormatter."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return a String representation of the deadline with the format of outputFormatter."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String deadlineToString() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.deadline.format(OUTPUT_DATE_TIME_FORMAT).toString();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public AddCommand markAsDone() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (this.recurrence !\u003d null) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDateTime newDateTime \u003d this.getLocalDateTime()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    .plus(this.recurrence.getValue(), this.recurrence.getChronoUnit());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            AddTodoCommand command;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (this.getLink().isEmpty()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                command \u003d new AddTodoCommand(new Todo(description, newDateTime, recurrence, tags));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                command \u003d new AddTodoCommand(new Todo(description, newDateTime, recurrence, collaborativeLink, tags));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * This representation includes the status icon, description, and deadline in the format of outputFormatter."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return a String representation of the task."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \" (by: \" + deadlineToString() + \") \" + getTagsToString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns a boolean value indicating if the task is equal to"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * another object by determining if descriptions, deadline, and isDone parameters"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * are equal."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param o an object that is compared to the task to determine if both are equal"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return true or false if the task is equal or not equal to the object respectively."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else if (o instanceof Todo) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Todo task \u003d (Todo) o;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            boolean isEqualDeadlines \u003d this.description.equals(task.description)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    \u0026\u0026 this.deadline.equals(task.deadline) \u0026\u0026 this.isDone \u003d\u003d task.isDone;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return isEqualDeadlines;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the string representation of the task in a format to be inputted into a text file for data storage."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @return the string representation of the task to be saved in a text file."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"D | 1 | \" + this.getDescription() + \" | \""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + this.deadline.format(INPUT_DATE_TIME_FORMAT).toString()"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"D | 0 | \" + this.getDescription() + \" | \" + this.deadline.format(INPUT_DATE_TIME_FORMAT).toString()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \" | \" + getTagsToString();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return deadlineToString();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isTodo() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean isEvent() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getDescriptionDateTime() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.description + \" (by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return \"Todo\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Optional\u003cLink\u003e getLink() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return Optional.ofNullable(this.collaborativeLink);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence getRecurrence() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.recurrence;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 3,
      "kevnw": 62,
      "luciatirta": 46,
      "lerxcl": 86,
      "caleblyx": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!target.isSameTask(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the person {@code target} in the list with an identical task marked as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @returns AddCommand if task is recurring."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public AddCommand markAsDone(Task target) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddCommand command \u003d target.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.set(index, target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setPersons(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 7,
      "caleblyx": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new Todo(\"Finish assignment\", \"19-10-2020 2359\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new Todo(\"Finish tutorial worksheet\", \"16-10-2020 2359\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new Todo(\"Complete next CS2103T team project iteration\", \"22-10-2020 2359\", getTagSet(\"CS2103T\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new Event(\"Attend group meeting\", \"20-10-2020 1000\", \"20-10-2020 1200\", new MeetingLink(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                    getTagSet(\"CS2103T\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new Event(\"Attend computer science lecture\", \"17-10-2020 1200\", \"17-10-2020 1300\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            new Event(\"Meet friends for lunch\", \"17-10-2020 1300\", \"17-10-2020 1400\", getTagSet(\"Friends\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new Todo(\"Finish assignment\", \"19-05-2020 2359\", getTagSet(\"CS2100\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new Event(\"Attend group meeting\", \"20-05-2020 1000\", \"20-05-2020 1200\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                new MeetingLink(), getTagSet(\"CS2103T\"))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static ReadOnlyTaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList sampleTl \u003d new TaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        for (Task sampleTask: getSampleTasks()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            sampleTl.addTask(sampleTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return sampleTl;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 1,
      "luciatirta": 3,
      "caleblyx": 24,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.MeetingLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedEvent extends JsonAdaptedTask {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final LocalDateTime end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkDesc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkUrl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Recurrence recurrence;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given Event details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"description\") String description, @JsonProperty(\"isDone\") Boolean isDone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                           @JsonProperty(\"start\") LocalDateTime start, @JsonProperty(\"end\") LocalDateTime end,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            @JsonProperty(\"linkDesc\") String linkDesc, @JsonProperty(\"linkUrl\") String url,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                            @JsonProperty(\"linkTime\") String linkTime,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            @JsonProperty(\"recurrence\") JsonAdaptedRecurrence recurrence,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkDesc \u003d linkDesc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkUrl \u003d url;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkTime \u003d linkTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (recurrence !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d recurrence.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedEvent(Task source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        start \u003d source.getStart();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        end \u003d source.getEnd();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (source.getLink().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d source.getLink().get().getDescription().split(\" \", 2)[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d source.getLink().get().getUrl();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            linkTime \u003d ((Event) source).getMeetingLink().saveTimeFormat();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            linkTime \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d source.getRecurrence();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isDone\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final boolean modelIsDone \u003d isDone;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (start \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"start date and time\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final LocalDateTime modelStart \u003d start;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"end date and time\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final LocalDateTime modelEnd \u003d end;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final Recurrence modelRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (linkUrl \u003d\u003d null || linkDesc \u003d\u003d null || linkTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Event(modelIsDone, modelDescription, modelStart, modelEnd, modelTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Event(modelIsDone, modelDescription, modelStart, modelEnd, modelRecurrence, modelTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(modelIsDone, modelDescription, modelStart,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        modelEnd, new MeetingLink(linkDesc, linkUrl, linkTime), modelTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Event(modelIsDone, modelDescription,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        modelStart, modelEnd, modelRecurrence, new MeetingLink(linkDesc, linkUrl, linkTime), modelTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "urieltan": 7,
      "kevnw": 21,
      "luciatirta": 25,
      "lerxcl": 13,
      "caleblyx": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecurrence.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class JsonAdaptedRecurrence {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Integer value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final String unit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructs a {code JsonAdaptedRecurrence} with the given {@code recurrence details}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public JsonAdaptedRecurrence(@JsonProperty(\"value\") Integer value, @JsonProperty(\"chronoUnit\") String unit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts a given {@code Recurrence} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public JsonAdaptedRecurrence(Recurrence source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        value \u003d source.getValue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        unit \u003d source.getChronoUnit().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Recurrence} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Recurrence toModelType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final Integer modelValue \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final String modelUnit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (unit.equals(\"DAYS\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"day\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (unit.equals(\"WEEKS\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"week\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (unit.equals(\"MONTHS\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"month\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (unit.equals(\"YEARS\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"year\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            modelUnit \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new Recurrence(modelValue, modelUnit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonIgnoreProperties(ignoreUnknown \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonTypeInfo(use \u003d NAME, include \u003d PROPERTY)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedTodo.class, name \u003d \"JsonAdaptedTodo\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedEvent.class, name \u003d \"JsonAdaptedEvent\") }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public abstract class JsonAdaptedTask {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    protected final Boolean isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given Task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\") String description, @JsonProperty(\"isDone\") Boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        isDone \u003d source.getStatus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public abstract Task toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTodo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.model.task.CollaborativeLink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Jackson-friendly version of {@link Todo}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonAdaptedTodo extends JsonAdaptedTask {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final LocalDateTime deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkDesc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private final String linkUrl;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final Recurrence recurrence;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonAdaptedTodo} with the given Todo details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTodo(@JsonProperty(\"description\") String description, @JsonProperty(\"isDone\") Boolean isDone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                           @JsonProperty(\"deadline\") LocalDateTime deadline, @JsonProperty(\"linkDesc\") String linkDesc,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                           @JsonProperty(\"linkUrl\") String url,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           @JsonProperty(\"recurrence\") JsonAdaptedRecurrence recurrence,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkDesc \u003d linkDesc;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.linkUrl \u003d url;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (recurrence !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d recurrence.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.recurrence \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code Todo} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonAdaptedTodo(Task source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        deadline \u003d source.getDeadline();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (source.getLink().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d source.getLink().get().getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d source.getLink().get().getUrl();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDesc \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkUrl \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d source.getRecurrence();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (isDone \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isDone\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final boolean modelIsDone \u003d isDone;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"deadline\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        final LocalDateTime modelDeadline \u003d deadline;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final Recurrence modelRecurrence \u003d recurrence;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (linkUrl \u003d\u003d \"\" || linkDesc \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline, modelTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline, modelRecurrence, modelTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (modelRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    new CollaborativeLink(linkDesc, linkUrl), modelTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return new Todo(modelIsDone, modelDescription, modelDeadline,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        modelRecurrence, new CollaborativeLink(linkDesc, linkUrl), modelTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 7,
      "kevnw": 14,
      "luciatirta": 25,
      "lerxcl": 12,
      "caleblyx": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * An Immutable TaskList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "@JsonRootName(value \u003d \"tasklist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskList} with the given tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003c? extends JsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonSerializableTaskList(ReadOnlyTaskList source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(x -\u003e x.isTodo()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                ? new JsonAdaptedTodo(x) : new JsonAdaptedEvent(x)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Converts this Task List into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (taskList.hasTask(task)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * A class to access TaskList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class JsonTaskListStorage implements TaskListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public JsonTaskListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return readTaskList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Similar to {@link #readTaskList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonTaskList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!jsonTaskList.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return Optional.of(jsonTaskList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyTaskList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, TaskListStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private TaskListStorage taskListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                          TaskListStorage taskListStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.taskListStorage \u003d taskListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskListStorage.getTaskListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return readTaskList(taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return taskListStorage.readTaskList(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        saveTaskList(taskList, taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListStorage.saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 27,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public interface TaskListStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @see #getTaskListFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskList} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @see #saveTaskList(ReadOnlyTaskList)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "caleblyx": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f12-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TaskListPanel dueSoonTaskListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TabPane featuresPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private StackPane dueSoonTasksPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dueSoonTaskListPanel \u003d new TaskListPanel(logic.getDueSoonTaskList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dueSoonTasksPanelPlaceholder.getChildren().add(dueSoonTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Navigate features tab to show the correct tab"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param category the category the command belongs to"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private void handleTabNavigation(String category) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (category.equals(\"CONTACT\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            featuresPanelPlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else if (category.equals(\"TASK\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            featuresPanelPlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            handleTabNavigation(commandResult.getCategory());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 19,
      "lerxcl": 6,
      "caleblyx": 6,
      "-": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Label statusIcon;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Hyperlink meetingLink;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Label linkDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Label recurring;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        type.setText(task.getType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        description.setText(task.getDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        dateTime.setText(task.getDateTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        statusIcon.setText(\"Status: \" + task.getStatusIcon());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if (task.getLink().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            meetingLink.setText(task.getLink().get().getUrl());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            meetingLink.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        Desktop.getDesktop().browse(new URI(meetingLink.getText()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    } catch (IOException e1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        e1.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    } catch (URISyntaxException e1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        e1.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            linkDescription.setText(task.getLink().get().getDescription());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Recurrence recurrence \u003d task.getRecurrence();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (recurrence !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            recurring.setText(\"Recurring task [\" + recurrence.getValue() + \" \" + recurrence.getUnit() + \"]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 5,
      "kevnw": 20,
      "luciatirta": 7,
      "lerxcl": 7,
      "caleblyx": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/lifebook.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cStackPane fx:id\u003d\"commandTextPanel\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: derive(#29323C, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    background-color: #29323C; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-tab-min-width: 3em;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-tab-min-height: 3em;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 0.0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 0 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 0 30 0 30;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane .tab:focused"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane *.tab-header-background {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323c;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab-pane:top *.tab-header-area {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 0.416667em 0.166667em 0.0em 0.0em;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".tab:selected .focus-indicator {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-view .scroll-bar:vertical {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#485563;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-view .increment-button ,.list-view .decrement-button {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color:transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".list-view .scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#6a8098;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 4;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-color: #485563"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #626e7b;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #626e7b;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #343f4b;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #343f4b;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #343f4b;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-selection-bar: #485563;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".menu:focused {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color:#6a8098;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-insets: 2.5;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#commandTextPanel {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent #485563 transparent #485563;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#commandBoxPlaceholder {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#placeHolder {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 15 15;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#resultDisplayPlaceholder {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323C;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".text-area .scroll-pane {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".text-area .scroll-pane .viewport{"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".text-area .scroll-pane .content{"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #FFD540;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-radius: 15;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#featuresPanelPlaceholder {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #29323c;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-padding : 10 10 5 10"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#personList {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 0 15 15 15;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "#taskListPanel {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-color: #485563;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background-radius: 15 15 15 15;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 148,
      "-": 319
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    -fx-background: #485563;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Lifebook\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cImage url\u003d\"@/images/lifebook.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003cTabPane fx:id\u003d\"featuresPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cTab fx:id\u003d\"tabContacts\" closable\u003d\"false\" text\u003d\"Contacts\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        \u003cHBox prefWidth\u003d\"800.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"1000.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                \u003cVBox fx:id\u003d\"dueSoonTaskListPanel\" prefHeight\u003d\"100.0\" prefWidth\u003d\"1000.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                              \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"What is due soon?\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                    \u003cFont name\u003d\"System Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"dueSoonTasksPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cTab fx:id\u003d\"tabTasks\" closable\u003d\"false\" text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskListPanel\" layoutX\u003d\"10.0\" layoutY\u003d\"157.0\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"130\" minHeight\u003d\"130\" prefHeight\u003d\"130\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 24,
      "lerxcl": 24,
      "caleblyx": 8,
      "-": 42
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-result-display\" xmlns\u003d\"http://javafx.com/javafx/\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.control.Hyperlink?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         \u003cLabel fx:id\u003d\"type\" layoutX\u003d\"25.0\" layoutY\u003d\"72.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003cLabel fx:id\u003d\"statusIcon\" layoutX\u003d\"25.0\" layoutY\u003d\"63.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$statusIcon\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "      \u003cLabel fx:id\u003d\"recurring\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      \u003cHyperlink fx:id\u003d\"meetingLink\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "      \u003cLabel fx:id\u003d\"linkDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"No description\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kevnw": 3,
      "luciatirta": 2,
      "lerxcl": 2,
      "caleblyx": 37
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 1,
      "caleblyx": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/lifebook.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(temporaryFolder.resolve(\"taskList.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String deleteCommand \u003d \"delete contact 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String listCommand \u003d ListContactCommand.COMMAND_WORD + \" contact\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(listCommand, ListContactCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new JsonTaskListStorage(temporaryFolder.resolve(\"ioExceptiontaskList\" + \".json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String addCommand \u003d AddContactCommand.COMMAND_WORD + \" contact \" + NAME_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 7,
      "caleblyx": 8,
      "-": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validPerson), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(new AddContactCommand(personInList), model, AddContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 4,
      "luciatirta": 1,
      "caleblyx": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addContactCommand \u003d new AddContactCommand(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                AddContactCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addContactCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public AddCommand markAsDone(Task target) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 11,
      "lerxcl": 11,
      "caleblyx": 58,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                AddEventCommand.MESSAGE_DUPLICATE_EVENT, () -\u003e addEventCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_eventWithRecurrenceAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommandTest.ModelStubAcceptingEventAdded modelStub \u003d new AddEventCommandTest"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                .ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event validEvent \u003d new EventBuilder(PARTY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event meeting \u003d new EventBuilder().withDescription(\"meeting\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event party \u003d new EventBuilder().withDescription(\"party\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addMeetingCommand \u003d new AddEventCommand(meeting);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addPartyCommand \u003d new AddEventCommand(party);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand addMeetingCommandCopy \u003d new AddEventCommand(meeting);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addMeetingCommand.equals(addPartyCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // Needs to be null to update \"Due Soon\" section in GUI after adding a task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public AddCommand markAsDone(Task target) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that contains a single to-do."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task event) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return this.event.isSameTask(event);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that always accept the to-do being added."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task event) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameTask);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 254,
      "caleblyx": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddTodoCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void constructor_nullTodo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTodoCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_todoAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubAcceptingTodoAdded modelStub \u003d new ModelStubAcceptingTodoAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddTodoCommand(validTodo).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertEquals(String.format(AddTodoCommand.MESSAGE_SUCCESS, validTodo.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validTodo), modelStub.todosAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_duplicateTodo_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addTodoCommand \u003d new AddTodoCommand(validTodo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTodo(validTodo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                AddTodoCommand.MESSAGE_DUPLICATE_TODO, () -\u003e addTodoCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_todoWithRecurrenceAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubAcceptingTodoAdded modelStub \u003d new ModelStubAcceptingTodoAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder(CHORES).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        CommandResult commandResult \u003d new AddTodoCommand(validTodo).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(String.format(AddTodoCommand.MESSAGE_SUCCESS, validTodo.getDescriptionDateTime()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(Arrays.asList(validTodo), modelStub.todosAdded);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo homework \u003d new TodoBuilder().withDescription(\"homework\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo assignment \u003d new TodoBuilder().withDescription(\"assignment\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addHomeworkCommand \u003d new AddTodoCommand(homework);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addAssignmentCommand \u003d new AddTodoCommand(assignment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addHomeworkCommand.equals(addHomeworkCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand addHomeworkCommandCopy \u003d new AddTodoCommand(homework);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(addHomeworkCommand.equals(addHomeworkCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(addHomeworkCommand.equals(addAssignmentCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // Needs to be null to update \"Due Soon\" section in GUI after adding a task."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getDueSoonTaskList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteTodo(Task task) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void deleteEvent(Task task) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public AddCommand markAsDone(Task target) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedTaskList(Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        public void updateSortedPersonList(Comparator\u003cPerson\u003e personComparator) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caleblyx"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that contains a single to-do."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubWithTodo extends ModelStub {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        private final Todo todo;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelStubWithTodo(Todo todo) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.todo \u003d todo;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task todo) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return this.todo.isSameTask(todo);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * A Model stub that always accept the to-do being added."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private class ModelStubAcceptingTodoAdded extends ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        final ArrayList\u003cTodo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public boolean hasTask(Task todo) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return todosAdded.stream().anyMatch(todo::isSameTask);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            todosAdded.add(todo);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "lerxcl": 252,
      "caleblyx": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 2,
      "caleblyx": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", \"category\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", \"category\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, \"category\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", \"category\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, \"category\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, \"category\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        //different category value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", \"diff_category\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", \"category\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", \"category\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", \"category\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, \"category\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, \"category\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different category value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", \"diff_category\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 17,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static final EditContactCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage, String category,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, category);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 3,
      "luciatirta": 2,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteContactCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(deleteContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteContactCommand \u003d new DeleteContactCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(deleteContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteFirstCommand \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteSecondCommand \u003d new DeleteContactCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand deleteFirstCommandCopy \u003d new DeleteContactCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 13,
      "luciatirta": 2,
      "caleblyx": 4,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_validIndexTaskList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_invalidIndexTaskList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteFirstCommand \u003d new DeleteTaskCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteSecondCommand \u003d new DeleteTaskCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DeleteTaskCommand deleteFirstCommandCopy \u003d new DeleteTaskCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    //Task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // Implement this after implementing \"show\" command for To-do"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // 1) public void execute_validIndexFilteredTaskList_success()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // 2) public void execute_invalidIndexFilteredTaskList_throwsCommandException()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // 3) private void showNoTask(Model model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneTodo_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddCommand command \u003d todo.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addTodo(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneEvent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addEvent(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addEvent(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneRecurringTodo_success() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todoRecurring \u003d new TodoBuilder(CHORES).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todoRecurring);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addTodo(todoRecurring);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddCommand addRecurringCommand \u003d todoRecurring.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        addRecurringCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, todoRecurring);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_doneRecurringEvent_success() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event eventRecurring \u003d new EventBuilder(PARTY).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addEvent(eventRecurring);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        expectedModel.addEvent(eventRecurring);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddCommand addRecurringCommand \u003d eventRecurring.markAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        addRecurringCommand.execute(expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_AS_DONE_SUCCESS, eventRecurring);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_invalidIndexTaskList_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DoneCommand doneFirstCommandCopy \u003d new DoneCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DueBeforeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_rightDateAndTimeInputs_todoFound() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate predicate \u003d preparePredicate(\"date/13-12-2020 time/2359\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand command \u003d new DueBeforeCommand(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DueBeforeCommand.MESSAGE_SUCCESS, predicate.getDateTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate firstPredicate \u003d preparePredicate(\"date/10-10-2020 time/0000\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate secondPredicate \u003d preparePredicate(\"date/30-12-2021 time/2100\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand firstCommand \u003d new DueBeforeCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand secondCommand \u003d new DueBeforeCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand firstCommandCopy \u003d new DueBeforeCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses {@code userInput} into a {@code DueBeforePredicate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueBeforePredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String deadline \u003d userInput.replace(\"date/\", \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        deadline \u003d deadline.replace(\"time/\", \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DueBeforePredicate(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DueByCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueByCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueByPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueByCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void execute_rightDateAndTimeInputs_todoFound() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate predicate \u003d preparePredicate(\"date/13-12-2020 time/2359\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByCommand command \u003d new DueByCommand(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(DueByCommand.MESSAGE_SUCCESS, predicate.getDateTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate firstPredicate \u003d preparePredicate(\"date/10-10-2020 time/0000\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate secondPredicate \u003d preparePredicate(\"date/30-12-2021 time/2100\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByCommand firstCommand \u003d new DueByCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByCommand secondCommand \u003d new DueByCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByCommand firstCommandCopy \u003d new DueByCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Parses {@code userInput} into a {@code DueByPredicate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueByPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String deadline \u003d userInput.replace(\"date/\", \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        deadline \u003d deadline.replace(\"time/\", \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DueByPredicate(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditContactCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(EditContactCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "                new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(editContactCommand, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, EditContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand editContactCommand \u003d new EditContactCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertCommandFailure(editContactCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        final EditContactCommand standardCommand \u003d new EditContactCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand commandWithSameValues \u003d new EditContactCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditContactCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 23,
      "luciatirta": 4,
      "caleblyx": 10,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, \"EXIT\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindContactCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand findFirstCommand \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand findSecondCommand \u003d new FindContactCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand findFirstCommandCopy \u003d new FindContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand command \u003d new FindContactCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 7,
      "luciatirta": 4,
      "caleblyx": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.WORKSHOP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class FindEventCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_zeroKeywords_noTodoFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_multipleKeywords_multipleTodosFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"meeting workshop\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(MEETING, WORKSHOP), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.DEVELOPER_GUIDE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.USER_GUIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.find.FindTodoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class FindTodoCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand findFirstCommand \u003d new FindTodoCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand findSecondCommand \u003d new FindTodoCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand findFirstCommandCopy \u003d new FindTodoCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_zeroKeywords_noTodoFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand command \u003d new FindTodoCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_multipleKeywords_multipleTodosFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"update assignment\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FindTodoCommand command \u003d new FindTodoCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(ASSIGNMENT, USER_GUIDE, DEVELOPER_GUIDE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, \"HELP\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(new ListContactCommand(), model, ListContactCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 2,
      "luciatirta": 4,
      "caleblyx": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowTagContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.showtag.ShowTagContactCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.person.ContactTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ShowTagContactCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagContactCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new TaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactTagMatchesKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new ContactTagMatchesKeywordPredicate(\"first\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactTagMatchesKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new ContactTagMatchesKeywordPredicate(\"second\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagContactCommand showTagFirstCommand \u003d new ShowTagContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagContactCommand showTagSecondCommand \u003d new ShowTagContactCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(showTagFirstCommand.equals(showTagFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagContactCommand showTagFirstCommandCopy \u003d new ShowTagContactCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(showTagFirstCommand.equals(showTagFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(showTagSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingTag_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"Clown\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagContactCommand command \u003d new ShowTagContactCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_insesitiveCaseTag_personsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"OWESmOnEY\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagContactCommand command \u003d new ShowTagContactCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(BENSON), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_existingTag_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ContactTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"friends\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagContactCommand command \u003d new ShowTagContactCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"CONTACT\", expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses {@code userInput} into a {@code ContactTagMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ContactTagMatchesKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new ContactTagMatchesKeywordPredicate(userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowTagEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.WORKSHOP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEventsTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.showtag.ShowTagEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ShowTagEventCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagEventCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalEventsTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskTagMatchesKeywordPredicate(\"first\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskTagMatchesKeywordPredicate(\"second\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagEventCommand showTagFirstCommand \u003d new ShowTagEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagEventCommand showTagSecondCommand \u003d new ShowTagEventCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(showTagFirstCommand.equals(showTagFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagEventCommand showTagFirstCommandCopy \u003d new ShowTagEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(showTagFirstCommand.equals(showTagFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(showTagSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingTag_noEventFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"Clown\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagEventCommand command \u003d new ShowTagEventCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_insesitiveCaseTag_eventFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"workSHoP\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagEventCommand command \u003d new ShowTagEventCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(WORKSHOP), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_existingTag_multipleEventsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"cs2103t\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagEventCommand command \u003d new ShowTagEventCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(MEETING, LECTURE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses {@code userInput} into a {@code TaskTagMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskTagMatchesKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskTagMatchesKeywordPredicate(userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowTagTodoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.DEVELOPER_GUIDE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.USER_GUIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.getTypicalTodosTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.logic.commands.showtag.ShowTagTodoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.task.TaskTagMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ShowTagTodoCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ShowTagTodoCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), getTypicalTodosTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskTagMatchesKeywordPredicate(\"first\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            new TaskTagMatchesKeywordPredicate(\"second\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagTodoCommand showTagFirstCommand \u003d new ShowTagTodoCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagTodoCommand showTagSecondCommand \u003d new ShowTagTodoCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(showTagFirstCommand.equals(showTagFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagTodoCommand showTagFirstCommandCopy \u003d new ShowTagTodoCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertTrue(showTagFirstCommand.equals(showTagFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertFalse(showTagFirstCommand.equals(showTagSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_notExistingTag_noTodoFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"Clown\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagTodoCommand command \u003d new ShowTagTodoCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Collections.emptyList(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_insesitiveCaseTag_todoFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"Cs2100\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagTodoCommand command \u003d new ShowTagTodoCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(ASSIGNMENT), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void execute_existingTag_multipleTodosFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskTagMatchesKeywordPredicate predicate \u003d preparePredicate(\"cs2103t\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ShowTagTodoCommand command \u003d new ShowTagTodoCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, \"TASK\", expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Arrays.asList(USER_GUIDE, DEVELOPER_GUIDE), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses {@code userInput} into a {@code TaskTagMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskTagMatchesKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new TaskTagMatchesKeywordPredicate(userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddContactCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \" + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 31,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.PARTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_DESC \u003d \"desc/meeting \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_START_DATE \u003d \"startdate/12-12-2020 \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_START_TIME \u003d \"starttime/1000 \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_END_DATE \u003d \"enddate/12-12-2020 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String MEETING_END_TIME \u003d \"endtime/1130\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_DESC \u003d \"desc/party \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_START_DATE \u003d \"startdate/01-01-2020 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_START_TIME \u003d \"starttime/1800 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_END_DATE \u003d \"enddate/02-01-2020 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_END_TIME \u003d \"endtime/0600 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String PARTY_RECURRENCE \u003d \"recurring/1 year\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"startdate/1-15-2020 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"starttime/2500 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"enddate/1-15-2020 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"endtime/2500\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_RECURRENCE_VALUE \u003d \"recurring/0 day\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_RECURRENCE_UNIT \u003d \"recurring/1 sleep\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(MEETING).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_TIME"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_TIME"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing start date and time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_END_DATE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing end date and time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_START_TIME, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.DATE_TIME_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid startDate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + INVALID_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid endDate"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + INVALID_END_DATE + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid startTime"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + INVALID_START_TIME"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + MEETING_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid endTime"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + MEETING_START_DATE + MEETING_START_TIME"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + MEETING_END_DATE + INVALID_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid fields for all date and time"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + MEETING_DESC + INVALID_START_DATE + INVALID_START_TIME"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + INVALID_END_DATE + INVALID_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithRecurrence() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event expectedEvent \u003d new EventBuilder(PARTY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + PARTY_END_DATE + PARTY_END_TIME + PARTY_RECURRENCE, new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithWrongRecurrenceInput() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid recurrence value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + PARTY_END_DATE + PARTY_END_TIME + INVALID_RECURRENCE_VALUE, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid recurrence unit"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"event \" + PARTY_DESC + PARTY_START_DATE + PARTY_START_TIME"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + PARTY_END_DATE + PARTY_END_TIME + INVALID_RECURRENCE_UNIT, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTodoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.CHORES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class AddTodoCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String HOMEWORK_DESC \u003d \"desc/homework \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String HOMEWORK_DATE \u003d \"date/12-12-2020 \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String HOMEWORK_TIME \u003d \"time/2359\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_DESC \u003d \"desc/do chores \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_DATE \u003d \"date/01-01-2020 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_TIME \u003d \"time/1800 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String CHORES_RECURRENCE \u003d \"recurring/1 week\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_DATE \u003d \"date/1-15-2020 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_TIME \u003d \"time/2500\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_RECURRENCE_VALUE \u003d \"recurring/0 day\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String INVALID_RECURRENCE_UNIT \u003d \"recurring/1 sleep\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo expectedTodo \u003d new TodoBuilder(HOMEWORK).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_DATE + HOMEWORK_TIME,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DATE + HOMEWORK_TIME, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_TIME, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // missing time"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_DATE, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.DATE_TIME_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + INVALID_DATE + HOMEWORK_TIME,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + HOMEWORK_DESC + HOMEWORK_DATE + INVALID_TIME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithRecurrence() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo expectedTodo \u003d new TodoBuilder(CHORES).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME + CHORES_RECURRENCE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                new AddTodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_allFieldsPresentWithWrongRecurrenceInput() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTodoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid recurrence value"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + INVALID_RECURRENCE_VALUE, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // invalid recurrence unit"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"todo \" + CHORES_DESC + CHORES_DATE + CHORES_TIME"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + INVALID_RECURRENCE_UNIT, expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.add.AddTodoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.list.ListContactCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parseCommand_addContact() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new AddContactCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parseCommand_addTodo() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Todo todo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddTodoCommand command \u003d (AddTodoCommand) parser.parseCommand(AddTodoCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + \" todo desc/homework date/12-12-2020 time/2359\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(new AddTodoCommand(todo), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(AddEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + \" event desc/meeting startdate/12-12-2020 starttime/1000 enddate/12-12-2020 endtime/1130\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        DeleteContactCommand command \u003d (DeleteContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                DeleteContactCommand.COMMAND_WORD + \" contact \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new DeleteContactCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand command \u003d (EditContactCommand) parser.parseCommand(EditContactCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" contact \" + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new EditContactCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand command \u003d (FindContactCommand) parser.parseCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                FindContactCommand.COMMAND_WORD + \" contact \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertEquals(new FindContactCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" contact \") instanceof ListContactCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void parseCommand_list_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            -\u003e parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 6,
      "kevnw": 20,
      "lerxcl": 23,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DeleteContactCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact 1\", new DeleteContactCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"task 1\", new DeleteTaskCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"task a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DoneParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DueBeforeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueBeforeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueBeforePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforeParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueBeforeCommandParser parser \u003d new DueBeforeCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueBeforeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDueBeforeCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforeCommand expectedCommand \u003d new DueBeforeCommand(new DueBeforePredicate(\"12-12-2020 2359\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"date/12-12-2020 time/2359\", expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DueByParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.logic.commands.due.DueByCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.DueByPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueByParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DueByCommandParser parser \u003d new DueByCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DueByCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void parse_validArgs_returnsDueByCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByCommand expectedCommand \u003d new DueByCommand(new DueByPredicate(\"12-12-2020 2359\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertParseSuccess(parser, \"date/12-12-2020 time/2359\", expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class EditContactCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact \" + VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\", EditContactCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact -5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + TAG_EMPTY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact 1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact \" + targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact \" + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact \" + targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact \" + targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact \" + targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact \" + targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact \" + targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact \" + targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact \" + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput \u003d \"contact \" + targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String userInput \u003d \"contact \" + targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        EditContactCommand expectedCommand \u003d new EditContactCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 48,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.find.FindContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class FindContactCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseFailure(parser, \"contact     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FindContactCommand expectedFindContactCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                new FindContactCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact Alice Bob\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        assertParseSuccess(parser, \"contact \\n Alice \\n \\t Bob  \\t\", expectedFindContactCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 8,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, new TaskList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, new TaskList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, new TaskList())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, new TaskList())));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, new TaskList())));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 5,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DueBeforePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueBeforePredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_tasksDueBefore_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate predicate \u003d new DueBeforePredicate(\"20-12-2020 2359\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do (homework)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event (meeting)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_noTasksDueBefore_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate predicate \u003d new DueBeforePredicate(\"01-01-2020 2359\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String firstDateTime \u003d \"10-10-2010 1010\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String secondDateTime \u003d \"20-12-2020 2359\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate firstPredicate \u003d new DueBeforePredicate(firstDateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate secondPredicate \u003d new DueBeforePredicate(secondDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueBeforePredicate firstPredicateCopy \u003d new DueBeforePredicate(firstDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DueByPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DueByPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_tasksDueBy_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate predicate \u003d new DueByPredicate(\"12-12-2020 2359\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do (homework)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event (meeting)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        predicate \u003d new DueByPredicate(\"12-12-2020 1130\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void test_noTasksDueBy_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate predicate \u003d new DueByPredicate(\"15-12-2020 2359\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //To-do"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new TodoBuilder().build()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        //Event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(predicate.test(new EventBuilder().build()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String firstDateTime \u003d \"10-10-2010 1010\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String secondDateTime \u003d \"20-12-2020 2359\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate firstPredicate \u003d new DueByPredicate(firstDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate secondPredicate \u003d new DueByPredicate(secondDateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        DueByPredicate firstPredicateCopy \u003d new DueByPredicate(firstDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(getTempFilePath(\"tl\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, taskListStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class to help with building To-do objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_DESC \u003d \"meeting\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_STARTDATETIME \u003d \"12-12-2020 1000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_ENDDATETIME \u003d \"12-12-2020 1130\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String startDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String endDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates a {@code EventBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d DEFAULT_DESC;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        startDateTime \u003d DEFAULT_STARTDATETIME;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        endDateTime \u003d DEFAULT_ENDDATETIME;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code EventToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        startDateTime \u003d eventToCopy.getStartDateTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        endDateTime \u003d eventToCopy.getEndDateTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d eventToCopy.getRecurrence();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Description} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code startDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withStartDateTime(String startDateTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code endDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withEndDateTime(String endDateTime) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Recurrence} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public EventBuilder withRecurrence(String recurrenceInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new Event(description, startDateTime, endDateTime, recurrence, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 16,
      "lerxcl": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.add.AddContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import seedu.address.logic.commands.edit.EditContactCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" contact \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TodoBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Recurrence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class to help with building To-do objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class TodoBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of inputted dates that the class can accept."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * The format of outputted dates by the class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_DESC \u003d \"homework\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private static final String DEFAULT_DATETIME \u003d \"12-12-2020 2359\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates a {@code TodoBuilder} with the default details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d DEFAULT_DESC;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dateTime \u003d DEFAULT_DATETIME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Initializes the TodoBuilder with the data of {@code TodoToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder(Todo todoToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        description \u003d todoToCopy.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String dateTimeOutput \u003d todoToCopy.getDateTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // flip the output and input of LocalDateTime"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dateTime \u003d LocalDateTime.parse(dateTimeOutput, OUTPUT_DATE_TIME_FORMAT).format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        recurrence \u003d todoToCopy.getRecurrence();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(todoToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Description} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code DateTime} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Sets the {@code Recurrence} of the {@code To-do} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public TodoBuilder withRecurrence(String recurrenceInput) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String[] recurrenceSplit \u003d recurrenceInput.split(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Integer recurrenceValue \u003d Integer.parseInt(recurrenceSplit[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String recurrenceTimePeriod \u003d recurrenceSplit[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.recurrence \u003d new Recurrence(recurrenceValue, recurrenceTimePeriod);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Todo} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TodoBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Todo build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new Todo(description, dateTime, recurrence, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 16,
      "lerxcl": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class containing a list of {@code Events} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Event MEETING \u003d new EventBuilder().withDescription(\"meeting\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withStartDateTime(\"12-12-2020 1000\").withEndDateTime(\"12-12-2020 1130\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Event PARTY \u003d new EventBuilder().withDescription(\"party\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withStartDateTime(\"01-01-2020 1800\").withEndDateTime(\"02-01-2020 0600\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withRecurrence(\"1 year\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Event LECTURE \u003d new EventBuilder().withDescription(\"lecture\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withStartDateTime(\"23-10-2020 1600\").withEndDateTime(\"23-10-2020 1600\").withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Event WORKSHOP \u003d new EventBuilder().withDescription(\"attend workshop\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withStartDateTime(\"12-11-2020 1200\").withEndDateTime(\"12-11-2020 1600\").withTags(\"workshop\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns an {@code TaskList} with all the typical Events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static TaskList getTypicalEventsTaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskList ab \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        for (Event event: getTypicalEvents()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ab.addTask(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MEETING, PARTY, LECTURE, WORKSHOP));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12,
      "lerxcl": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTodos.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import seedu.address.model.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A utility class containing a list of {@code To-dos} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class TypicalTodos {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Todo HOMEWORK \u003d new TodoBuilder().withDescription(\"homework\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withDateTime(\"12-12-2020 2359\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static final Todo CHORES \u003d new TodoBuilder().withDescription(\"do chores\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            .withDateTime(\"01-01-2020 1800\").withRecurrence(\"1 week\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Todo ASSIGNMENT \u003d new TodoBuilder().withDescription(\"finish assignment\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            .withDateTime(\"01-10-2020 1600\").withTags(\"cs2100\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Todo USER_GUIDE \u003d new TodoBuilder().withDescription(\"update user guide\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        .withDateTime(\"05-10-2021 2000\").withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static final Todo DEVELOPER_GUIDE \u003d new TodoBuilder().withDescription(\"update developer guide\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        .withDateTime(\"15-11-2020 2300\").withTags(\"CS2103T\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TypicalTodos() {} // prevents instantiation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Returns an {@code TaskList} with all the typical todos."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static TaskList getTypicalTodosTaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        TaskList ab \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        for (Todo todo: getTypicalTodos()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ab.addTask(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static List\u003cTodo\u003e getTypicalTodos() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HOMEWORK, CHORES, ASSIGNMENT, USER_GUIDE, DEVELOPER_GUIDE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12,
      "lerxcl": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caleblyx"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caleblyx": 1,
      "-": 113
    }
  }
]
